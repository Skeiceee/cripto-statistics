/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/chart.min.js":
/*!***********************************!*\
  !*** ./resources/js/chart.min.js ***!
  \***********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _get2(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get2 = Reflect.get; } else { _get2 = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get2(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e59) { throw _e59; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e60) { didErr = true; err = _e60; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * Chart.js v3.4.1\n * https://www.chartjs.org\n * (c) 2021 Chart.js Contributors\n * Released under the MIT License\n */\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function () {\n  \"use strict\";\n\n  var t = \"undefined\" == typeof window ? function (t) {\n    return t();\n  } : window.requestAnimationFrame;\n\n  function e(e, i, n) {\n    var o = n || function (t) {\n      return Array.prototype.slice.call(t);\n    };\n\n    var s = !1,\n        a = [];\n    return function () {\n      for (var _len = arguments.length, n = new Array(_len), _key = 0; _key < _len; _key++) {\n        n[_key] = arguments[_key];\n      }\n\n      a = o(n), s || (s = !0, t.call(window, function () {\n        s = !1, e.apply(i, a);\n      }));\n    };\n  }\n\n  function i(t, e) {\n    var i;\n    return function () {\n      return e ? (clearTimeout(i), i = setTimeout(t, e)) : t(), e;\n    };\n  }\n\n  var n = function n(t) {\n    return \"start\" === t ? \"left\" : \"end\" === t ? \"right\" : \"center\";\n  },\n      o = function o(t, e, i) {\n    return \"start\" === t ? e : \"end\" === t ? i : (e + i) / 2;\n  },\n      s = function s(t, e, i, n) {\n    return t === (n ? \"left\" : \"right\") ? i : \"center\" === t ? (e + i) / 2 : e;\n  };\n\n  var a = new ( /*#__PURE__*/function () {\n    function _class() {\n      _classCallCheck(this, _class);\n\n      this._request = null, this._charts = new Map(), this._running = !1, this._lastDate = void 0;\n    }\n\n    _createClass(_class, [{\n      key: \"_notify\",\n      value: function _notify(t, e, i, n) {\n        var o = e.listeners[n],\n            s = e.duration;\n        o.forEach(function (n) {\n          return n({\n            chart: t,\n            initial: e.initial,\n            numSteps: s,\n            currentStep: Math.min(i - e.start, s)\n          });\n        });\n      }\n    }, {\n      key: \"_refresh\",\n      value: function _refresh() {\n        var e = this;\n        e._request || (e._running = !0, e._request = t.call(window, function () {\n          e._update(), e._request = null, e._running && e._refresh();\n        }));\n      }\n    }, {\n      key: \"_update\",\n      value: function _update() {\n        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n        var e = this;\n        var i = 0;\n        e._charts.forEach(function (n, o) {\n          if (!n.running || !n.items.length) return;\n          var s = n.items;\n          var a,\n              r = s.length - 1,\n              l = !1;\n\n          for (; r >= 0; --r) {\n            a = s[r], a._active ? (a._total > n.duration && (n.duration = a._total), a.tick(t), l = !0) : (s[r] = s[s.length - 1], s.pop());\n          }\n\n          l && (o.draw(), e._notify(o, n, t, \"progress\")), s.length || (n.running = !1, e._notify(o, n, t, \"complete\"), n.initial = !1), i += s.length;\n        }), e._lastDate = t, 0 === i && (e._running = !1);\n      }\n    }, {\n      key: \"_getAnims\",\n      value: function _getAnims(t) {\n        var e = this._charts;\n        var i = e.get(t);\n        return i || (i = {\n          running: !1,\n          initial: !0,\n          items: [],\n          listeners: {\n            complete: [],\n            progress: []\n          }\n        }, e.set(t, i)), i;\n      }\n    }, {\n      key: \"listen\",\n      value: function listen(t, e, i) {\n        this._getAnims(t).listeners[e].push(i);\n      }\n    }, {\n      key: \"add\",\n      value: function add(t, e) {\n        var _this$_getAnims$items;\n\n        e && e.length && (_this$_getAnims$items = this._getAnims(t).items).push.apply(_this$_getAnims$items, _toConsumableArray(e));\n      }\n    }, {\n      key: \"has\",\n      value: function has(t) {\n        return this._getAnims(t).items.length > 0;\n      }\n    }, {\n      key: \"start\",\n      value: function start(t) {\n        var e = this._charts.get(t);\n\n        e && (e.running = !0, e.start = Date.now(), e.duration = e.items.reduce(function (t, e) {\n          return Math.max(t, e._duration);\n        }, 0), this._refresh());\n      }\n    }, {\n      key: \"running\",\n      value: function running(t) {\n        if (!this._running) return !1;\n\n        var e = this._charts.get(t);\n\n        return !!(e && e.running && e.items.length);\n      }\n    }, {\n      key: \"stop\",\n      value: function stop(t) {\n        var e = this._charts.get(t);\n\n        if (!e || !e.items.length) return;\n        var i = e.items;\n        var n = i.length - 1;\n\n        for (; n >= 0; --n) {\n          i[n].cancel();\n        }\n\n        e.items = [], this._notify(t, e, Date.now(), \"complete\");\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(t) {\n        return this._charts[\"delete\"](t);\n      }\n    }]);\n\n    return _class;\n  }())();\n  /*!\n   * @kurkle/color v0.1.9\n   * https://github.com/kurkle/color#readme\n   * (c) 2020 Jukka Kurkela\n   * Released under the MIT License\n   */\n\n  var r = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15,\n    a: 10,\n    b: 11,\n    c: 12,\n    d: 13,\n    e: 14,\n    f: 15\n  },\n      l = \"0123456789ABCDEF\",\n      c = function c(t) {\n    return l[15 & t];\n  },\n      h = function h(t) {\n    return l[(240 & t) >> 4] + l[15 & t];\n  },\n      d = function d(t) {\n    return (240 & t) >> 4 == (15 & t);\n  };\n\n  function u(t) {\n    var e = function (t) {\n      return d(t.r) && d(t.g) && d(t.b) && d(t.a);\n    }(t) ? c : h;\n    return t ? \"#\" + e(t.r) + e(t.g) + e(t.b) + (t.a < 255 ? e(t.a) : \"\") : t;\n  }\n\n  function f(t) {\n    return t + .5 | 0;\n  }\n\n  var g = function g(t, e, i) {\n    return Math.max(Math.min(t, i), e);\n  };\n\n  function p(t) {\n    return g(f(2.55 * t), 0, 255);\n  }\n\n  function m(t) {\n    return g(f(255 * t), 0, 255);\n  }\n\n  function x(t) {\n    return g(f(t / 2.55) / 100, 0, 1);\n  }\n\n  function b(t) {\n    return g(f(100 * t), 0, 100);\n  }\n\n  var _ = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\n  var y = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\n\n  function v(t, e, i) {\n    var n = e * Math.min(i, 1 - i),\n        o = function o(e) {\n      var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (e + t / 30) % 12;\n      return i - n * Math.max(Math.min(o - 3, 9 - o, 1), -1);\n    };\n\n    return [o(0), o(8), o(4)];\n  }\n\n  function w(t, e, i) {\n    var n = function n(_n2) {\n      var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (_n2 + t / 60) % 6;\n      return i - i * e * Math.max(Math.min(o, 4 - o, 1), 0);\n    };\n\n    return [n(5), n(3), n(1)];\n  }\n\n  function M(t, e, i) {\n    var n = v(t, 1, .5);\n    var o;\n\n    for (e + i > 1 && (o = 1 / (e + i), e *= o, i *= o), o = 0; o < 3; o++) {\n      n[o] *= 1 - e - i, n[o] += e;\n    }\n\n    return n;\n  }\n\n  function k(t) {\n    var e = t.r / 255,\n        i = t.g / 255,\n        n = t.b / 255,\n        o = Math.max(e, i, n),\n        s = Math.min(e, i, n),\n        a = (o + s) / 2;\n    var r, l, c;\n    return o !== s && (c = o - s, l = a > .5 ? c / (2 - o - s) : c / (o + s), r = o === e ? (i - n) / c + (i < n ? 6 : 0) : o === i ? (n - e) / c + 2 : (e - i) / c + 4, r = 60 * r + .5), [0 | r, l || 0, a];\n  }\n\n  function S(t, e, i, n) {\n    return (Array.isArray(e) ? t(e[0], e[1], e[2]) : t(e, i, n)).map(m);\n  }\n\n  function P(t, e, i) {\n    return S(v, t, e, i);\n  }\n\n  function D(t) {\n    return (t % 360 + 360) % 360;\n  }\n\n  function C(t) {\n    var e = y.exec(t);\n    var i,\n        n = 255;\n    if (!e) return;\n    e[5] !== i && (n = e[6] ? p(+e[5]) : m(+e[5]));\n    var o = D(+e[2]),\n        s = +e[3] / 100,\n        a = +e[4] / 100;\n    return i = \"hwb\" === e[1] ? function (t, e, i) {\n      return S(M, t, e, i);\n    }(o, s, a) : \"hsv\" === e[1] ? function (t, e, i) {\n      return S(w, t, e, i);\n    }(o, s, a) : P(o, s, a), {\n      r: i[0],\n      g: i[1],\n      b: i[2],\n      a: n\n    };\n  }\n\n  var O = {\n    x: \"dark\",\n    Z: \"light\",\n    Y: \"re\",\n    X: \"blu\",\n    W: \"gr\",\n    V: \"medium\",\n    U: \"slate\",\n    A: \"ee\",\n    T: \"ol\",\n    S: \"or\",\n    B: \"ra\",\n    C: \"lateg\",\n    D: \"ights\",\n    R: \"in\",\n    Q: \"turquois\",\n    E: \"hi\",\n    P: \"ro\",\n    O: \"al\",\n    N: \"le\",\n    M: \"de\",\n    L: \"yello\",\n    F: \"en\",\n    K: \"ch\",\n    G: \"arks\",\n    H: \"ea\",\n    I: \"ightg\",\n    J: \"wh\"\n  },\n      T = {\n    OiceXe: \"f0f8ff\",\n    antiquewEte: \"faebd7\",\n    aqua: \"ffff\",\n    aquamarRe: \"7fffd4\",\n    azuY: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"0\",\n    blanKedOmond: \"ffebcd\",\n    Xe: \"ff\",\n    XeviTet: \"8a2be2\",\n    bPwn: \"a52a2a\",\n    burlywood: \"deb887\",\n    caMtXe: \"5f9ea0\",\n    KartYuse: \"7fff00\",\n    KocTate: \"d2691e\",\n    cSO: \"ff7f50\",\n    cSnflowerXe: \"6495ed\",\n    cSnsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"ffff\",\n    xXe: \"8b\",\n    xcyan: \"8b8b\",\n    xgTMnPd: \"b8860b\",\n    xWay: \"a9a9a9\",\n    xgYF: \"6400\",\n    xgYy: \"a9a9a9\",\n    xkhaki: \"bdb76b\",\n    xmagFta: \"8b008b\",\n    xTivegYF: \"556b2f\",\n    xSange: \"ff8c00\",\n    xScEd: \"9932cc\",\n    xYd: \"8b0000\",\n    xsOmon: \"e9967a\",\n    xsHgYF: \"8fbc8f\",\n    xUXe: \"483d8b\",\n    xUWay: \"2f4f4f\",\n    xUgYy: \"2f4f4f\",\n    xQe: \"ced1\",\n    xviTet: \"9400d3\",\n    dAppRk: \"ff1493\",\n    dApskyXe: \"bfff\",\n    dimWay: \"696969\",\n    dimgYy: \"696969\",\n    dodgerXe: \"1e90ff\",\n    fiYbrick: \"b22222\",\n    flSOwEte: \"fffaf0\",\n    foYstWAn: \"228b22\",\n    fuKsia: \"ff00ff\",\n    gaRsbSo: \"dcdcdc\",\n    ghostwEte: \"f8f8ff\",\n    gTd: \"ffd700\",\n    gTMnPd: \"daa520\",\n    Way: \"808080\",\n    gYF: \"8000\",\n    gYFLw: \"adff2f\",\n    gYy: \"808080\",\n    honeyMw: \"f0fff0\",\n    hotpRk: \"ff69b4\",\n    RdianYd: \"cd5c5c\",\n    Rdigo: \"4b0082\",\n    ivSy: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavFMr: \"e6e6fa\",\n    lavFMrXsh: \"fff0f5\",\n    lawngYF: \"7cfc00\",\n    NmoncEffon: \"fffacd\",\n    ZXe: \"add8e6\",\n    ZcSO: \"f08080\",\n    Zcyan: \"e0ffff\",\n    ZgTMnPdLw: \"fafad2\",\n    ZWay: \"d3d3d3\",\n    ZgYF: \"90ee90\",\n    ZgYy: \"d3d3d3\",\n    ZpRk: \"ffb6c1\",\n    ZsOmon: \"ffa07a\",\n    ZsHgYF: \"20b2aa\",\n    ZskyXe: \"87cefa\",\n    ZUWay: \"778899\",\n    ZUgYy: \"778899\",\n    ZstAlXe: \"b0c4de\",\n    ZLw: \"ffffe0\",\n    lime: \"ff00\",\n    limegYF: \"32cd32\",\n    lRF: \"faf0e6\",\n    magFta: \"ff00ff\",\n    maPon: \"800000\",\n    VaquamarRe: \"66cdaa\",\n    VXe: \"cd\",\n    VScEd: \"ba55d3\",\n    VpurpN: \"9370db\",\n    VsHgYF: \"3cb371\",\n    VUXe: \"7b68ee\",\n    VsprRggYF: \"fa9a\",\n    VQe: \"48d1cc\",\n    VviTetYd: \"c71585\",\n    midnightXe: \"191970\",\n    mRtcYam: \"f5fffa\",\n    mistyPse: \"ffe4e1\",\n    moccasR: \"ffe4b5\",\n    navajowEte: \"ffdead\",\n    navy: \"80\",\n    Tdlace: \"fdf5e6\",\n    Tive: \"808000\",\n    TivedBb: \"6b8e23\",\n    Sange: \"ffa500\",\n    SangeYd: \"ff4500\",\n    ScEd: \"da70d6\",\n    pOegTMnPd: \"eee8aa\",\n    pOegYF: \"98fb98\",\n    pOeQe: \"afeeee\",\n    pOeviTetYd: \"db7093\",\n    papayawEp: \"ffefd5\",\n    pHKpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pRk: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powMrXe: \"b0e0e6\",\n    purpN: \"800080\",\n    YbeccapurpN: \"663399\",\n    Yd: \"ff0000\",\n    Psybrown: \"bc8f8f\",\n    PyOXe: \"4169e1\",\n    saddNbPwn: \"8b4513\",\n    sOmon: \"fa8072\",\n    sandybPwn: \"f4a460\",\n    sHgYF: \"2e8b57\",\n    sHshell: \"fff5ee\",\n    siFna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyXe: \"87ceeb\",\n    UXe: \"6a5acd\",\n    UWay: \"708090\",\n    UgYy: \"708090\",\n    snow: \"fffafa\",\n    sprRggYF: \"ff7f\",\n    stAlXe: \"4682b4\",\n    tan: \"d2b48c\",\n    teO: \"8080\",\n    tEstN: \"d8bfd8\",\n    tomato: \"ff6347\",\n    Qe: \"40e0d0\",\n    viTet: \"ee82ee\",\n    JHt: \"f5deb3\",\n    wEte: \"ffffff\",\n    wEtesmoke: \"f5f5f5\",\n    Lw: \"ffff00\",\n    LwgYF: \"9acd32\"\n  };\n  var A;\n\n  function L(t) {\n    A || (A = function () {\n      var t = {},\n          e = Object.keys(T),\n          i = Object.keys(O);\n      var n, o, s, a, r;\n\n      for (n = 0; n < e.length; n++) {\n        for (a = r = e[n], o = 0; o < i.length; o++) {\n          s = i[o], r = r.replace(s, O[s]);\n        }\n\n        s = parseInt(T[a], 16), t[r] = [s >> 16 & 255, s >> 8 & 255, 255 & s];\n      }\n\n      return t;\n    }(), A.transparent = [0, 0, 0, 0]);\n    var e = A[t.toLowerCase()];\n    return e && {\n      r: e[0],\n      g: e[1],\n      b: e[2],\n      a: 4 === e.length ? e[3] : 255\n    };\n  }\n\n  function R(t, e, i) {\n    if (t) {\n      var _n3 = k(t);\n\n      _n3[e] = Math.max(0, Math.min(_n3[e] + _n3[e] * i, 0 === e ? 360 : 1)), _n3 = P(_n3), t.r = _n3[0], t.g = _n3[1], t.b = _n3[2];\n    }\n  }\n\n  function E(t, e) {\n    return t ? Object.assign(e || {}, t) : t;\n  }\n\n  function z(t) {\n    var e = {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 255\n    };\n    return Array.isArray(t) ? t.length >= 3 && (e = {\n      r: t[0],\n      g: t[1],\n      b: t[2],\n      a: 255\n    }, t.length > 3 && (e.a = m(t[3]))) : (e = E(t, {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 1\n    })).a = m(e.a), e;\n  }\n\n  function I(t) {\n    return \"r\" === t.charAt(0) ? function (t) {\n      var e = _.exec(t);\n\n      var i,\n          n,\n          o,\n          s = 255;\n\n      if (e) {\n        if (e[7] !== i) {\n          var _t2 = +e[7];\n\n          s = 255 & (e[8] ? p(_t2) : 255 * _t2);\n        }\n\n        return i = +e[1], n = +e[3], o = +e[5], i = 255 & (e[2] ? p(i) : i), n = 255 & (e[4] ? p(n) : n), o = 255 & (e[6] ? p(o) : o), {\n          r: i,\n          g: n,\n          b: o,\n          a: s\n        };\n      }\n    }(t) : C(t);\n  }\n\n  var F = /*#__PURE__*/function () {\n    function F(t) {\n      _classCallCheck(this, F);\n\n      if (t instanceof F) return t;\n\n      var e = _typeof(t);\n\n      var i;\n      var n, o, s;\n      \"object\" === e ? i = z(t) : \"string\" === e && (s = (n = t).length, \"#\" === n[0] && (4 === s || 5 === s ? o = {\n        r: 255 & 17 * r[n[1]],\n        g: 255 & 17 * r[n[2]],\n        b: 255 & 17 * r[n[3]],\n        a: 5 === s ? 17 * r[n[4]] : 255\n      } : 7 !== s && 9 !== s || (o = {\n        r: r[n[1]] << 4 | r[n[2]],\n        g: r[n[3]] << 4 | r[n[4]],\n        b: r[n[5]] << 4 | r[n[6]],\n        a: 9 === s ? r[n[7]] << 4 | r[n[8]] : 255\n      })), i = o || L(t) || I(t)), this._rgb = i, this._valid = !!i;\n    }\n\n    _createClass(F, [{\n      key: \"valid\",\n      get: function get() {\n        return this._valid;\n      }\n    }, {\n      key: \"rgb\",\n      get: function get() {\n        var t = E(this._rgb);\n        return t && (t.a = x(t.a)), t;\n      },\n      set: function set(t) {\n        this._rgb = z(t);\n      }\n    }, {\n      key: \"rgbString\",\n      value: function rgbString() {\n        return this._valid ? (t = this._rgb) && (t.a < 255 ? \"rgba(\".concat(t.r, \", \").concat(t.g, \", \").concat(t.b, \", \").concat(x(t.a), \")\") : \"rgb(\".concat(t.r, \", \").concat(t.g, \", \").concat(t.b, \")\")) : this._rgb;\n        var t;\n      }\n    }, {\n      key: \"hexString\",\n      value: function hexString() {\n        return this._valid ? u(this._rgb) : this._rgb;\n      }\n    }, {\n      key: \"hslString\",\n      value: function hslString() {\n        return this._valid ? function (t) {\n          if (!t) return;\n          var e = k(t),\n              i = e[0],\n              n = b(e[1]),\n              o = b(e[2]);\n          return t.a < 255 ? \"hsla(\".concat(i, \", \").concat(n, \"%, \").concat(o, \"%, \").concat(x(t.a), \")\") : \"hsl(\".concat(i, \", \").concat(n, \"%, \").concat(o, \"%)\");\n        }(this._rgb) : this._rgb;\n      }\n    }, {\n      key: \"mix\",\n      value: function mix(t, e) {\n        var i = this;\n\n        if (t) {\n          var _n4 = i.rgb,\n              _o2 = t.rgb;\n\n          var _s2;\n\n          var _a = e === _s2 ? .5 : e,\n              _r = 2 * _a - 1,\n              _l = _n4.a - _o2.a,\n              _c = ((_r * _l == -1 ? _r : (_r + _l) / (1 + _r * _l)) + 1) / 2;\n\n          _s2 = 1 - _c, _n4.r = 255 & _c * _n4.r + _s2 * _o2.r + .5, _n4.g = 255 & _c * _n4.g + _s2 * _o2.g + .5, _n4.b = 255 & _c * _n4.b + _s2 * _o2.b + .5, _n4.a = _a * _n4.a + (1 - _a) * _o2.a, i.rgb = _n4;\n        }\n\n        return i;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new F(this.rgb);\n      }\n    }, {\n      key: \"alpha\",\n      value: function alpha(t) {\n        return this._rgb.a = m(t), this;\n      }\n    }, {\n      key: \"clearer\",\n      value: function clearer(t) {\n        return this._rgb.a *= 1 - t, this;\n      }\n    }, {\n      key: \"greyscale\",\n      value: function greyscale() {\n        var t = this._rgb,\n            e = f(.3 * t.r + .59 * t.g + .11 * t.b);\n        return t.r = t.g = t.b = e, this;\n      }\n    }, {\n      key: \"opaquer\",\n      value: function opaquer(t) {\n        return this._rgb.a *= 1 + t, this;\n      }\n    }, {\n      key: \"negate\",\n      value: function negate() {\n        var t = this._rgb;\n        return t.r = 255 - t.r, t.g = 255 - t.g, t.b = 255 - t.b, this;\n      }\n    }, {\n      key: \"lighten\",\n      value: function lighten(t) {\n        return R(this._rgb, 2, t), this;\n      }\n    }, {\n      key: \"darken\",\n      value: function darken(t) {\n        return R(this._rgb, 2, -t), this;\n      }\n    }, {\n      key: \"saturate\",\n      value: function saturate(t) {\n        return R(this._rgb, 1, t), this;\n      }\n    }, {\n      key: \"desaturate\",\n      value: function desaturate(t) {\n        return R(this._rgb, 1, -t), this;\n      }\n    }, {\n      key: \"rotate\",\n      value: function rotate(t) {\n        return function (t, e) {\n          var i = k(t);\n          i[0] = D(i[0] + e), i = P(i), t.r = i[0], t.g = i[1], t.b = i[2];\n        }(this._rgb, t), this;\n      }\n    }]);\n\n    return F;\n  }();\n\n  function B(t) {\n    return new F(t);\n  }\n\n  var V = function V(t) {\n    return t instanceof CanvasGradient || t instanceof CanvasPattern;\n  };\n\n  function W(t) {\n    return V(t) ? t : B(t);\n  }\n\n  function N(t) {\n    return V(t) ? t : B(t).saturate(.5).darken(.1).hexString();\n  }\n\n  function H() {}\n\n  var j = function () {\n    var t = 0;\n    return function () {\n      return t++;\n    };\n  }();\n\n  function $(t) {\n    return null == t;\n  }\n\n  function Y(t) {\n    if (Array.isArray && Array.isArray(t)) return !0;\n    var e = Object.prototype.toString.call(t);\n    return \"[object\" === e.substr(0, 7) && \"Array]\" === e.substr(-6);\n  }\n\n  function U(t) {\n    return null !== t && \"[object Object]\" === Object.prototype.toString.call(t);\n  }\n\n  var X = function X(t) {\n    return (\"number\" == typeof t || t instanceof Number) && isFinite(+t);\n  };\n\n  function q(t, e) {\n    return X(t) ? t : e;\n  }\n\n  function K(t, e) {\n    return void 0 === t ? e : t;\n  }\n\n  var G = function G(t, e) {\n    return \"string\" == typeof t && t.endsWith(\"%\") ? parseFloat(t) / 100 : t / e;\n  },\n      Z = function Z(t, e) {\n    return \"string\" == typeof t && t.endsWith(\"%\") ? parseFloat(t) / 100 * e : +t;\n  };\n\n  function Q(t, e, i) {\n    if (t && \"function\" == typeof t.call) return t.apply(i, e);\n  }\n\n  function J(t, e, i, n) {\n    var o, s, a;\n    if (Y(t)) {\n      if (s = t.length, n) for (o = s - 1; o >= 0; o--) {\n        e.call(i, t[o], o);\n      } else for (o = 0; o < s; o++) {\n        e.call(i, t[o], o);\n      }\n    } else if (U(t)) for (a = Object.keys(t), s = a.length, o = 0; o < s; o++) {\n      e.call(i, t[a[o]], a[o]);\n    }\n  }\n\n  function tt(t, e) {\n    var i, n, o, s;\n    if (!t || !e || t.length !== e.length) return !1;\n\n    for (i = 0, n = t.length; i < n; ++i) {\n      if (o = t[i], s = e[i], o.datasetIndex !== s.datasetIndex || o.index !== s.index) return !1;\n    }\n\n    return !0;\n  }\n\n  function et(t) {\n    if (Y(t)) return t.map(et);\n\n    if (U(t)) {\n      var _e2 = Object.create(null),\n          _i2 = Object.keys(t),\n          _n5 = _i2.length;\n\n      var _o3 = 0;\n\n      for (; _o3 < _n5; ++_o3) {\n        _e2[_i2[_o3]] = et(t[_i2[_o3]]);\n      }\n\n      return _e2;\n    }\n\n    return t;\n  }\n\n  function it(t) {\n    return -1 === [\"__proto__\", \"prototype\", \"constructor\"].indexOf(t);\n  }\n\n  function nt(t, e, i, n) {\n    if (!it(t)) return;\n    var o = e[t],\n        s = i[t];\n    U(o) && U(s) ? ot(o, s, n) : e[t] = et(s);\n  }\n\n  function ot(t, e, i) {\n    var n = Y(e) ? e : [e],\n        o = n.length;\n    if (!U(t)) return t;\n    var s = (i = i || {}).merger || nt;\n\n    for (var _a2 = 0; _a2 < o; ++_a2) {\n      if (!U(e = n[_a2])) continue;\n\n      var _o4 = Object.keys(e);\n\n      for (var _n6 = 0, _a3 = _o4.length; _n6 < _a3; ++_n6) {\n        s(_o4[_n6], t, e, i);\n      }\n    }\n\n    return t;\n  }\n\n  function st(t, e) {\n    return ot(t, e, {\n      merger: at\n    });\n  }\n\n  function at(t, e, i) {\n    if (!it(t)) return;\n    var n = e[t],\n        o = i[t];\n    U(n) && U(o) ? st(n, o) : Object.prototype.hasOwnProperty.call(e, t) || (e[t] = et(o));\n  }\n\n  function rt(t, e) {\n    var i = t.indexOf(\".\", e);\n    return -1 === i ? t.length : i;\n  }\n\n  function lt(t, e) {\n    if (\"\" === e) return t;\n    var i = 0,\n        n = rt(e, i);\n\n    for (; t && n > i;) {\n      t = t[e.substr(i, n - i)], i = n + 1, n = rt(e, i);\n    }\n\n    return t;\n  }\n\n  function ct(t) {\n    return t.charAt(0).toUpperCase() + t.slice(1);\n  }\n\n  var ht = function ht(t) {\n    return void 0 !== t;\n  },\n      dt = function dt(t) {\n    return \"function\" == typeof t;\n  },\n      ut = function ut(t, e) {\n    if (t.size !== e.size) return !1;\n\n    var _iterator = _createForOfIteratorHelper(t),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _i3 = _step.value;\n        if (!e.has(_i3)) return !1;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return !0;\n  },\n      ft = Object.create(null),\n      gt = Object.create(null);\n\n  function pt(t, e) {\n    if (!e) return t;\n    var i = e.split(\".\");\n\n    for (var _e3 = 0, _n7 = i.length; _e3 < _n7; ++_e3) {\n      var _n8 = i[_e3];\n      t = t[_n8] || (t[_n8] = Object.create(null));\n    }\n\n    return t;\n  }\n\n  function mt(t, e, i) {\n    return \"string\" == typeof e ? ot(pt(t, e), i) : ot(pt(t, \"\"), e);\n  }\n\n  var xt = new ( /*#__PURE__*/function () {\n    function _class2(t) {\n      _classCallCheck(this, _class2);\n\n      this.animation = void 0, this.backgroundColor = \"rgba(0,0,0,0.1)\", this.borderColor = \"rgba(0,0,0,0.1)\", this.color = \"#666\", this.datasets = {}, this.devicePixelRatio = function (t) {\n        return t.chart.platform.getDevicePixelRatio();\n      }, this.elements = {}, this.events = [\"mousemove\", \"mouseout\", \"click\", \"touchstart\", \"touchmove\"], this.font = {\n        family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n        size: 12,\n        style: \"normal\",\n        lineHeight: 1.2,\n        weight: null\n      }, this.hover = {}, this.hoverBackgroundColor = function (t, e) {\n        return N(e.backgroundColor);\n      }, this.hoverBorderColor = function (t, e) {\n        return N(e.borderColor);\n      }, this.hoverColor = function (t, e) {\n        return N(e.color);\n      }, this.indexAxis = \"x\", this.interaction = {\n        mode: \"nearest\",\n        intersect: !0\n      }, this.maintainAspectRatio = !0, this.onHover = null, this.onClick = null, this.parsing = !0, this.plugins = {}, this.responsive = !0, this.scale = void 0, this.scales = {}, this.showLine = !0, this.describe(t);\n    }\n\n    _createClass(_class2, [{\n      key: \"set\",\n      value: function set(t, e) {\n        return mt(this, t, e);\n      }\n    }, {\n      key: \"get\",\n      value: function get(t) {\n        return pt(this, t);\n      }\n    }, {\n      key: \"describe\",\n      value: function describe(t, e) {\n        return mt(gt, t, e);\n      }\n    }, {\n      key: \"override\",\n      value: function override(t, e) {\n        return mt(ft, t, e);\n      }\n    }, {\n      key: \"route\",\n      value: function route(t, e, i, n) {\n        var _Object$definePropert;\n\n        var o = pt(this, t),\n            s = pt(this, i),\n            a = \"_\" + e;\n        Object.defineProperties(o, (_Object$definePropert = {}, _defineProperty(_Object$definePropert, a, {\n          value: o[e],\n          writable: !0\n        }), _defineProperty(_Object$definePropert, e, {\n          enumerable: !0,\n          get: function get() {\n            var t = this[a],\n                e = s[n];\n            return U(t) ? Object.assign({}, e, t) : K(t, e);\n          },\n          set: function set(t) {\n            this[a] = t;\n          }\n        }), _Object$definePropert));\n      }\n    }]);\n\n    return _class2;\n  }())({\n    _scriptable: function _scriptable(t) {\n      return !t.startsWith(\"on\");\n    },\n    _indexable: function _indexable(t) {\n      return \"events\" !== t;\n    },\n    hover: {\n      _fallback: \"interaction\"\n    },\n    interaction: {\n      _scriptable: !1,\n      _indexable: !1\n    }\n  });\n\n  var bt = Math.PI,\n      _t = 2 * bt,\n      yt = _t + bt,\n      vt = Number.POSITIVE_INFINITY,\n      wt = bt / 180,\n      Mt = bt / 2,\n      kt = bt / 4,\n      St = 2 * bt / 3,\n      Pt = Math.log10,\n      Dt = Math.sign;\n\n  function Ct(t) {\n    var e = Math.round(t);\n    t = At(t, e, t / 1e3) ? e : t;\n    var i = Math.pow(10, Math.floor(Pt(t))),\n        n = t / i;\n    return (n <= 1 ? 1 : n <= 2 ? 2 : n <= 5 ? 5 : 10) * i;\n  }\n\n  function Ot(t) {\n    var e = [],\n        i = Math.sqrt(t);\n    var n;\n\n    for (n = 1; n < i; n++) {\n      t % n == 0 && (e.push(n), e.push(t / n));\n    }\n\n    return i === (0 | i) && e.push(i), e.sort(function (t, e) {\n      return t - e;\n    }).pop(), e;\n  }\n\n  function Tt(t) {\n    return !isNaN(parseFloat(t)) && isFinite(t);\n  }\n\n  function At(t, e, i) {\n    return Math.abs(t - e) < i;\n  }\n\n  function Lt(t, e) {\n    var i = Math.round(t);\n    return i - e <= t && i + e >= t;\n  }\n\n  function Rt(t, e, i) {\n    var n, o, s;\n\n    for (n = 0, o = t.length; n < o; n++) {\n      s = t[n][i], isNaN(s) || (e.min = Math.min(e.min, s), e.max = Math.max(e.max, s));\n    }\n  }\n\n  function Et(t) {\n    return t * (bt / 180);\n  }\n\n  function zt(t) {\n    return t * (180 / bt);\n  }\n\n  function It(t) {\n    if (!X(t)) return;\n    var e = 1,\n        i = 0;\n\n    for (; Math.round(t * e) / e !== t;) {\n      e *= 10, i++;\n    }\n\n    return i;\n  }\n\n  function Ft(t, e) {\n    var i = e.x - t.x,\n        n = e.y - t.y,\n        o = Math.sqrt(i * i + n * n);\n    var s = Math.atan2(n, i);\n    return s < -.5 * bt && (s += _t), {\n      angle: s,\n      distance: o\n    };\n  }\n\n  function Bt(t, e) {\n    return Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2));\n  }\n\n  function Vt(t, e) {\n    return (t - e + yt) % _t - bt;\n  }\n\n  function Wt(t) {\n    return (t % _t + _t) % _t;\n  }\n\n  function Nt(t, e, i, n) {\n    var o = Wt(t),\n        s = Wt(e),\n        a = Wt(i),\n        r = Wt(s - o),\n        l = Wt(a - o),\n        c = Wt(o - s),\n        h = Wt(o - a);\n    return o === s || o === a || n && s === a || r > l && c < h;\n  }\n\n  function Ht(t, e, i) {\n    return Math.max(e, Math.min(i, t));\n  }\n\n  function jt(t) {\n    return Ht(t, -32768, 32767);\n  }\n\n  function $t(t) {\n    return !t || $(t.size) || $(t.family) ? null : (t.style ? t.style + \" \" : \"\") + (t.weight ? t.weight + \" \" : \"\") + t.size + \"px \" + t.family;\n  }\n\n  function Yt(t, e, i, n, o) {\n    var s = e[o];\n    return s || (s = e[o] = t.measureText(o).width, i.push(o)), s > n && (n = s), n;\n  }\n\n  function Ut(t, e, i, n) {\n    var o = (n = n || {}).data = n.data || {},\n        s = n.garbageCollect = n.garbageCollect || [];\n    n.font !== e && (o = n.data = {}, s = n.garbageCollect = [], n.font = e), t.save(), t.font = e;\n    var a = 0;\n    var r = i.length;\n    var l, c, h, d, u;\n\n    for (l = 0; l < r; l++) {\n      if (d = i[l], null != d && !0 !== Y(d)) a = Yt(t, o, s, a, d);else if (Y(d)) for (c = 0, h = d.length; c < h; c++) {\n        u = d[c], null == u || Y(u) || (a = Yt(t, o, s, a, u));\n      }\n    }\n\n    t.restore();\n    var f = s.length / 2;\n\n    if (f > i.length) {\n      for (l = 0; l < f; l++) {\n        delete o[s[l]];\n      }\n\n      s.splice(0, f);\n    }\n\n    return a;\n  }\n\n  function Xt(t, e, i) {\n    var n = t.currentDevicePixelRatio,\n        o = 0 !== i ? Math.max(i / 2, .5) : 0;\n    return Math.round((e - o) * n) / n + o;\n  }\n\n  function qt(t, e) {\n    (e = e || t.getContext(\"2d\")).save(), e.resetTransform(), e.clearRect(0, 0, t.width, t.height), e.restore();\n  }\n\n  function Kt(t, e, i, n) {\n    var o, s, a, r, l;\n    var c = e.pointStyle,\n        h = e.rotation,\n        d = e.radius;\n    var u = (h || 0) * wt;\n    if (c && \"object\" == _typeof(c) && (o = c.toString(), \"[object HTMLImageElement]\" === o || \"[object HTMLCanvasElement]\" === o)) return t.save(), t.translate(i, n), t.rotate(u), t.drawImage(c, -c.width / 2, -c.height / 2, c.width, c.height), void t.restore();\n\n    if (!(isNaN(d) || d <= 0)) {\n      switch (t.beginPath(), c) {\n        default:\n          t.arc(i, n, d, 0, _t), t.closePath();\n          break;\n\n        case \"triangle\":\n          t.moveTo(i + Math.sin(u) * d, n - Math.cos(u) * d), u += St, t.lineTo(i + Math.sin(u) * d, n - Math.cos(u) * d), u += St, t.lineTo(i + Math.sin(u) * d, n - Math.cos(u) * d), t.closePath();\n          break;\n\n        case \"rectRounded\":\n          l = .516 * d, r = d - l, s = Math.cos(u + kt) * r, a = Math.sin(u + kt) * r, t.arc(i - s, n - a, l, u - bt, u - Mt), t.arc(i + a, n - s, l, u - Mt, u), t.arc(i + s, n + a, l, u, u + Mt), t.arc(i - a, n + s, l, u + Mt, u + bt), t.closePath();\n          break;\n\n        case \"rect\":\n          if (!h) {\n            r = Math.SQRT1_2 * d, t.rect(i - r, n - r, 2 * r, 2 * r);\n            break;\n          }\n\n          u += kt;\n\n        case \"rectRot\":\n          s = Math.cos(u) * d, a = Math.sin(u) * d, t.moveTo(i - s, n - a), t.lineTo(i + a, n - s), t.lineTo(i + s, n + a), t.lineTo(i - a, n + s), t.closePath();\n          break;\n\n        case \"crossRot\":\n          u += kt;\n\n        case \"cross\":\n          s = Math.cos(u) * d, a = Math.sin(u) * d, t.moveTo(i - s, n - a), t.lineTo(i + s, n + a), t.moveTo(i + a, n - s), t.lineTo(i - a, n + s);\n          break;\n\n        case \"star\":\n          s = Math.cos(u) * d, a = Math.sin(u) * d, t.moveTo(i - s, n - a), t.lineTo(i + s, n + a), t.moveTo(i + a, n - s), t.lineTo(i - a, n + s), u += kt, s = Math.cos(u) * d, a = Math.sin(u) * d, t.moveTo(i - s, n - a), t.lineTo(i + s, n + a), t.moveTo(i + a, n - s), t.lineTo(i - a, n + s);\n          break;\n\n        case \"line\":\n          s = Math.cos(u) * d, a = Math.sin(u) * d, t.moveTo(i - s, n - a), t.lineTo(i + s, n + a);\n          break;\n\n        case \"dash\":\n          t.moveTo(i, n), t.lineTo(i + Math.cos(u) * d, n + Math.sin(u) * d);\n      }\n\n      t.fill(), e.borderWidth > 0 && t.stroke();\n    }\n  }\n\n  function Gt(t, e, i) {\n    return i = i || .5, t && t.x > e.left - i && t.x < e.right + i && t.y > e.top - i && t.y < e.bottom + i;\n  }\n\n  function Zt(t, e) {\n    t.save(), t.beginPath(), t.rect(e.left, e.top, e.right - e.left, e.bottom - e.top), t.clip();\n  }\n\n  function Qt(t) {\n    t.restore();\n  }\n\n  function Jt(t, e, i, n, o) {\n    if (!e) return t.lineTo(i.x, i.y);\n\n    if (\"middle\" === o) {\n      var _n9 = (e.x + i.x) / 2;\n\n      t.lineTo(_n9, e.y), t.lineTo(_n9, i.y);\n    } else \"after\" === o != !!n ? t.lineTo(e.x, i.y) : t.lineTo(i.x, e.y);\n\n    t.lineTo(i.x, i.y);\n  }\n\n  function te(t, e, i, n) {\n    if (!e) return t.lineTo(i.x, i.y);\n    t.bezierCurveTo(n ? e.cp1x : e.cp2x, n ? e.cp1y : e.cp2y, n ? i.cp2x : i.cp1x, n ? i.cp2y : i.cp1y, i.x, i.y);\n  }\n\n  function ee(t, e, i, n, o) {\n    var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    var a = Y(e) ? e : [e],\n        r = s.strokeWidth > 0 && \"\" !== s.strokeColor;\n    var l, c;\n\n    for (t.save(), t.font = o.string, function (t, e) {\n      e.translation && t.translate(e.translation[0], e.translation[1]);\n      $(e.rotation) || t.rotate(e.rotation);\n      e.color && (t.fillStyle = e.color);\n      e.textAlign && (t.textAlign = e.textAlign);\n      e.textBaseline && (t.textBaseline = e.textBaseline);\n    }(t, s), l = 0; l < a.length; ++l) {\n      c = a[l], r && (s.strokeColor && (t.strokeStyle = s.strokeColor), $(s.strokeWidth) || (t.lineWidth = s.strokeWidth), t.strokeText(c, i, n, s.maxWidth)), t.fillText(c, i, n, s.maxWidth), ie(t, i, n, c, s), n += o.lineHeight;\n    }\n\n    t.restore();\n  }\n\n  function ie(t, e, i, n, o) {\n    if (o.strikethrough || o.underline) {\n      var _s3 = t.measureText(n),\n          _a4 = e - _s3.actualBoundingBoxLeft,\n          _r2 = e + _s3.actualBoundingBoxRight,\n          _l2 = i - _s3.actualBoundingBoxAscent,\n          _c2 = i + _s3.actualBoundingBoxDescent,\n          _h = o.strikethrough ? (_l2 + _c2) / 2 : _c2;\n\n      t.strokeStyle = t.fillStyle, t.beginPath(), t.lineWidth = o.decorationWidth || 2, t.moveTo(_a4, _h), t.lineTo(_r2, _h), t.stroke();\n    }\n  }\n\n  function ne(t, e) {\n    var i = e.x,\n        n = e.y,\n        o = e.w,\n        s = e.h,\n        a = e.radius;\n    t.arc(i + a.topLeft, n + a.topLeft, a.topLeft, -Mt, bt, !0), t.lineTo(i, n + s - a.bottomLeft), t.arc(i + a.bottomLeft, n + s - a.bottomLeft, a.bottomLeft, bt, Mt, !0), t.lineTo(i + o - a.bottomRight, n + s), t.arc(i + o - a.bottomRight, n + s - a.bottomRight, a.bottomRight, Mt, 0, !0), t.lineTo(i + o, n + a.topRight), t.arc(i + o - a.topRight, n + a.topRight, a.topRight, 0, -Mt, !0), t.lineTo(i + a.topLeft, n);\n  }\n\n  function oe(t, e, i) {\n    i = i || function (i) {\n      return t[i] < e;\n    };\n\n    var n,\n        o = t.length - 1,\n        s = 0;\n\n    for (; o - s > 1;) {\n      n = s + o >> 1, i(n) ? s = n : o = n;\n    }\n\n    return {\n      lo: s,\n      hi: o\n    };\n  }\n\n  var se = function se(t, e, i) {\n    return oe(t, i, function (n) {\n      return t[n][e] < i;\n    });\n  },\n      ae = function ae(t, e, i) {\n    return oe(t, i, function (n) {\n      return t[n][e] >= i;\n    });\n  };\n\n  function re(t, e, i) {\n    var n = 0,\n        o = t.length;\n\n    for (; n < o && t[n] < e;) {\n      n++;\n    }\n\n    for (; o > n && t[o - 1] > i;) {\n      o--;\n    }\n\n    return n > 0 || o < t.length ? t.slice(n, o) : t;\n  }\n\n  var le = [\"push\", \"pop\", \"shift\", \"splice\", \"unshift\"];\n\n  function ce(t, e) {\n    t._chartjs ? t._chartjs.listeners.push(e) : (Object.defineProperty(t, \"_chartjs\", {\n      configurable: !0,\n      enumerable: !1,\n      value: {\n        listeners: [e]\n      }\n    }), le.forEach(function (e) {\n      var i = \"_onData\" + ct(e),\n          n = t[e];\n      Object.defineProperty(t, e, {\n        configurable: !0,\n        enumerable: !1,\n        value: function value() {\n          for (var _len2 = arguments.length, e = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            e[_key2] = arguments[_key2];\n          }\n\n          var o = n.apply(this, e);\n          return t._chartjs.listeners.forEach(function (t) {\n            \"function\" == typeof t[i] && t[i].apply(t, e);\n          }), o;\n        }\n      });\n    }));\n  }\n\n  function he(t, e) {\n    var i = t._chartjs;\n    if (!i) return;\n    var n = i.listeners,\n        o = n.indexOf(e);\n    -1 !== o && n.splice(o, 1), n.length > 0 || (le.forEach(function (e) {\n      delete t[e];\n    }), delete t._chartjs);\n  }\n\n  function de(t) {\n    var e = new Set();\n    var i, n;\n\n    for (i = 0, n = t.length; i < n; ++i) {\n      e.add(t[i]);\n    }\n\n    return e.size === n ? t : Array.from(e);\n  }\n\n  function ue(t) {\n    var e = t.parentNode;\n    return e && \"[object ShadowRoot]\" === e.toString() && (e = e.host), e;\n  }\n\n  function fe(t, e, i) {\n    var n;\n    return \"string\" == typeof t ? (n = parseInt(t, 10), -1 !== t.indexOf(\"%\") && (n = n / 100 * e.parentNode[i])) : n = t, n;\n  }\n\n  var ge = function ge(t) {\n    return window.getComputedStyle(t, null);\n  };\n\n  function pe(t, e) {\n    return ge(t).getPropertyValue(e);\n  }\n\n  var me = [\"top\", \"right\", \"bottom\", \"left\"];\n\n  function xe(t, e, i) {\n    var n = {};\n    i = i ? \"-\" + i : \"\";\n\n    for (var _o5 = 0; _o5 < 4; _o5++) {\n      var _s4 = me[_o5];\n      n[_s4] = parseFloat(t[e + \"-\" + _s4 + i]) || 0;\n    }\n\n    return n.width = n.left + n.right, n.height = n.top + n.bottom, n;\n  }\n\n  function be(t, e) {\n    var i = e.canvas,\n        n = e.currentDevicePixelRatio,\n        o = ge(i),\n        s = \"border-box\" === o.boxSizing,\n        a = xe(o, \"padding\"),\n        r = xe(o, \"border\", \"width\"),\n        _ref = function (t, e) {\n      var i = t[\"native\"] || t,\n          n = i.touches,\n          o = n && n.length ? n[0] : i,\n          s = o.offsetX,\n          a = o.offsetY;\n      var r,\n          l,\n          c = !1;\n      if (function (t, e, i) {\n        return (t > 0 || e > 0) && (!i || !i.shadowRoot);\n      }(s, a, i.target)) r = s, l = a;else {\n        var _t3 = e.getBoundingClientRect();\n\n        r = o.clientX - _t3.left, l = o.clientY - _t3.top, c = !0;\n      }\n      return {\n        x: r,\n        y: l,\n        box: c\n      };\n    }(t, i),\n        l = _ref.x,\n        c = _ref.y,\n        h = _ref.box,\n        d = a.left + (h && r.left),\n        u = a.top + (h && r.top);\n\n    var f = e.width,\n        g = e.height;\n    return s && (f -= a.width + r.width, g -= a.height + r.height), {\n      x: Math.round((l - d) / f * i.width / n),\n      y: Math.round((c - u) / g * i.height / n)\n    };\n  }\n\n  var _e = function _e(t) {\n    return Math.round(10 * t) / 10;\n  };\n\n  function ye(t, e, i, n) {\n    var o = ge(t),\n        s = xe(o, \"margin\"),\n        a = fe(o.maxWidth, t, \"clientWidth\") || vt,\n        r = fe(o.maxHeight, t, \"clientHeight\") || vt,\n        l = function (t, e, i) {\n      var n, o;\n\n      if (void 0 === e || void 0 === i) {\n        var _s5 = ue(t);\n\n        if (_s5) {\n          var _t4 = _s5.getBoundingClientRect(),\n              _a5 = ge(_s5),\n              _r3 = xe(_a5, \"border\", \"width\"),\n              _l3 = xe(_a5, \"padding\");\n\n          e = _t4.width - _l3.width - _r3.width, i = _t4.height - _l3.height - _r3.height, n = fe(_a5.maxWidth, _s5, \"clientWidth\"), o = fe(_a5.maxHeight, _s5, \"clientHeight\");\n        } else e = t.clientWidth, i = t.clientHeight;\n      }\n\n      return {\n        width: e,\n        height: i,\n        maxWidth: n || vt,\n        maxHeight: o || vt\n      };\n    }(t, e, i);\n\n    var c = l.width,\n        h = l.height;\n\n    if (\"content-box\" === o.boxSizing) {\n      var _t5 = xe(o, \"border\", \"width\"),\n          _e4 = xe(o, \"padding\");\n\n      c -= _e4.width + _t5.width, h -= _e4.height + _t5.height;\n    }\n\n    return c = Math.max(0, c - s.width), h = Math.max(0, n ? Math.floor(c / n) : h - s.height), c = _e(Math.min(c, a, l.maxWidth)), h = _e(Math.min(h, r, l.maxHeight)), c && !h && (h = _e(c / 2)), {\n      width: c,\n      height: h\n    };\n  }\n\n  function ve(t, e, i) {\n    var n = e || 1,\n        o = Math.floor(t.height * n),\n        s = Math.floor(t.width * n);\n    t.height = o / n, t.width = s / n;\n    var a = t.canvas;\n    return a.style && (i || !a.style.height && !a.style.width) && (a.style.height = \"\".concat(t.height, \"px\"), a.style.width = \"\".concat(t.width, \"px\")), (t.currentDevicePixelRatio !== n || a.height !== o || a.width !== s) && (t.currentDevicePixelRatio = n, a.height = o, a.width = s, t.ctx.setTransform(n, 0, 0, n, 0, 0), !0);\n  }\n\n  var we = function () {\n    var t = !1;\n\n    try {\n      var _e5 = {\n        get passive() {\n          return t = !0, !1;\n        }\n\n      };\n      window.addEventListener(\"test\", null, _e5), window.removeEventListener(\"test\", null, _e5);\n    } catch (t) {}\n\n    return t;\n  }();\n\n  function Me(t, e) {\n    var i = pe(t, e),\n        n = i && i.match(/^(\\d+)(\\.\\d+)?px$/);\n    return n ? +n[1] : void 0;\n  }\n\n  function ke(t, e) {\n    return \"native\" in t ? {\n      x: t.x,\n      y: t.y\n    } : be(t, e);\n  }\n\n  function Se(t, e, i, n) {\n    var o = t.controller,\n        s = t.data,\n        a = t._sorted,\n        r = o._cachedMeta.iScale;\n\n    if (r && e === r.axis && a && s.length) {\n      var _t6 = r._reversePixels ? ae : se;\n\n      if (!n) return _t6(s, e, i);\n\n      if (o._sharedOptions) {\n        var _n10 = s[0],\n            _o6 = \"function\" == typeof _n10.getRange && _n10.getRange(e);\n\n        if (_o6) {\n          var _n11 = _t6(s, e, i - _o6),\n              _a6 = _t6(s, e, i + _o6);\n\n          return {\n            lo: _n11.lo,\n            hi: _a6.hi\n          };\n        }\n      }\n    }\n\n    return {\n      lo: 0,\n      hi: s.length - 1\n    };\n  }\n\n  function Pe(t, e, i, n, o) {\n    var s = t.getSortedVisibleDatasetMetas(),\n        a = i[e];\n\n    for (var _t7 = 0, _i4 = s.length; _t7 < _i4; ++_t7) {\n      var _s$_t = s[_t7],\n          _i5 = _s$_t.index,\n          _r4 = _s$_t.data,\n          _Se = Se(s[_t7], e, a, o),\n          _l4 = _Se.lo,\n          _c3 = _Se.hi;\n\n      for (var _t8 = _l4; _t8 <= _c3; ++_t8) {\n        var _e6 = _r4[_t8];\n        _e6.skip || n(_e6, _i5, _t8);\n      }\n    }\n  }\n\n  function De(t, e, i, n) {\n    var o = [];\n    if (!Gt(e, t.chartArea, t._minPadding)) return o;\n    return Pe(t, i, e, function (t, i, s) {\n      t.inRange(e.x, e.y, n) && o.push({\n        element: t,\n        datasetIndex: i,\n        index: s\n      });\n    }, !0), o;\n  }\n\n  function Ce(t, e, i, n, o) {\n    var s = function (t) {\n      var e = -1 !== t.indexOf(\"x\"),\n          i = -1 !== t.indexOf(\"y\");\n      return function (t, n) {\n        var o = e ? Math.abs(t.x - n.x) : 0,\n            s = i ? Math.abs(t.y - n.y) : 0;\n        return Math.sqrt(Math.pow(o, 2) + Math.pow(s, 2));\n      };\n    }(i);\n\n    var a = Number.POSITIVE_INFINITY,\n        r = [];\n    if (!Gt(e, t.chartArea, t._minPadding)) return r;\n    return Pe(t, i, e, function (i, l, c) {\n      if (n && !i.inRange(e.x, e.y, o)) return;\n      var h = i.getCenterPoint(o);\n      if (!Gt(h, t.chartArea, t._minPadding)) return;\n      var d = s(e, h);\n      d < a ? (r = [{\n        element: i,\n        datasetIndex: l,\n        index: c\n      }], a = d) : d === a && r.push({\n        element: i,\n        datasetIndex: l,\n        index: c\n      });\n    }), r;\n  }\n\n  function Oe(t, e, i, n) {\n    var o = ke(e, t),\n        s = [],\n        a = i.axis,\n        r = \"x\" === a ? \"inXRange\" : \"inYRange\";\n    var l = !1;\n    return function (t, e) {\n      var i = t.getSortedVisibleDatasetMetas();\n      var n, o, s;\n\n      for (var _t9 = 0, _a7 = i.length; _t9 < _a7; ++_t9) {\n        var _i$_t = i[_t9];\n        n = _i$_t.index;\n        o = _i$_t.data;\n\n        for (var _t10 = 0, _i6 = o.length; _t10 < _i6; ++_t10) {\n          s = o[_t10], s.skip || e(s, n, _t10);\n        }\n      }\n    }(t, function (t, e, i) {\n      t[r](o[a], n) && s.push({\n        element: t,\n        datasetIndex: e,\n        index: i\n      }), t.inRange(o.x, o.y, n) && (l = !0);\n    }), i.intersect && !l ? [] : s;\n  }\n\n  var Te = {\n    modes: {\n      index: function index(t, e, i, n) {\n        var o = ke(e, t),\n            s = i.axis || \"x\",\n            a = i.intersect ? De(t, o, s, n) : Ce(t, o, s, !1, n),\n            r = [];\n        return a.length ? (t.getSortedVisibleDatasetMetas().forEach(function (t) {\n          var e = a[0].index,\n              i = t.data[e];\n          i && !i.skip && r.push({\n            element: i,\n            datasetIndex: t.index,\n            index: e\n          });\n        }), r) : [];\n      },\n      dataset: function dataset(t, e, i, n) {\n        var o = ke(e, t),\n            s = i.axis || \"xy\";\n        var a = i.intersect ? De(t, o, s, n) : Ce(t, o, s, !1, n);\n\n        if (a.length > 0) {\n          var _e7 = a[0].datasetIndex,\n              _i7 = t.getDatasetMeta(_e7).data;\n          a = [];\n\n          for (var _t11 = 0; _t11 < _i7.length; ++_t11) {\n            a.push({\n              element: _i7[_t11],\n              datasetIndex: _e7,\n              index: _t11\n            });\n          }\n        }\n\n        return a;\n      },\n      point: function point(t, e, i, n) {\n        return De(t, ke(e, t), i.axis || \"xy\", n);\n      },\n      nearest: function nearest(t, e, i, n) {\n        return Ce(t, ke(e, t), i.axis || \"xy\", i.intersect, n);\n      },\n      x: function x(t, e, i, n) {\n        return i.axis = \"x\", Oe(t, e, i, n);\n      },\n      y: function y(t, e, i, n) {\n        return i.axis = \"y\", Oe(t, e, i, n);\n      }\n    }\n  };\n  var Ae = new RegExp(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/),\n      Le = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);\n\n  function Re(t, e) {\n    var i = (\"\" + t).match(Ae);\n    if (!i || \"normal\" === i[1]) return 1.2 * e;\n\n    switch (t = +i[2], i[3]) {\n      case \"px\":\n        return t;\n\n      case \"%\":\n        t /= 100;\n    }\n\n    return e * t;\n  }\n\n  function Ee(t, e) {\n    var i = {},\n        n = U(e),\n        o = n ? Object.keys(e) : e,\n        s = U(t) ? n ? function (i) {\n      return K(t[i], t[e[i]]);\n    } : function (e) {\n      return t[e];\n    } : function () {\n      return t;\n    };\n\n    var _iterator2 = _createForOfIteratorHelper(o),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _t12 = _step2.value;\n        i[_t12] = +s(_t12) || 0;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return i;\n  }\n\n  function ze(t) {\n    return Ee(t, {\n      top: \"y\",\n      right: \"x\",\n      bottom: \"y\",\n      left: \"x\"\n    });\n  }\n\n  function Ie(t) {\n    return Ee(t, [\"topLeft\", \"topRight\", \"bottomLeft\", \"bottomRight\"]);\n  }\n\n  function Fe(t) {\n    var e = ze(t);\n    return e.width = e.left + e.right, e.height = e.top + e.bottom, e;\n  }\n\n  function Be(t, e) {\n    t = t || {}, e = e || xt.font;\n    var i = K(t.size, e.size);\n    \"string\" == typeof i && (i = parseInt(i, 10));\n    var n = K(t.style, e.style);\n    n && !(\"\" + n).match(Le) && (console.warn('Invalid font style specified: \"' + n + '\"'), n = \"\");\n    var o = {\n      family: K(t.family, e.family),\n      lineHeight: Re(K(t.lineHeight, e.lineHeight), i),\n      size: i,\n      style: n,\n      weight: K(t.weight, e.weight),\n      string: \"\"\n    };\n    return o.string = $t(o), o;\n  }\n\n  function Ve(t, e, i, n) {\n    var o,\n        s,\n        a,\n        r = !0;\n\n    for (o = 0, s = t.length; o < s; ++o) {\n      if (a = t[o], void 0 !== a && (void 0 !== e && \"function\" == typeof a && (a = a(e), r = !1), void 0 !== i && Y(a) && (a = a[i % a.length], r = !1), void 0 !== a)) return n && !r && (n.cacheable = !1), a;\n    }\n  }\n\n  function We(t, e) {\n    var i = t.min,\n        n = t.max;\n    return {\n      min: i - Math.abs(Z(e, i)),\n      max: n + Z(e, n)\n    };\n  }\n\n  var Ne = [\"left\", \"top\", \"right\", \"bottom\"];\n\n  function He(t, e) {\n    return t.filter(function (t) {\n      return t.pos === e;\n    });\n  }\n\n  function je(t, e) {\n    return t.filter(function (t) {\n      return -1 === Ne.indexOf(t.pos) && t.box.axis === e;\n    });\n  }\n\n  function $e(t, e) {\n    return t.sort(function (t, i) {\n      var n = e ? i : t,\n          o = e ? t : i;\n      return n.weight === o.weight ? n.index - o.index : n.weight - o.weight;\n    });\n  }\n\n  function Ye(t, e, i, n) {\n    return Math.max(t[i], e[i]) + Math.max(t[n], e[n]);\n  }\n\n  function Ue(t, e) {\n    t.top = Math.max(t.top, e.top), t.left = Math.max(t.left, e.left), t.bottom = Math.max(t.bottom, e.bottom), t.right = Math.max(t.right, e.right);\n  }\n\n  function Xe(t, e, i) {\n    var n = i.box,\n        o = t.maxPadding;\n    U(i.pos) || (i.size && (t[i.pos] -= i.size), i.size = i.horizontal ? n.height : n.width, t[i.pos] += i.size), n.getPadding && Ue(o, n.getPadding());\n    var s = Math.max(0, e.outerWidth - Ye(o, t, \"left\", \"right\")),\n        a = Math.max(0, e.outerHeight - Ye(o, t, \"top\", \"bottom\")),\n        r = s !== t.w,\n        l = a !== t.h;\n    return t.w = s, t.h = a, i.horizontal ? {\n      same: r,\n      other: l\n    } : {\n      same: l,\n      other: r\n    };\n  }\n\n  function qe(t, e) {\n    var i = e.maxPadding;\n\n    function n(t) {\n      var n = {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      };\n      return t.forEach(function (t) {\n        n[t] = Math.max(e[t], i[t]);\n      }), n;\n    }\n\n    return n(t ? [\"left\", \"right\"] : [\"top\", \"bottom\"]);\n  }\n\n  function Ke(t, e, i) {\n    var n = [];\n    var o, s, a, r, l, c;\n\n    for (o = 0, s = t.length, l = 0; o < s; ++o) {\n      a = t[o], r = a.box, r.update(a.width || e.w, a.height || e.h, qe(a.horizontal, e));\n\n      var _Xe = Xe(e, i, a),\n          _s6 = _Xe.same,\n          _h2 = _Xe.other;\n\n      l |= _s6 && n.length, c = c || _h2, r.fullSize || n.push(a);\n    }\n\n    return l && Ke(n, e, i) || c;\n  }\n\n  function Ge(t, e, i) {\n    var n = i.padding;\n    var o,\n        s,\n        a,\n        r,\n        l = e.x,\n        c = e.y;\n\n    for (o = 0, s = t.length; o < s; ++o) {\n      a = t[o], r = a.box, a.horizontal ? (r.left = r.fullSize ? n.left : e.left, r.right = r.fullSize ? i.outerWidth - n.right : e.left + e.w, r.top = c, r.bottom = c + r.height, r.width = r.right - r.left, c = r.bottom) : (r.left = l, r.right = l + r.width, r.top = r.fullSize ? n.top : e.top, r.bottom = r.fullSize ? i.outerHeight - n.bottom : e.top + e.h, r.height = r.bottom - r.top, l = r.right);\n    }\n\n    e.x = l, e.y = c;\n  }\n\n  xt.set(\"layout\", {\n    padding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  });\n  var Ze = {\n    addBox: function addBox(t, e) {\n      t.boxes || (t.boxes = []), e.fullSize = e.fullSize || !1, e.position = e.position || \"top\", e.weight = e.weight || 0, e._layers = e._layers || function () {\n        return [{\n          z: 0,\n          draw: function draw(t) {\n            e.draw(t);\n          }\n        }];\n      }, t.boxes.push(e);\n    },\n    removeBox: function removeBox(t, e) {\n      var i = t.boxes ? t.boxes.indexOf(e) : -1;\n      -1 !== i && t.boxes.splice(i, 1);\n    },\n    configure: function configure(t, e, i) {\n      e.fullSize = i.fullSize, e.position = i.position, e.weight = i.weight;\n    },\n    update: function update(t, e, i, n) {\n      if (!t) return;\n\n      var o = Fe(t.options.layout.padding),\n          s = Math.max(e - o.width, 0),\n          a = Math.max(i - o.height, 0),\n          r = function (t) {\n        var e = function (t) {\n          var e = [];\n          var i, n, o;\n\n          for (i = 0, n = (t || []).length; i < n; ++i) {\n            o = t[i], e.push({\n              index: i,\n              box: o,\n              pos: o.position,\n              horizontal: o.isHorizontal(),\n              weight: o.weight\n            });\n          }\n\n          return e;\n        }(t),\n            i = $e(e.filter(function (t) {\n          return t.box.fullSize;\n        }), !0),\n            n = $e(He(e, \"left\"), !0),\n            o = $e(He(e, \"right\")),\n            s = $e(He(e, \"top\"), !0),\n            a = $e(He(e, \"bottom\")),\n            r = je(e, \"x\"),\n            l = je(e, \"y\");\n\n        return {\n          fullSize: i,\n          leftAndTop: n.concat(s),\n          rightAndBottom: o.concat(l).concat(a).concat(r),\n          chartArea: He(e, \"chartArea\"),\n          vertical: n.concat(o).concat(l),\n          horizontal: s.concat(a).concat(r)\n        };\n      }(t.boxes),\n          l = r.vertical,\n          c = r.horizontal;\n\n      J(t.boxes, function (t) {\n        \"function\" == typeof t.beforeLayout && t.beforeLayout();\n      });\n      var h = l.reduce(function (t, e) {\n        return e.box.options && !1 === e.box.options.display ? t : t + 1;\n      }, 0) || 1,\n          d = Object.freeze({\n        outerWidth: e,\n        outerHeight: i,\n        padding: o,\n        availableWidth: s,\n        availableHeight: a,\n        vBoxMaxWidth: s / 2 / h,\n        hBoxMaxHeight: a / 2\n      }),\n          u = Object.assign({}, o);\n      Ue(u, Fe(n));\n      var f = Object.assign({\n        maxPadding: u,\n        w: s,\n        h: a,\n        x: o.left,\n        y: o.top\n      }, o);\n      !function (t, e) {\n        var i, n, o;\n\n        for (i = 0, n = t.length; i < n; ++i) {\n          o = t[i], o.horizontal ? (o.width = o.box.fullSize && e.availableWidth, o.height = e.hBoxMaxHeight) : (o.width = e.vBoxMaxWidth, o.height = o.box.fullSize && e.availableHeight);\n        }\n      }(l.concat(c), d), Ke(r.fullSize, f, d), Ke(l, f, d), Ke(c, f, d) && Ke(l, f, d), function (t) {\n        var e = t.maxPadding;\n\n        function i(i) {\n          var n = Math.max(e[i] - t[i], 0);\n          return t[i] += n, n;\n        }\n\n        t.y += i(\"top\"), t.x += i(\"left\"), i(\"right\"), i(\"bottom\");\n      }(f), Ge(r.leftAndTop, f, d), f.x += f.w, f.y += f.h, Ge(r.rightAndBottom, f, d), t.chartArea = {\n        left: f.left,\n        top: f.top,\n        right: f.left + f.w,\n        bottom: f.top + f.h,\n        height: f.h,\n        width: f.w\n      }, J(r.chartArea, function (e) {\n        var i = e.box;\n        Object.assign(i, t.chartArea), i.update(f.w, f.h);\n      });\n    }\n  };\n\n  var Qe = /*#__PURE__*/function () {\n    function Qe() {\n      _classCallCheck(this, Qe);\n    }\n\n    _createClass(Qe, [{\n      key: \"acquireContext\",\n      value: function acquireContext(t, e) {}\n    }, {\n      key: \"releaseContext\",\n      value: function releaseContext(t) {\n        return !1;\n      }\n    }, {\n      key: \"addEventListener\",\n      value: function addEventListener(t, e, i) {}\n    }, {\n      key: \"removeEventListener\",\n      value: function removeEventListener(t, e, i) {}\n    }, {\n      key: \"getDevicePixelRatio\",\n      value: function getDevicePixelRatio() {\n        return 1;\n      }\n    }, {\n      key: \"getMaximumSize\",\n      value: function getMaximumSize(t, e, i, n) {\n        return e = Math.max(0, e || t.width), i = i || t.height, {\n          width: e,\n          height: Math.max(0, n ? Math.floor(e / n) : i)\n        };\n      }\n    }, {\n      key: \"isAttached\",\n      value: function isAttached(t) {\n        return !0;\n      }\n    }]);\n\n    return Qe;\n  }();\n\n  var Je = /*#__PURE__*/function (_Qe) {\n    _inherits(Je, _Qe);\n\n    var _super = _createSuper(Je);\n\n    function Je() {\n      _classCallCheck(this, Je);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(Je, [{\n      key: \"acquireContext\",\n      value: function acquireContext(t) {\n        return t && t.getContext && t.getContext(\"2d\") || null;\n      }\n    }]);\n\n    return Je;\n  }(Qe);\n\n  var ti = {\n    touchstart: \"mousedown\",\n    touchmove: \"mousemove\",\n    touchend: \"mouseup\",\n    pointerenter: \"mouseenter\",\n    pointerdown: \"mousedown\",\n    pointermove: \"mousemove\",\n    pointerup: \"mouseup\",\n    pointerleave: \"mouseout\",\n    pointerout: \"mouseout\"\n  },\n      ei = function ei(t) {\n    return null === t || \"\" === t;\n  };\n\n  var ii = !!we && {\n    passive: !0\n  };\n\n  function ni(t, e, i) {\n    t.canvas.removeEventListener(e, i, ii);\n  }\n\n  function oi(t, e, i) {\n    var n = t.canvas,\n        o = n && ue(n) || n,\n        s = new MutationObserver(function (t) {\n      var e = ue(o);\n      t.forEach(function (t) {\n        for (var _n12 = 0; _n12 < t.addedNodes.length; _n12++) {\n          var _s7 = t.addedNodes[_n12];\n          _s7 !== o && _s7 !== e || i(t.target);\n        }\n      });\n    });\n    return s.observe(document, {\n      childList: !0,\n      subtree: !0\n    }), s;\n  }\n\n  function si(t, e, i) {\n    var n = t.canvas,\n        o = n && ue(n);\n    if (!o) return;\n    var s = new MutationObserver(function (t) {\n      t.forEach(function (t) {\n        for (var _e8 = 0; _e8 < t.removedNodes.length; _e8++) {\n          if (t.removedNodes[_e8] === n) {\n            i();\n            break;\n          }\n        }\n      });\n    });\n    return s.observe(o, {\n      childList: !0\n    }), s;\n  }\n\n  var ai = new Map();\n  var ri = 0;\n\n  function li() {\n    var t = window.devicePixelRatio;\n    t !== ri && (ri = t, ai.forEach(function (e, i) {\n      i.currentDevicePixelRatio !== t && e();\n    }));\n  }\n\n  function ci(t, i, n) {\n    var o = t.canvas,\n        s = o && ue(o);\n    if (!s) return;\n    var a = e(function (t, e) {\n      var i = s.clientWidth;\n      n(t, e), i < s.clientWidth && n();\n    }, window),\n        r = new ResizeObserver(function (t) {\n      var e = t[0],\n          i = e.contentRect.width,\n          n = e.contentRect.height;\n      0 === i && 0 === n || a(i, n);\n    });\n    return r.observe(s), function (t, e) {\n      ai.size || window.addEventListener(\"resize\", li), ai.set(t, e);\n    }(t, a), r;\n  }\n\n  function hi(t, e, i) {\n    i && i.disconnect(), \"resize\" === e && function (t) {\n      ai[\"delete\"](t), ai.size || window.removeEventListener(\"resize\", li);\n    }(t);\n  }\n\n  function di(t, i, n) {\n    var o = t.canvas,\n        s = e(function (e) {\n      null !== t.ctx && n(function (t, e) {\n        var i = ti[t.type] || t.type,\n            _be = be(t, e),\n            n = _be.x,\n            o = _be.y;\n\n        return {\n          type: i,\n          chart: e,\n          \"native\": t,\n          x: void 0 !== n ? n : null,\n          y: void 0 !== o ? o : null\n        };\n      }(e, t));\n    }, t, function (t) {\n      var e = t[0];\n      return [e, e.offsetX, e.offsetY];\n    });\n    return function (t, e, i) {\n      t.addEventListener(e, i, ii);\n    }(o, i, s), s;\n  }\n\n  var ui = /*#__PURE__*/function (_Qe2) {\n    _inherits(ui, _Qe2);\n\n    var _super2 = _createSuper(ui);\n\n    function ui() {\n      _classCallCheck(this, ui);\n\n      return _super2.apply(this, arguments);\n    }\n\n    _createClass(ui, [{\n      key: \"acquireContext\",\n      value: function acquireContext(t, e) {\n        var i = t && t.getContext && t.getContext(\"2d\");\n        return i && i.canvas === t ? (function (t, e) {\n          var i = t.style,\n              n = t.getAttribute(\"height\"),\n              o = t.getAttribute(\"width\");\n\n          if (t.$chartjs = {\n            initial: {\n              height: n,\n              width: o,\n              style: {\n                display: i.display,\n                height: i.height,\n                width: i.width\n              }\n            }\n          }, i.display = i.display || \"block\", i.boxSizing = i.boxSizing || \"border-box\", ei(o)) {\n            var _e9 = Me(t, \"width\");\n\n            void 0 !== _e9 && (t.width = _e9);\n          }\n\n          if (ei(n)) if (\"\" === t.style.height) t.height = t.width / (e || 2);else {\n            var _e10 = Me(t, \"height\");\n\n            void 0 !== _e10 && (t.height = _e10);\n          }\n        }(t, e), i) : null;\n      }\n    }, {\n      key: \"releaseContext\",\n      value: function releaseContext(t) {\n        var e = t.canvas;\n        if (!e.$chartjs) return !1;\n        var i = e.$chartjs.initial;\n        [\"height\", \"width\"].forEach(function (t) {\n          var n = i[t];\n          $(n) ? e.removeAttribute(t) : e.setAttribute(t, n);\n        });\n        var n = i.style || {};\n        return Object.keys(n).forEach(function (t) {\n          e.style[t] = n[t];\n        }), e.width = e.width, delete e.$chartjs, !0;\n      }\n    }, {\n      key: \"addEventListener\",\n      value: function addEventListener(t, e, i) {\n        this.removeEventListener(t, e);\n        var n = t.$proxies || (t.$proxies = {}),\n            o = {\n          attach: oi,\n          detach: si,\n          resize: ci\n        }[e] || di;\n        n[e] = o(t, e, i);\n      }\n    }, {\n      key: \"removeEventListener\",\n      value: function removeEventListener(t, e) {\n        var i = t.$proxies || (t.$proxies = {}),\n            n = i[e];\n        if (!n) return;\n        (({\n          attach: hi,\n          detach: hi,\n          resize: hi\n        })[e] || ni)(t, e, n), i[e] = void 0;\n      }\n    }, {\n      key: \"getDevicePixelRatio\",\n      value: function getDevicePixelRatio() {\n        return window.devicePixelRatio;\n      }\n    }, {\n      key: \"getMaximumSize\",\n      value: function getMaximumSize(t, e, i, n) {\n        return ye(t, e, i, n);\n      }\n    }, {\n      key: \"isAttached\",\n      value: function isAttached(t) {\n        var e = ue(t);\n        return !(!e || !ue(e));\n      }\n    }]);\n\n    return ui;\n  }(Qe);\n\n  var fi = Object.freeze({\n    __proto__: null,\n    BasePlatform: Qe,\n    BasicPlatform: Je,\n    DomPlatform: ui\n  });\n\n  var gi = function gi(t) {\n    return 0 === t || 1 === t;\n  },\n      pi = function pi(t, e, i) {\n    return -Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * _t / i);\n  },\n      mi = function mi(t, e, i) {\n    return Math.pow(2, -10 * t) * Math.sin((t - e) * _t / i) + 1;\n  },\n      xi = {\n    linear: function linear(t) {\n      return t;\n    },\n    easeInQuad: function easeInQuad(t) {\n      return t * t;\n    },\n    easeOutQuad: function easeOutQuad(t) {\n      return -t * (t - 2);\n    },\n    easeInOutQuad: function easeInOutQuad(t) {\n      return (t /= .5) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1);\n    },\n    easeInCubic: function easeInCubic(t) {\n      return t * t * t;\n    },\n    easeOutCubic: function easeOutCubic(t) {\n      return (t -= 1) * t * t + 1;\n    },\n    easeInOutCubic: function easeInOutCubic(t) {\n      return (t /= .5) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);\n    },\n    easeInQuart: function easeInQuart(t) {\n      return t * t * t * t;\n    },\n    easeOutQuart: function easeOutQuart(t) {\n      return -((t -= 1) * t * t * t - 1);\n    },\n    easeInOutQuart: function easeInOutQuart(t) {\n      return (t /= .5) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);\n    },\n    easeInQuint: function easeInQuint(t) {\n      return t * t * t * t * t;\n    },\n    easeOutQuint: function easeOutQuint(t) {\n      return (t -= 1) * t * t * t * t + 1;\n    },\n    easeInOutQuint: function easeInOutQuint(t) {\n      return (t /= .5) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);\n    },\n    easeInSine: function easeInSine(t) {\n      return 1 - Math.cos(t * Mt);\n    },\n    easeOutSine: function easeOutSine(t) {\n      return Math.sin(t * Mt);\n    },\n    easeInOutSine: function easeInOutSine(t) {\n      return -.5 * (Math.cos(bt * t) - 1);\n    },\n    easeInExpo: function easeInExpo(t) {\n      return 0 === t ? 0 : Math.pow(2, 10 * (t - 1));\n    },\n    easeOutExpo: function easeOutExpo(t) {\n      return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);\n    },\n    easeInOutExpo: function easeInOutExpo(t) {\n      return gi(t) ? t : t < .5 ? .5 * Math.pow(2, 10 * (2 * t - 1)) : .5 * (2 - Math.pow(2, -10 * (2 * t - 1)));\n    },\n    easeInCirc: function easeInCirc(t) {\n      return t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1);\n    },\n    easeOutCirc: function easeOutCirc(t) {\n      return Math.sqrt(1 - (t -= 1) * t);\n    },\n    easeInOutCirc: function easeInOutCirc(t) {\n      return (t /= .5) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n    },\n    easeInElastic: function easeInElastic(t) {\n      return gi(t) ? t : pi(t, .075, .3);\n    },\n    easeOutElastic: function easeOutElastic(t) {\n      return gi(t) ? t : mi(t, .075, .3);\n    },\n    easeInOutElastic: function easeInOutElastic(t) {\n      var e = .1125;\n      return gi(t) ? t : t < .5 ? .5 * pi(2 * t, e, .45) : .5 + .5 * mi(2 * t - 1, e, .45);\n    },\n    easeInBack: function easeInBack(t) {\n      var e = 1.70158;\n      return t * t * ((e + 1) * t - e);\n    },\n    easeOutBack: function easeOutBack(t) {\n      var e = 1.70158;\n      return (t -= 1) * t * ((e + 1) * t + e) + 1;\n    },\n    easeInOutBack: function easeInOutBack(t) {\n      var e = 1.70158;\n      return (t /= .5) < 1 ? t * t * ((1 + (e *= 1.525)) * t - e) * .5 : .5 * ((t -= 2) * t * ((1 + (e *= 1.525)) * t + e) + 2);\n    },\n    easeInBounce: function easeInBounce(t) {\n      return 1 - xi.easeOutBounce(1 - t);\n    },\n    easeOutBounce: function easeOutBounce(t) {\n      var e = 7.5625,\n          i = 2.75;\n      return t < 1 / i ? e * t * t : t < 2 / i ? e * (t -= 1.5 / i) * t + .75 : t < 2.5 / i ? e * (t -= 2.25 / i) * t + .9375 : e * (t -= 2.625 / i) * t + .984375;\n    },\n    easeInOutBounce: function easeInOutBounce(t) {\n      return t < .5 ? .5 * xi.easeInBounce(2 * t) : .5 * xi.easeOutBounce(2 * t - 1) + .5;\n    }\n  },\n      bi = \"transparent\",\n      _i = {\n    \"boolean\": function boolean(t, e, i) {\n      return i > .5 ? e : t;\n    },\n    color: function color(t, e, i) {\n      var n = W(t || bi),\n          o = n.valid && W(e || bi);\n      return o && o.valid ? o.mix(n, i).hexString() : e;\n    },\n    number: function number(t, e, i) {\n      return t + (e - t) * i;\n    }\n  };\n\n  var yi = /*#__PURE__*/function () {\n    function yi(t, e, i, n) {\n      _classCallCheck(this, yi);\n\n      var o = e[i];\n      n = Ve([t.to, n, o, t.from]);\n      var s = Ve([t.from, o, n]);\n      this._active = !0, this._fn = t.fn || _i[t.type || _typeof(s)], this._easing = xi[t.easing] || xi.linear, this._start = Math.floor(Date.now() + (t.delay || 0)), this._duration = this._total = Math.floor(t.duration), this._loop = !!t.loop, this._target = e, this._prop = i, this._from = s, this._to = n, this._promises = void 0;\n    }\n\n    _createClass(yi, [{\n      key: \"active\",\n      value: function active() {\n        return this._active;\n      }\n    }, {\n      key: \"update\",\n      value: function update(t, e, i) {\n        var n = this;\n\n        if (n._active) {\n          n._notify(!1);\n\n          var _o7 = n._target[n._prop],\n              _s8 = i - n._start,\n              _a8 = n._duration - _s8;\n\n          n._start = i, n._duration = Math.floor(Math.max(_a8, t.duration)), n._total += _s8, n._loop = !!t.loop, n._to = Ve([t.to, e, _o7, t.from]), n._from = Ve([t.from, _o7, e]);\n        }\n      }\n    }, {\n      key: \"cancel\",\n      value: function cancel() {\n        var t = this;\n        t._active && (t.tick(Date.now()), t._active = !1, t._notify(!1));\n      }\n    }, {\n      key: \"tick\",\n      value: function tick(t) {\n        var e = this,\n            i = t - e._start,\n            n = e._duration,\n            o = e._prop,\n            s = e._from,\n            a = e._loop,\n            r = e._to;\n        var l;\n        if (e._active = s !== r && (a || i < n), !e._active) return e._target[o] = r, void e._notify(!0);\n        i < 0 ? e._target[o] = s : (l = i / n % 2, l = a && l > 1 ? 2 - l : l, l = e._easing(Math.min(1, Math.max(0, l))), e._target[o] = e._fn(s, r, l));\n      }\n    }, {\n      key: \"wait\",\n      value: function wait() {\n        var t = this._promises || (this._promises = []);\n        return new Promise(function (e, i) {\n          t.push({\n            res: e,\n            rej: i\n          });\n        });\n      }\n    }, {\n      key: \"_notify\",\n      value: function _notify(t) {\n        var e = t ? \"res\" : \"rej\",\n            i = this._promises || [];\n\n        for (var _t13 = 0; _t13 < i.length; _t13++) {\n          i[_t13][e]();\n        }\n      }\n    }]);\n\n    return yi;\n  }();\n\n  xt.set(\"animation\", {\n    delay: void 0,\n    duration: 1e3,\n    easing: \"easeOutQuart\",\n    fn: void 0,\n    from: void 0,\n    loop: void 0,\n    to: void 0,\n    type: void 0\n  });\n  var vi = Object.keys(xt.animation);\n  xt.describe(\"animation\", {\n    _fallback: !1,\n    _indexable: !1,\n    _scriptable: function _scriptable(t) {\n      return \"onProgress\" !== t && \"onComplete\" !== t && \"fn\" !== t;\n    }\n  }), xt.set(\"animations\", {\n    colors: {\n      type: \"color\",\n      properties: [\"color\", \"borderColor\", \"backgroundColor\"]\n    },\n    numbers: {\n      type: \"number\",\n      properties: [\"x\", \"y\", \"borderWidth\", \"radius\", \"tension\"]\n    }\n  }), xt.describe(\"animations\", {\n    _fallback: \"animation\"\n  }), xt.set(\"transitions\", {\n    active: {\n      animation: {\n        duration: 400\n      }\n    },\n    resize: {\n      animation: {\n        duration: 0\n      }\n    },\n    show: {\n      animations: {\n        colors: {\n          from: \"transparent\"\n        },\n        visible: {\n          type: \"boolean\",\n          duration: 0\n        }\n      }\n    },\n    hide: {\n      animations: {\n        colors: {\n          to: \"transparent\"\n        },\n        visible: {\n          type: \"boolean\",\n          easing: \"linear\",\n          fn: function fn(t) {\n            return 0 | t;\n          }\n        }\n      }\n    }\n  });\n\n  var wi = /*#__PURE__*/function () {\n    function wi(t, e) {\n      _classCallCheck(this, wi);\n\n      this._chart = t, this._properties = new Map(), this.configure(e);\n    }\n\n    _createClass(wi, [{\n      key: \"configure\",\n      value: function configure(t) {\n        if (!U(t)) return;\n        var e = this._properties;\n        Object.getOwnPropertyNames(t).forEach(function (i) {\n          var n = t[i];\n          if (!U(n)) return;\n          var o = {};\n\n          var _iterator3 = _createForOfIteratorHelper(vi),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _t14 = _step3.value;\n              o[_t14] = n[_t14];\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          (Y(n.properties) && n.properties || [i]).forEach(function (t) {\n            t !== i && e.has(t) || e.set(t, o);\n          });\n        });\n      }\n    }, {\n      key: \"_animateOptions\",\n      value: function _animateOptions(t, e) {\n        var i = e.options,\n            n = function (t, e) {\n          if (!e) return;\n          var i = t.options;\n          if (!i) return void (t.options = e);\n          i.$shared && (t.options = i = Object.assign({}, i, {\n            $shared: !1,\n            $animations: {}\n          }));\n          return i;\n        }(t, i);\n\n        if (!n) return [];\n\n        var o = this._createAnimations(n, i);\n\n        return i.$shared && function (t, e) {\n          var i = [],\n              n = Object.keys(e);\n\n          for (var _e11 = 0; _e11 < n.length; _e11++) {\n            var _o8 = t[n[_e11]];\n            _o8 && _o8.active() && i.push(_o8.wait());\n          }\n\n          return Promise.all(i);\n        }(t.options.$animations, i).then(function () {\n          t.options = i;\n        }, function () {}), o;\n      }\n    }, {\n      key: \"_createAnimations\",\n      value: function _createAnimations(t, e) {\n        var i = this._properties,\n            n = [],\n            o = t.$animations || (t.$animations = {}),\n            s = Object.keys(e),\n            a = Date.now();\n        var r;\n\n        for (r = s.length - 1; r >= 0; --r) {\n          var _l5 = s[r];\n          if (\"$\" === _l5.charAt(0)) continue;\n\n          if (\"options\" === _l5) {\n            n.push.apply(n, _toConsumableArray(this._animateOptions(t, e)));\n            continue;\n          }\n\n          var _c4 = e[_l5];\n          var _h3 = o[_l5];\n\n          var _d = i.get(_l5);\n\n          if (_h3) {\n            if (_d && _h3.active()) {\n              _h3.update(_d, _c4, a);\n\n              continue;\n            }\n\n            _h3.cancel();\n          }\n\n          _d && _d.duration ? (o[_l5] = _h3 = new yi(_d, t, _l5, _c4), n.push(_h3)) : t[_l5] = _c4;\n        }\n\n        return n;\n      }\n    }, {\n      key: \"update\",\n      value: function update(t, e) {\n        if (0 === this._properties.size) return void Object.assign(t, e);\n\n        var i = this._createAnimations(t, e);\n\n        return i.length ? (a.add(this._chart, i), !0) : void 0;\n      }\n    }]);\n\n    return wi;\n  }();\n\n  function Mi(t, e) {\n    var i = t && t.options || {},\n        n = i.reverse,\n        o = void 0 === i.min ? e : 0,\n        s = void 0 === i.max ? e : 0;\n    return {\n      start: n ? s : o,\n      end: n ? o : s\n    };\n  }\n\n  function ki(t, e) {\n    var i = [],\n        n = t._getSortedDatasetMetas(e);\n\n    var o, s;\n\n    for (o = 0, s = n.length; o < s; ++o) {\n      i.push(n[o].index);\n    }\n\n    return i;\n  }\n\n  function Si(t, e, i, n) {\n    var o = t.keys,\n        s = \"single\" === n.mode;\n    var a, r, l, c;\n\n    if (null !== e) {\n      for (a = 0, r = o.length; a < r; ++a) {\n        if (l = +o[a], l === i) {\n          if (n.all) continue;\n          break;\n        }\n\n        c = t.values[l], X(c) && (s || 0 === e || Dt(e) === Dt(c)) && (e += c);\n      }\n\n      return e;\n    }\n  }\n\n  function Pi(t, e) {\n    var i = t && t.options.stacked;\n    return i || void 0 === i && void 0 !== e.stack;\n  }\n\n  function Di(t, e, i) {\n    var n = t[e] || (t[e] = {});\n    return n[i] || (n[i] = {});\n  }\n\n  function Ci(t, e, i) {\n    var _iterator4 = _createForOfIteratorHelper(e.getMatchingVisibleMetas(\"bar\").reverse()),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _n13 = _step4.value;\n        var _e12 = t[_n13.index];\n        if (i && _e12 > 0 || !i && _e12 < 0) return _n13.index;\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    return null;\n  }\n\n  function Oi(t, e) {\n    var i = t.chart,\n        n = t._cachedMeta,\n        o = i._stacks || (i._stacks = {}),\n        s = n.iScale,\n        a = n.vScale,\n        r = n.index,\n        l = s.axis,\n        c = a.axis,\n        h = function (t, e, i) {\n      return \"\".concat(t.id, \".\").concat(e.id, \".\").concat(i.stack || i.type);\n    }(s, a, n),\n        d = e.length;\n\n    var u;\n\n    for (var _t15 = 0; _t15 < d; ++_t15) {\n      var _i8 = e[_t15],\n          _n14 = _i8[l],\n          _s9 = _i8[c];\n      u = (_i8._stacks || (_i8._stacks = {}))[c] = Di(o, h, _n14), u[r] = _s9, u._top = Ci(u, a, !0), u._bottom = Ci(u, a, !1);\n    }\n  }\n\n  function Ti(t, e) {\n    var i = t.scales;\n    return Object.keys(i).filter(function (t) {\n      return i[t].axis === e;\n    }).shift();\n  }\n\n  function Ai(t, e) {\n    var i = t.vScale && t.vScale.axis;\n\n    if (i) {\n      e = e || t._parsed;\n\n      var _iterator5 = _createForOfIteratorHelper(e),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _n15 = _step5.value;\n          var _e13 = _n15._stacks;\n          if (!_e13 || void 0 === _e13[i] || void 0 === _e13[i][t.index]) return;\n          delete _e13[i][t.index];\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }\n\n  var Li = function Li(t) {\n    return \"reset\" === t || \"none\" === t;\n  },\n      Ri = function Ri(t, e) {\n    return e ? t : Object.assign({}, t);\n  };\n\n  var Ei = /*#__PURE__*/function () {\n    function Ei(t, e) {\n      _classCallCheck(this, Ei);\n\n      this.chart = t, this._ctx = t.ctx, this.index = e, this._cachedDataOpts = {}, this._cachedMeta = this.getMeta(), this._type = this._cachedMeta.type, this.options = void 0, this._parsing = !1, this._data = void 0, this._objectData = void 0, this._sharedOptions = void 0, this._drawStart = void 0, this._drawCount = void 0, this.enableOptionSharing = !1, this.$context = void 0, this._syncList = [], this.initialize();\n    }\n\n    _createClass(Ei, [{\n      key: \"initialize\",\n      value: function initialize() {\n        var t = this,\n            e = t._cachedMeta;\n        t.configure(), t.linkScales(), e._stacked = Pi(e.vScale, e), t.addElements();\n      }\n    }, {\n      key: \"updateIndex\",\n      value: function updateIndex(t) {\n        this.index !== t && Ai(this._cachedMeta), this.index = t;\n      }\n    }, {\n      key: \"linkScales\",\n      value: function linkScales() {\n        var t = this,\n            e = t.chart,\n            i = t._cachedMeta,\n            n = t.getDataset(),\n            o = function o(t, e, i, n) {\n          return \"x\" === t ? e : \"r\" === t ? n : i;\n        },\n            s = i.xAxisID = K(n.xAxisID, Ti(e, \"x\")),\n            a = i.yAxisID = K(n.yAxisID, Ti(e, \"y\")),\n            r = i.rAxisID = K(n.rAxisID, Ti(e, \"r\")),\n            l = i.indexAxis,\n            c = i.iAxisID = o(l, s, a, r),\n            h = i.vAxisID = o(l, a, s, r);\n\n        i.xScale = t.getScaleForId(s), i.yScale = t.getScaleForId(a), i.rScale = t.getScaleForId(r), i.iScale = t.getScaleForId(c), i.vScale = t.getScaleForId(h);\n      }\n    }, {\n      key: \"getDataset\",\n      value: function getDataset() {\n        return this.chart.data.datasets[this.index];\n      }\n    }, {\n      key: \"getMeta\",\n      value: function getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n      }\n    }, {\n      key: \"getScaleForId\",\n      value: function getScaleForId(t) {\n        return this.chart.scales[t];\n      }\n    }, {\n      key: \"_getOtherScale\",\n      value: function _getOtherScale(t) {\n        var e = this._cachedMeta;\n        return t === e.iScale ? e.vScale : e.iScale;\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this._update(\"reset\");\n      }\n    }, {\n      key: \"_destroy\",\n      value: function _destroy() {\n        var t = this._cachedMeta;\n        this._data && he(this._data, this), t._stacked && Ai(t);\n      }\n    }, {\n      key: \"_dataCheck\",\n      value: function _dataCheck() {\n        var t = this,\n            e = t.getDataset(),\n            i = e.data || (e.data = []),\n            n = t._data;\n        if (U(i)) t._data = function (t) {\n          var e = Object.keys(t),\n              i = new Array(e.length);\n          var n, o, s;\n\n          for (n = 0, o = e.length; n < o; ++n) {\n            s = e[n], i[n] = {\n              x: s,\n              y: t[s]\n            };\n          }\n\n          return i;\n        }(i);else if (n !== i) {\n          if (n) {\n            he(n, t);\n            var _e14 = t._cachedMeta;\n            Ai(_e14), _e14._parsed = [];\n          }\n\n          i && Object.isExtensible(i) && ce(i, t), t._syncList = [], t._data = i;\n        }\n      }\n    }, {\n      key: \"addElements\",\n      value: function addElements() {\n        var t = this,\n            e = t._cachedMeta;\n        t._dataCheck(), t.datasetElementType && (e.dataset = new t.datasetElementType());\n      }\n    }, {\n      key: \"buildOrUpdateElements\",\n      value: function buildOrUpdateElements(t) {\n        var e = this,\n            i = e._cachedMeta,\n            n = e.getDataset();\n        var o = !1;\n\n        e._dataCheck();\n\n        var s = i._stacked;\n        i._stacked = Pi(i.vScale, i), i.stack !== n.stack && (o = !0, Ai(i), i.stack = n.stack), e._resyncElements(t), (o || s !== i._stacked) && Oi(e, i._parsed);\n      }\n    }, {\n      key: \"configure\",\n      value: function configure() {\n        var t = this,\n            e = t.chart.config,\n            i = e.datasetScopeKeys(t._type),\n            n = e.getOptionScopes(t.getDataset(), i, !0);\n        t.options = e.createResolver(n, t.getContext()), t._parsing = t.options.parsing;\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(t, e) {\n        var i = this,\n            n = i._cachedMeta,\n            o = i._data,\n            s = n.iScale,\n            a = n._stacked,\n            r = s.axis;\n        var l,\n            c,\n            h,\n            d = 0 === t && e === o.length || n._sorted,\n            u = t > 0 && n._parsed[t - 1];\n        if (!1 === i._parsing) n._parsed = o, n._sorted = !0, h = o;else {\n          h = Y(o[t]) ? i.parseArrayData(n, o, t, e) : U(o[t]) ? i.parseObjectData(n, o, t, e) : i.parsePrimitiveData(n, o, t, e);\n\n          var _s10 = function _s10() {\n            return null === c[r] || u && c[r] < u[r];\n          };\n\n          for (l = 0; l < e; ++l) {\n            n._parsed[l + t] = c = h[l], d && (_s10() && (d = !1), u = c);\n          }\n\n          n._sorted = d;\n        }\n        a && Oi(i, h);\n      }\n    }, {\n      key: \"parsePrimitiveData\",\n      value: function parsePrimitiveData(t, e, i, n) {\n        var o = t.iScale,\n            s = t.vScale,\n            a = o.axis,\n            r = s.axis,\n            l = o.getLabels(),\n            c = o === s,\n            h = new Array(n);\n        var d, u, f;\n\n        for (d = 0, u = n; d < u; ++d) {\n          var _h$d;\n\n          f = d + i, h[d] = (_h$d = {}, _defineProperty(_h$d, a, c || o.parse(l[f], f)), _defineProperty(_h$d, r, s.parse(e[f], f)), _h$d);\n        }\n\n        return h;\n      }\n    }, {\n      key: \"parseArrayData\",\n      value: function parseArrayData(t, e, i, n) {\n        var o = t.xScale,\n            s = t.yScale,\n            a = new Array(n);\n        var r, l, c, h;\n\n        for (r = 0, l = n; r < l; ++r) {\n          c = r + i, h = e[c], a[r] = {\n            x: o.parse(h[0], c),\n            y: s.parse(h[1], c)\n          };\n        }\n\n        return a;\n      }\n    }, {\n      key: \"parseObjectData\",\n      value: function parseObjectData(t, e, i, n) {\n        var o = t.xScale,\n            s = t.yScale,\n            _this$_parsing = this._parsing,\n            _this$_parsing$xAxisK = _this$_parsing.xAxisKey,\n            a = _this$_parsing$xAxisK === void 0 ? \"x\" : _this$_parsing$xAxisK,\n            _this$_parsing$yAxisK = _this$_parsing.yAxisKey,\n            r = _this$_parsing$yAxisK === void 0 ? \"y\" : _this$_parsing$yAxisK,\n            l = new Array(n);\n        var c, h, d, u;\n\n        for (c = 0, h = n; c < h; ++c) {\n          d = c + i, u = e[d], l[c] = {\n            x: o.parse(lt(u, a), d),\n            y: s.parse(lt(u, r), d)\n          };\n        }\n\n        return l;\n      }\n    }, {\n      key: \"getParsed\",\n      value: function getParsed(t) {\n        return this._cachedMeta._parsed[t];\n      }\n    }, {\n      key: \"getDataElement\",\n      value: function getDataElement(t) {\n        return this._cachedMeta.data[t];\n      }\n    }, {\n      key: \"applyStack\",\n      value: function applyStack(t, e, i) {\n        var n = this.chart,\n            o = this._cachedMeta,\n            s = e[t.axis];\n        return Si({\n          keys: ki(n, !0),\n          values: e._stacks[t.axis]\n        }, s, o.index, {\n          mode: i\n        });\n      }\n    }, {\n      key: \"updateRangeFromParsed\",\n      value: function updateRangeFromParsed(t, e, i, n) {\n        var o = i[e.axis];\n        var s = null === o ? NaN : o;\n        var a = n && i._stacks[e.axis];\n        n && a && (n.values = a, t.min = Math.min(t.min, s), t.max = Math.max(t.max, s), s = Si(n, o, this._cachedMeta.index, {\n          all: !0\n        })), t.min = Math.min(t.min, s), t.max = Math.max(t.max, s);\n      }\n    }, {\n      key: \"getMinMax\",\n      value: function getMinMax(t, e) {\n        var i = this,\n            n = i._cachedMeta,\n            o = n._parsed,\n            s = n._sorted && t === n.iScale,\n            a = o.length,\n            r = i._getOtherScale(t),\n            l = e && n._stacked && {\n          keys: ki(i.chart, !0),\n          values: null\n        },\n            c = {\n          min: Number.POSITIVE_INFINITY,\n          max: Number.NEGATIVE_INFINITY\n        },\n            _ref2 = function (t) {\n          var _t$getUserBounds = t.getUserBounds(),\n              e = _t$getUserBounds.min,\n              i = _t$getUserBounds.max,\n              n = _t$getUserBounds.minDefined,\n              o = _t$getUserBounds.maxDefined;\n\n          return {\n            min: n ? e : Number.NEGATIVE_INFINITY,\n            max: o ? i : Number.POSITIVE_INFINITY\n          };\n        }(r),\n            h = _ref2.min,\n            d = _ref2.max;\n\n        var u, f, g, p;\n\n        function m() {\n          return g = o[u], f = g[t.axis], p = g[r.axis], !X(f) || h > p || d < p;\n        }\n\n        for (u = 0; u < a && (m() || (i.updateRangeFromParsed(c, t, g, l), !s)); ++u) {\n          ;\n        }\n\n        if (s) for (u = a - 1; u >= 0; --u) {\n          if (!m()) {\n            i.updateRangeFromParsed(c, t, g, l);\n            break;\n          }\n        }\n        return c;\n      }\n    }, {\n      key: \"getAllParsedValues\",\n      value: function getAllParsedValues(t) {\n        var e = this._cachedMeta._parsed,\n            i = [];\n        var n, o, s;\n\n        for (n = 0, o = e.length; n < o; ++n) {\n          s = e[n][t.axis], X(s) && i.push(s);\n        }\n\n        return i;\n      }\n    }, {\n      key: \"getMaxOverflow\",\n      value: function getMaxOverflow() {\n        return !1;\n      }\n    }, {\n      key: \"getLabelAndValue\",\n      value: function getLabelAndValue(t) {\n        var e = this._cachedMeta,\n            i = e.iScale,\n            n = e.vScale,\n            o = this.getParsed(t);\n        return {\n          label: i ? \"\" + i.getLabelForValue(o[i.axis]) : \"\",\n          value: n ? \"\" + n.getLabelForValue(o[n.axis]) : \"\"\n        };\n      }\n    }, {\n      key: \"_update\",\n      value: function _update(t) {\n        var e = this,\n            i = e._cachedMeta;\n        e.configure(), e._cachedDataOpts = {}, e.update(t || \"default\"), i._clip = function (t) {\n          var e, i, n, o;\n          return U(t) ? (e = t.top, i = t.right, n = t.bottom, o = t.left) : e = i = n = o = t, {\n            top: e,\n            right: i,\n            bottom: n,\n            left: o,\n            disabled: !1 === t\n          };\n        }(K(e.options.clip, function (t, e, i) {\n          if (!1 === i) return !1;\n          var n = Mi(t, i),\n              o = Mi(e, i);\n          return {\n            top: o.end,\n            right: n.end,\n            bottom: o.start,\n            left: n.start\n          };\n        }(i.xScale, i.yScale, e.getMaxOverflow())));\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {}\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        var t = this,\n            e = t._ctx,\n            i = t.chart,\n            n = t._cachedMeta,\n            o = n.data || [],\n            s = i.chartArea,\n            a = [],\n            r = t._drawStart || 0,\n            l = t._drawCount || o.length - r;\n        var c;\n\n        for (n.dataset && n.dataset.draw(e, s, r, l), c = r; c < r + l; ++c) {\n          var _t16 = o[c];\n          _t16.active ? a.push(_t16) : _t16.draw(e, s);\n        }\n\n        for (c = 0; c < a.length; ++c) {\n          a[c].draw(e, s);\n        }\n      }\n    }, {\n      key: \"getStyle\",\n      value: function getStyle(t, e) {\n        var i = e ? \"active\" : \"default\";\n        return void 0 === t && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(i) : this.resolveDataElementOptions(t || 0, i);\n      }\n    }, {\n      key: \"getContext\",\n      value: function getContext(t, e, i) {\n        var n = this,\n            o = n.getDataset();\n        var s;\n\n        if (t >= 0 && t < n._cachedMeta.data.length) {\n          var _e15 = n._cachedMeta.data[t];\n          s = _e15.$context || (_e15.$context = function (t, e, i) {\n            return Object.assign(Object.create(t), {\n              active: !1,\n              dataIndex: e,\n              parsed: void 0,\n              raw: void 0,\n              element: i,\n              index: e,\n              mode: \"default\",\n              type: \"data\"\n            });\n          }(n.getContext(), t, _e15)), s.parsed = n.getParsed(t), s.raw = o.data[t], s.index = s.dataIndex = t;\n        } else s = n.$context || (n.$context = function (t, e) {\n          return Object.assign(Object.create(t), {\n            active: !1,\n            dataset: void 0,\n            datasetIndex: e,\n            index: e,\n            mode: \"default\",\n            type: \"dataset\"\n          });\n        }(n.chart.getContext(), n.index)), s.dataset = o, s.index = s.datasetIndex = n.index;\n\n        return s.active = !!e, s.mode = i, s;\n      }\n    }, {\n      key: \"resolveDatasetElementOptions\",\n      value: function resolveDatasetElementOptions(t) {\n        return this._resolveElementOptions(this.datasetElementType.id, t);\n      }\n    }, {\n      key: \"resolveDataElementOptions\",\n      value: function resolveDataElementOptions(t, e) {\n        return this._resolveElementOptions(this.dataElementType.id, e, t);\n      }\n    }, {\n      key: \"_resolveElementOptions\",\n      value: function _resolveElementOptions(t) {\n        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"default\";\n        var i = arguments.length > 2 ? arguments[2] : undefined;\n        var n = this,\n            o = \"active\" === e,\n            s = n._cachedDataOpts,\n            a = t + \"-\" + e,\n            r = s[a],\n            l = n.enableOptionSharing && ht(i);\n        if (r) return Ri(r, l);\n        var c = n.chart.config,\n            h = c.datasetElementScopeKeys(n._type, t),\n            d = o ? [\"\".concat(t, \"Hover\"), \"hover\", t, \"\"] : [t, \"\"],\n            u = c.getOptionScopes(n.getDataset(), h),\n            f = Object.keys(xt.elements[t]),\n            g = c.resolveNamedOptions(u, f, function () {\n          return n.getContext(i, o);\n        }, d);\n        return g.$shared && (g.$shared = l, s[a] = Object.freeze(Ri(g, l))), g;\n      }\n    }, {\n      key: \"_resolveAnimations\",\n      value: function _resolveAnimations(t, e, i) {\n        var n = this,\n            o = n.chart,\n            s = n._cachedDataOpts,\n            a = \"animation-\".concat(e),\n            r = s[a];\n        if (r) return r;\n        var l;\n\n        if (!1 !== o.options.animation) {\n          var _o9 = n.chart.config,\n              _s11 = _o9.datasetAnimationScopeKeys(n._type, e),\n              _a9 = _o9.getOptionScopes(n.getDataset(), _s11);\n\n          l = _o9.createResolver(_a9, n.getContext(t, i, e));\n        }\n\n        var c = new wi(o, l && l.animations);\n        return l && l._cacheable && (s[a] = Object.freeze(c)), c;\n      }\n    }, {\n      key: \"getSharedOptions\",\n      value: function getSharedOptions(t) {\n        if (t.$shared) return this._sharedOptions || (this._sharedOptions = Object.assign({}, t));\n      }\n    }, {\n      key: \"includeOptions\",\n      value: function includeOptions(t, e) {\n        return !e || Li(t) || this.chart._animationsDisabled;\n      }\n    }, {\n      key: \"updateElement\",\n      value: function updateElement(t, e, i, n) {\n        Li(n) ? Object.assign(t, i) : this._resolveAnimations(e, n).update(t, i);\n      }\n    }, {\n      key: \"updateSharedOptions\",\n      value: function updateSharedOptions(t, e, i) {\n        t && !Li(e) && this._resolveAnimations(void 0, e).update(t, i);\n      }\n    }, {\n      key: \"_setStyle\",\n      value: function _setStyle(t, e, i, n) {\n        t.active = n;\n        var o = this.getStyle(e, n);\n\n        this._resolveAnimations(e, i, n).update(t, {\n          options: !n && this.getSharedOptions(o) || o\n        });\n      }\n    }, {\n      key: \"removeHoverStyle\",\n      value: function removeHoverStyle(t, e, i) {\n        this._setStyle(t, i, \"active\", !1);\n      }\n    }, {\n      key: \"setHoverStyle\",\n      value: function setHoverStyle(t, e, i) {\n        this._setStyle(t, i, \"active\", !0);\n      }\n    }, {\n      key: \"_removeDatasetHoverStyle\",\n      value: function _removeDatasetHoverStyle() {\n        var t = this._cachedMeta.dataset;\n        t && this._setStyle(t, void 0, \"active\", !1);\n      }\n    }, {\n      key: \"_setDatasetHoverStyle\",\n      value: function _setDatasetHoverStyle() {\n        var t = this._cachedMeta.dataset;\n        t && this._setStyle(t, void 0, \"active\", !0);\n      }\n    }, {\n      key: \"_resyncElements\",\n      value: function _resyncElements(t) {\n        var e = this,\n            i = e._data,\n            n = e._cachedMeta.data;\n\n        var _iterator6 = _createForOfIteratorHelper(e._syncList),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var _step6$value = _slicedToArray(_step6.value, 3),\n                _t17 = _step6$value[0],\n                _i9 = _step6$value[1],\n                _n16 = _step6$value[2];\n\n            e[_t17](_i9, _n16);\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n\n        e._syncList = [];\n        var o = n.length,\n            s = i.length,\n            a = Math.min(s, o);\n        a && e.parse(0, a), s > o ? e._insertElements(o, s - o, t) : s < o && e._removeElements(s, o - s);\n      }\n    }, {\n      key: \"_insertElements\",\n      value: function _insertElements(t, e) {\n        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !0;\n        var n = this,\n            o = n._cachedMeta,\n            s = o.data,\n            a = t + e;\n        var r;\n\n        var l = function l(t) {\n          for (t.length += e, r = t.length - 1; r >= a; r--) {\n            t[r] = t[r - e];\n          }\n        };\n\n        for (l(s), r = t; r < a; ++r) {\n          s[r] = new n.dataElementType();\n        }\n\n        n._parsing && l(o._parsed), n.parse(t, e), i && n.updateElements(s, t, e, \"reset\");\n      }\n    }, {\n      key: \"updateElements\",\n      value: function updateElements(t, e, i, n) {}\n    }, {\n      key: \"_removeElements\",\n      value: function _removeElements(t, e) {\n        var i = this._cachedMeta;\n\n        if (this._parsing) {\n          var _n17 = i._parsed.splice(t, e);\n\n          i._stacked && Ai(i, _n17);\n        }\n\n        i.data.splice(t, e);\n      }\n    }, {\n      key: \"_onDataPush\",\n      value: function _onDataPush() {\n        var t = arguments.length;\n\n        this._syncList.push([\"_insertElements\", this.getDataset().data.length - t, t]);\n      }\n    }, {\n      key: \"_onDataPop\",\n      value: function _onDataPop() {\n        this._syncList.push([\"_removeElements\", this._cachedMeta.data.length - 1, 1]);\n      }\n    }, {\n      key: \"_onDataShift\",\n      value: function _onDataShift() {\n        this._syncList.push([\"_removeElements\", 0, 1]);\n      }\n    }, {\n      key: \"_onDataSplice\",\n      value: function _onDataSplice(t, e) {\n        this._syncList.push([\"_removeElements\", t, e]), this._syncList.push([\"_insertElements\", t, arguments.length - 2]);\n      }\n    }, {\n      key: \"_onDataUnshift\",\n      value: function _onDataUnshift() {\n        this._syncList.push([\"_insertElements\", 0, arguments.length]);\n      }\n    }]);\n\n    return Ei;\n  }();\n\n  Ei.defaults = {}, Ei.prototype.datasetElementType = null, Ei.prototype.dataElementType = null;\n\n  var zi = /*#__PURE__*/function () {\n    function zi() {\n      _classCallCheck(this, zi);\n\n      this.x = void 0, this.y = void 0, this.active = !1, this.options = void 0, this.$animations = void 0;\n    }\n\n    _createClass(zi, [{\n      key: \"tooltipPosition\",\n      value: function tooltipPosition(t) {\n        var _this$getProps = this.getProps([\"x\", \"y\"], t),\n            e = _this$getProps.x,\n            i = _this$getProps.y;\n\n        return {\n          x: e,\n          y: i\n        };\n      }\n    }, {\n      key: \"hasValue\",\n      value: function hasValue() {\n        return Tt(this.x) && Tt(this.y);\n      }\n    }, {\n      key: \"getProps\",\n      value: function getProps(t, e) {\n        var i = this,\n            n = this.$animations;\n        if (!e || !n) return i;\n        var o = {};\n        return t.forEach(function (t) {\n          o[t] = n[t] && n[t].active() ? n[t]._to : i[t];\n        }), o;\n      }\n    }]);\n\n    return zi;\n  }();\n\n  zi.defaults = {}, zi.defaultRoutes = void 0;\n  var Ii = new Map();\n\n  function Fi(t, e, i) {\n    return function (t, e) {\n      e = e || {};\n      var i = t + JSON.stringify(e);\n      var n = Ii.get(i);\n      return n || (n = new Intl.NumberFormat(t, e), Ii.set(i, n)), n;\n    }(e, i).format(t);\n  }\n\n  var Bi = {\n    values: function values(t) {\n      return Y(t) ? t : \"\" + t;\n    },\n    numeric: function numeric(t, e, i) {\n      if (0 === t) return \"0\";\n      var n = this.chart.options.locale;\n      var o,\n          s = t;\n\n      if (i.length > 1) {\n        var _e16 = Math.max(Math.abs(i[0].value), Math.abs(i[i.length - 1].value));\n\n        (_e16 < 1e-4 || _e16 > 1e15) && (o = \"scientific\"), s = function (t, e) {\n          var i = e.length > 3 ? e[2].value - e[1].value : e[1].value - e[0].value;\n          Math.abs(i) >= 1 && t !== Math.floor(t) && (i = t - Math.floor(t));\n          return i;\n        }(t, i);\n      }\n\n      var a = Pt(Math.abs(s)),\n          r = Math.max(Math.min(-1 * Math.floor(a), 20), 0),\n          l = {\n        notation: o,\n        minimumFractionDigits: r,\n        maximumFractionDigits: r\n      };\n      return Object.assign(l, this.options.ticks.format), Fi(t, n, l);\n    },\n    logarithmic: function logarithmic(t, e, i) {\n      if (0 === t) return \"0\";\n      var n = t / Math.pow(10, Math.floor(Pt(t)));\n      return 1 === n || 2 === n || 5 === n ? Bi.numeric.call(this, t, e, i) : \"\";\n    }\n  };\n  var Vi = {\n    formatters: Bi\n  };\n\n  function Wi(t, e) {\n    var i = t.options.ticks,\n        n = i.maxTicksLimit || function (t) {\n      var e = t.options.offset,\n          i = t._tickSize(),\n          n = t._length / i + (e ? 0 : 1),\n          o = t._maxLength / i;\n\n      return Math.floor(Math.min(n, o));\n    }(t),\n        o = i.major.enabled ? function (t) {\n      var e = [];\n      var i, n;\n\n      for (i = 0, n = t.length; i < n; i++) {\n        t[i].major && e.push(i);\n      }\n\n      return e;\n    }(e) : [],\n        s = o.length,\n        a = o[0],\n        r = o[s - 1],\n        l = [];\n\n    if (s > n) return function (t, e, i, n) {\n      var o,\n          s = 0,\n          a = i[0];\n\n      for (n = Math.ceil(n), o = 0; o < t.length; o++) {\n        o === a && (e.push(t[o]), s++, a = i[s * n]);\n      }\n    }(e, l, o, s / n), l;\n\n    var c = function (t, e, i) {\n      var n = function (t) {\n        var e = t.length;\n        var i, n;\n        if (e < 2) return !1;\n\n        for (n = t[0], i = 1; i < e; ++i) {\n          if (t[i] - t[i - 1] !== n) return !1;\n        }\n\n        return n;\n      }(t),\n          o = e.length / i;\n\n      if (!n) return Math.max(o, 1);\n      var s = Ot(n);\n\n      for (var _t18 = 0, _e17 = s.length - 1; _t18 < _e17; _t18++) {\n        var _e18 = s[_t18];\n        if (_e18 > o) return _e18;\n      }\n\n      return Math.max(o, 1);\n    }(o, e, n);\n\n    if (s > 0) {\n      var _t19, _i10;\n\n      var _n18 = s > 1 ? Math.round((r - a) / (s - 1)) : null;\n\n      for (Ni(e, l, c, $(_n18) ? 0 : a - _n18, a), _t19 = 0, _i10 = s - 1; _t19 < _i10; _t19++) {\n        Ni(e, l, c, o[_t19], o[_t19 + 1]);\n      }\n\n      return Ni(e, l, c, r, $(_n18) ? e.length : r + _n18), l;\n    }\n\n    return Ni(e, l, c), l;\n  }\n\n  function Ni(t, e, i, n, o) {\n    var s = K(n, 0),\n        a = Math.min(K(o, t.length), t.length);\n    var r,\n        l,\n        c,\n        h = 0;\n\n    for (i = Math.ceil(i), o && (r = o - n, i = r / Math.floor(r / i)), c = s; c < 0;) {\n      h++, c = Math.round(s + h * i);\n    }\n\n    for (l = Math.max(s, 0); l < a; l++) {\n      l === c && (e.push(t[l]), h++, c = Math.round(s + h * i));\n    }\n  }\n\n  xt.set(\"scale\", {\n    display: !0,\n    offset: !1,\n    reverse: !1,\n    beginAtZero: !1,\n    bounds: \"ticks\",\n    grace: 0,\n    grid: {\n      display: !0,\n      lineWidth: 1,\n      drawBorder: !0,\n      drawOnChartArea: !0,\n      drawTicks: !0,\n      tickLength: 8,\n      tickWidth: function tickWidth(t, e) {\n        return e.lineWidth;\n      },\n      tickColor: function tickColor(t, e) {\n        return e.color;\n      },\n      offset: !1,\n      borderDash: [],\n      borderDashOffset: 0,\n      borderWidth: 1\n    },\n    title: {\n      display: !1,\n      text: \"\",\n      padding: {\n        top: 4,\n        bottom: 4\n      }\n    },\n    ticks: {\n      minRotation: 0,\n      maxRotation: 50,\n      mirror: !1,\n      textStrokeWidth: 0,\n      textStrokeColor: \"\",\n      padding: 3,\n      display: !0,\n      autoSkip: !0,\n      autoSkipPadding: 3,\n      labelOffset: 0,\n      callback: Vi.formatters.values,\n      minor: {},\n      major: {},\n      align: \"center\",\n      crossAlign: \"near\",\n      showLabelBackdrop: !1,\n      backdropColor: \"rgba(255, 255, 255, 0.75)\",\n      backdropPadding: 2\n    }\n  }), xt.route(\"scale.ticks\", \"color\", \"\", \"color\"), xt.route(\"scale.grid\", \"color\", \"\", \"borderColor\"), xt.route(\"scale.grid\", \"borderColor\", \"\", \"borderColor\"), xt.route(\"scale.title\", \"color\", \"\", \"color\"), xt.describe(\"scale\", {\n    _fallback: !1,\n    _scriptable: function _scriptable(t) {\n      return !t.startsWith(\"before\") && !t.startsWith(\"after\") && \"callback\" !== t && \"parser\" !== t;\n    },\n    _indexable: function _indexable(t) {\n      return \"borderDash\" !== t && \"tickBorderDash\" !== t;\n    }\n  }), xt.describe(\"scales\", {\n    _fallback: \"scale\"\n  }), xt.describe(\"scale.ticks\", {\n    _scriptable: function _scriptable(t) {\n      return \"backdropPadding\" !== t && \"callback\" !== t;\n    },\n    _indexable: function _indexable(t) {\n      return \"backdropPadding\" !== t;\n    }\n  });\n\n  var Hi = function Hi(t, e, i) {\n    return \"top\" === e || \"left\" === e ? t[e] + i : t[e] - i;\n  };\n\n  function ji(t, e) {\n    var i = [],\n        n = t.length / e,\n        o = t.length;\n    var s = 0;\n\n    for (; s < o; s += n) {\n      i.push(t[Math.floor(s)]);\n    }\n\n    return i;\n  }\n\n  function $i(t, e, i) {\n    var n = t.ticks.length,\n        o = Math.min(e, n - 1),\n        s = t._startPixel,\n        a = t._endPixel,\n        r = 1e-6;\n    var l,\n        c = t.getPixelForTick(o);\n    if (!(i && (l = 1 === n ? Math.max(c - s, a - c) : 0 === e ? (t.getPixelForTick(1) - c) / 2 : (c - t.getPixelForTick(o - 1)) / 2, c += o < e ? l : -l, c < s - r || c > a + r))) return c;\n  }\n\n  function Yi(t) {\n    return t.drawTicks ? t.tickLength : 0;\n  }\n\n  function Ui(t, e) {\n    if (!t.display) return 0;\n    var i = Be(t.font, e),\n        n = Fe(t.padding);\n    return (Y(t.text) ? t.text.length : 1) * i.lineHeight + n.height;\n  }\n\n  function Xi(t, e, i) {\n    var o = n(t);\n    return (i && \"right\" !== e || !i && \"right\" === e) && (o = function (t) {\n      return \"left\" === t ? \"right\" : \"right\" === t ? \"left\" : t;\n    }(o)), o;\n  }\n\n  var qi = /*#__PURE__*/function (_zi) {\n    _inherits(qi, _zi);\n\n    var _super3 = _createSuper(qi);\n\n    function qi(t) {\n      var _this;\n\n      _classCallCheck(this, qi);\n\n      _this = _super3.call(this), _this.id = t.id, _this.type = t.type, _this.options = void 0, _this.ctx = t.ctx, _this.chart = t.chart, _this.top = void 0, _this.bottom = void 0, _this.left = void 0, _this.right = void 0, _this.width = void 0, _this.height = void 0, _this._margins = {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }, _this.maxWidth = void 0, _this.maxHeight = void 0, _this.paddingTop = void 0, _this.paddingBottom = void 0, _this.paddingLeft = void 0, _this.paddingRight = void 0, _this.axis = void 0, _this.labelRotation = void 0, _this.min = void 0, _this.max = void 0, _this._range = void 0, _this.ticks = [], _this._gridLineItems = null, _this._labelItems = null, _this._labelSizes = null, _this._length = 0, _this._maxLength = 0, _this._longestTextCache = {}, _this._startPixel = void 0, _this._endPixel = void 0, _this._reversePixels = !1, _this._userMax = void 0, _this._userMin = void 0, _this._suggestedMax = void 0, _this._suggestedMin = void 0, _this._ticksLength = 0, _this._borderValue = 0, _this._cache = {}, _this._dataLimitsCached = !1, _this.$context = void 0;\n      return _this;\n    }\n\n    _createClass(qi, [{\n      key: \"init\",\n      value: function init(t) {\n        var e = this;\n        e.options = t.setContext(e.getContext()), e.axis = t.axis, e._userMin = e.parse(t.min), e._userMax = e.parse(t.max), e._suggestedMin = e.parse(t.suggestedMin), e._suggestedMax = e.parse(t.suggestedMax);\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(t, e) {\n        return t;\n      }\n    }, {\n      key: \"getUserBounds\",\n      value: function getUserBounds() {\n        var t = this._userMin,\n            e = this._userMax,\n            i = this._suggestedMin,\n            n = this._suggestedMax;\n        return t = q(t, Number.POSITIVE_INFINITY), e = q(e, Number.NEGATIVE_INFINITY), i = q(i, Number.POSITIVE_INFINITY), n = q(n, Number.NEGATIVE_INFINITY), {\n          min: q(t, i),\n          max: q(e, n),\n          minDefined: X(t),\n          maxDefined: X(e)\n        };\n      }\n    }, {\n      key: \"getMinMax\",\n      value: function getMinMax(t) {\n        var e = this;\n\n        var i,\n            _e$getUserBounds = e.getUserBounds(),\n            n = _e$getUserBounds.min,\n            o = _e$getUserBounds.max,\n            s = _e$getUserBounds.minDefined,\n            a = _e$getUserBounds.maxDefined;\n\n        if (s && a) return {\n          min: n,\n          max: o\n        };\n        var r = e.getMatchingVisibleMetas();\n\n        for (var _l6 = 0, _c5 = r.length; _l6 < _c5; ++_l6) {\n          i = r[_l6].controller.getMinMax(e, t), s || (n = Math.min(n, i.min)), a || (o = Math.max(o, i.max));\n        }\n\n        return {\n          min: q(n, q(o, n)),\n          max: q(o, q(n, o))\n        };\n      }\n    }, {\n      key: \"getPadding\",\n      value: function getPadding() {\n        var t = this;\n        return {\n          left: t.paddingLeft || 0,\n          top: t.paddingTop || 0,\n          right: t.paddingRight || 0,\n          bottom: t.paddingBottom || 0\n        };\n      }\n    }, {\n      key: \"getTicks\",\n      value: function getTicks() {\n        return this.ticks;\n      }\n    }, {\n      key: \"getLabels\",\n      value: function getLabels() {\n        var t = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? t.xLabels : t.yLabels) || t.labels || [];\n      }\n    }, {\n      key: \"beforeLayout\",\n      value: function beforeLayout() {\n        this._cache = {}, this._dataLimitsCached = !1;\n      }\n    }, {\n      key: \"beforeUpdate\",\n      value: function beforeUpdate() {\n        Q(this.options.beforeUpdate, [this]);\n      }\n    }, {\n      key: \"update\",\n      value: function update(t, e, i) {\n        var n = this,\n            o = n.options.ticks,\n            s = o.sampleSize;\n        n.beforeUpdate(), n.maxWidth = t, n.maxHeight = e, n._margins = i = Object.assign({\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0\n        }, i), n.ticks = null, n._labelSizes = null, n._gridLineItems = null, n._labelItems = null, n.beforeSetDimensions(), n.setDimensions(), n.afterSetDimensions(), n._maxLength = n.isHorizontal() ? n.width + i.left + i.right : n.height + i.top + i.bottom, n._dataLimitsCached || (n.beforeDataLimits(), n.determineDataLimits(), n.afterDataLimits(), n._range = We(n, n.options.grace), n._dataLimitsCached = !0), n.beforeBuildTicks(), n.ticks = n.buildTicks() || [], n.afterBuildTicks();\n        var a = s < n.ticks.length;\n        n._convertTicksToLabels(a ? ji(n.ticks, s) : n.ticks), n.configure(), n.beforeCalculateLabelRotation(), n.calculateLabelRotation(), n.afterCalculateLabelRotation(), o.display && (o.autoSkip || \"auto\" === o.source) && (n.ticks = Wi(n, n.ticks), n._labelSizes = null), a && n._convertTicksToLabels(n.ticks), n.beforeFit(), n.fit(), n.afterFit(), n.afterUpdate();\n      }\n    }, {\n      key: \"configure\",\n      value: function configure() {\n        var t = this;\n        var e,\n            i,\n            n = t.options.reverse;\n        t.isHorizontal() ? (e = t.left, i = t.right) : (e = t.top, i = t.bottom, n = !n), t._startPixel = e, t._endPixel = i, t._reversePixels = n, t._length = i - e, t._alignToPixels = t.options.alignToPixels;\n      }\n    }, {\n      key: \"afterUpdate\",\n      value: function afterUpdate() {\n        Q(this.options.afterUpdate, [this]);\n      }\n    }, {\n      key: \"beforeSetDimensions\",\n      value: function beforeSetDimensions() {\n        Q(this.options.beforeSetDimensions, [this]);\n      }\n    }, {\n      key: \"setDimensions\",\n      value: function setDimensions() {\n        var t = this;\n        t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0;\n      }\n    }, {\n      key: \"afterSetDimensions\",\n      value: function afterSetDimensions() {\n        Q(this.options.afterSetDimensions, [this]);\n      }\n    }, {\n      key: \"_callHooks\",\n      value: function _callHooks(t) {\n        var e = this;\n        e.chart.notifyPlugins(t, e.getContext()), Q(e.options[t], [e]);\n      }\n    }, {\n      key: \"beforeDataLimits\",\n      value: function beforeDataLimits() {\n        this._callHooks(\"beforeDataLimits\");\n      }\n    }, {\n      key: \"determineDataLimits\",\n      value: function determineDataLimits() {}\n    }, {\n      key: \"afterDataLimits\",\n      value: function afterDataLimits() {\n        this._callHooks(\"afterDataLimits\");\n      }\n    }, {\n      key: \"beforeBuildTicks\",\n      value: function beforeBuildTicks() {\n        this._callHooks(\"beforeBuildTicks\");\n      }\n    }, {\n      key: \"buildTicks\",\n      value: function buildTicks() {\n        return [];\n      }\n    }, {\n      key: \"afterBuildTicks\",\n      value: function afterBuildTicks() {\n        this._callHooks(\"afterBuildTicks\");\n      }\n    }, {\n      key: \"beforeTickToLabelConversion\",\n      value: function beforeTickToLabelConversion() {\n        Q(this.options.beforeTickToLabelConversion, [this]);\n      }\n    }, {\n      key: \"generateTickLabels\",\n      value: function generateTickLabels(t) {\n        var e = this,\n            i = e.options.ticks;\n        var n, o, s;\n\n        for (n = 0, o = t.length; n < o; n++) {\n          s = t[n], s.label = Q(i.callback, [s.value, n, t], e);\n        }\n      }\n    }, {\n      key: \"afterTickToLabelConversion\",\n      value: function afterTickToLabelConversion() {\n        Q(this.options.afterTickToLabelConversion, [this]);\n      }\n    }, {\n      key: \"beforeCalculateLabelRotation\",\n      value: function beforeCalculateLabelRotation() {\n        Q(this.options.beforeCalculateLabelRotation, [this]);\n      }\n    }, {\n      key: \"calculateLabelRotation\",\n      value: function calculateLabelRotation() {\n        var t = this,\n            e = t.options,\n            i = e.ticks,\n            n = t.ticks.length,\n            o = i.minRotation || 0,\n            s = i.maxRotation;\n        var a,\n            r,\n            l,\n            c = o;\n        if (!t._isVisible() || !i.display || o >= s || n <= 1 || !t.isHorizontal()) return void (t.labelRotation = o);\n\n        var h = t._getLabelSizes(),\n            d = h.widest.width,\n            u = h.highest.height,\n            f = Ht(t.chart.width - d, 0, t.maxWidth);\n\n        a = e.offset ? t.maxWidth / n : f / (n - 1), d + 6 > a && (a = f / (n - (e.offset ? .5 : 1)), r = t.maxHeight - Yi(e.grid) - i.padding - Ui(e.title, t.chart.options.font), l = Math.sqrt(d * d + u * u), c = zt(Math.min(Math.asin(Math.min((h.highest.height + 6) / a, 1)), Math.asin(Math.min(r / l, 1)) - Math.asin(u / l))), c = Math.max(o, Math.min(s, c))), t.labelRotation = c;\n      }\n    }, {\n      key: \"afterCalculateLabelRotation\",\n      value: function afterCalculateLabelRotation() {\n        Q(this.options.afterCalculateLabelRotation, [this]);\n      }\n    }, {\n      key: \"beforeFit\",\n      value: function beforeFit() {\n        Q(this.options.beforeFit, [this]);\n      }\n    }, {\n      key: \"fit\",\n      value: function fit() {\n        var t = this,\n            e = {\n          width: 0,\n          height: 0\n        },\n            i = t.chart,\n            _t$options = t.options,\n            n = _t$options.ticks,\n            o = _t$options.title,\n            s = _t$options.grid,\n            a = t._isVisible(),\n            r = t.isHorizontal();\n\n        if (a) {\n          var _a10 = Ui(o, i.options.font);\n\n          if (r ? (e.width = t.maxWidth, e.height = Yi(s) + _a10) : (e.height = t.maxHeight, e.width = Yi(s) + _a10), n.display && t.ticks.length) {\n            var _t$_getLabelSizes = t._getLabelSizes(),\n                _i11 = _t$_getLabelSizes.first,\n                _o10 = _t$_getLabelSizes.last,\n                _s12 = _t$_getLabelSizes.widest,\n                _a11 = _t$_getLabelSizes.highest,\n                _l7 = 2 * n.padding,\n                _c6 = Et(t.labelRotation),\n                _h4 = Math.cos(_c6),\n                _d2 = Math.sin(_c6);\n\n            if (r) {\n              var _i12 = n.mirror ? 0 : _d2 * _s12.width + _h4 * _a11.height;\n\n              e.height = Math.min(t.maxHeight, e.height + _i12 + _l7);\n            } else {\n              var _i13 = n.mirror ? 0 : _h4 * _s12.width + _d2 * _a11.height;\n\n              e.width = Math.min(t.maxWidth, e.width + _i13 + _l7);\n            }\n\n            t._calculatePadding(_i11, _o10, _d2, _h4);\n          }\n        }\n\n        t._handleMargins(), r ? (t.width = t._length = i.width - t._margins.left - t._margins.right, t.height = e.height) : (t.width = e.width, t.height = t._length = i.height - t._margins.top - t._margins.bottom);\n      }\n    }, {\n      key: \"_calculatePadding\",\n      value: function _calculatePadding(t, e, i, n) {\n        var o = this,\n            _o$options = o.options,\n            _o$options$ticks = _o$options.ticks,\n            s = _o$options$ticks.align,\n            a = _o$options$ticks.padding,\n            r = _o$options.position,\n            l = 0 !== o.labelRotation,\n            c = \"top\" !== r && \"x\" === o.axis;\n\n        if (o.isHorizontal()) {\n          var _r5 = o.getPixelForTick(0) - o.left,\n              _h5 = o.right - o.getPixelForTick(o.ticks.length - 1);\n\n          var _d3 = 0,\n              _u = 0;\n          l ? c ? (_d3 = n * t.width, _u = i * e.height) : (_d3 = i * t.height, _u = n * e.width) : \"start\" === s ? _u = e.width : \"end\" === s ? _d3 = t.width : (_d3 = t.width / 2, _u = e.width / 2), o.paddingLeft = Math.max((_d3 - _r5 + a) * o.width / (o.width - _r5), 0), o.paddingRight = Math.max((_u - _h5 + a) * o.width / (o.width - _h5), 0);\n        } else {\n          var _i14 = e.height / 2,\n              _n19 = t.height / 2;\n\n          \"start\" === s ? (_i14 = 0, _n19 = t.height) : \"end\" === s && (_i14 = e.height, _n19 = 0), o.paddingTop = _i14 + a, o.paddingBottom = _n19 + a;\n        }\n      }\n    }, {\n      key: \"_handleMargins\",\n      value: function _handleMargins() {\n        var t = this;\n        t._margins && (t._margins.left = Math.max(t.paddingLeft, t._margins.left), t._margins.top = Math.max(t.paddingTop, t._margins.top), t._margins.right = Math.max(t.paddingRight, t._margins.right), t._margins.bottom = Math.max(t.paddingBottom, t._margins.bottom));\n      }\n    }, {\n      key: \"afterFit\",\n      value: function afterFit() {\n        Q(this.options.afterFit, [this]);\n      }\n    }, {\n      key: \"isHorizontal\",\n      value: function isHorizontal() {\n        var _this$options = this.options,\n            t = _this$options.axis,\n            e = _this$options.position;\n        return \"top\" === e || \"bottom\" === e || \"x\" === t;\n      }\n    }, {\n      key: \"isFullSize\",\n      value: function isFullSize() {\n        return this.options.fullSize;\n      }\n    }, {\n      key: \"_convertTicksToLabels\",\n      value: function _convertTicksToLabels(t) {\n        var e = this;\n        var i, n;\n\n        for (e.beforeTickToLabelConversion(), e.generateTickLabels(t), i = 0, n = t.length; i < n; i++) {\n          $(t[i].label) && (t.splice(i, 1), n--, i--);\n        }\n\n        e.afterTickToLabelConversion();\n      }\n    }, {\n      key: \"_getLabelSizes\",\n      value: function _getLabelSizes() {\n        var t = this;\n        var e = t._labelSizes;\n\n        if (!e) {\n          var _i15 = t.options.ticks.sampleSize;\n          var _n20 = t.ticks;\n          _i15 < _n20.length && (_n20 = ji(_n20, _i15)), t._labelSizes = e = t._computeLabelSizes(_n20, _n20.length);\n        }\n\n        return e;\n      }\n    }, {\n      key: \"_computeLabelSizes\",\n      value: function _computeLabelSizes(t, e) {\n        var i = this.ctx,\n            n = this._longestTextCache,\n            o = [],\n            s = [];\n        var a,\n            r,\n            l,\n            c,\n            h,\n            d,\n            u,\n            f,\n            g,\n            p,\n            m,\n            x = 0,\n            b = 0;\n\n        for (a = 0; a < e; ++a) {\n          if (c = t[a].label, h = this._resolveTickFontOptions(a), i.font = d = h.string, u = n[d] = n[d] || {\n            data: {},\n            gc: []\n          }, f = h.lineHeight, g = p = 0, $(c) || Y(c)) {\n            if (Y(c)) for (r = 0, l = c.length; r < l; ++r) {\n              m = c[r], $(m) || Y(m) || (g = Yt(i, u.data, u.gc, g, m), p += f);\n            }\n          } else g = Yt(i, u.data, u.gc, g, c), p = f;\n\n          o.push(g), s.push(p), x = Math.max(g, x), b = Math.max(p, b);\n        }\n\n        !function (t, e) {\n          J(t, function (t) {\n            var i = t.gc,\n                n = i.length / 2;\n            var o;\n\n            if (n > e) {\n              for (o = 0; o < n; ++o) {\n                delete t.data[i[o]];\n              }\n\n              i.splice(0, n);\n            }\n          });\n        }(n, e);\n\n        var _ = o.indexOf(x),\n            y = s.indexOf(b),\n            v = function v(t) {\n          return {\n            width: o[t] || 0,\n            height: s[t] || 0\n          };\n        };\n\n        return {\n          first: v(0),\n          last: v(e - 1),\n          widest: v(_),\n          highest: v(y),\n          widths: o,\n          heights: s\n        };\n      }\n    }, {\n      key: \"getLabelForValue\",\n      value: function getLabelForValue(t) {\n        return t;\n      }\n    }, {\n      key: \"getPixelForValue\",\n      value: function getPixelForValue(t, e) {\n        return NaN;\n      }\n    }, {\n      key: \"getValueForPixel\",\n      value: function getValueForPixel(t) {}\n    }, {\n      key: \"getPixelForTick\",\n      value: function getPixelForTick(t) {\n        var e = this.ticks;\n        return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t].value);\n      }\n    }, {\n      key: \"getPixelForDecimal\",\n      value: function getPixelForDecimal(t) {\n        var e = this;\n        e._reversePixels && (t = 1 - t);\n        var i = e._startPixel + t * e._length;\n        return jt(e._alignToPixels ? Xt(e.chart, i, 0) : i);\n      }\n    }, {\n      key: \"getDecimalForPixel\",\n      value: function getDecimalForPixel(t) {\n        var e = (t - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - e : e;\n      }\n    }, {\n      key: \"getBasePixel\",\n      value: function getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n      }\n    }, {\n      key: \"getBaseValue\",\n      value: function getBaseValue() {\n        var t = this.min,\n            e = this.max;\n        return t < 0 && e < 0 ? e : t > 0 && e > 0 ? t : 0;\n      }\n    }, {\n      key: \"getContext\",\n      value: function getContext(t) {\n        var e = this,\n            i = e.ticks || [];\n\n        if (t >= 0 && t < i.length) {\n          var _n21 = i[t];\n          return _n21.$context || (_n21.$context = function (t, e, i) {\n            return Object.assign(Object.create(t), {\n              tick: i,\n              index: e,\n              type: \"tick\"\n            });\n          }(e.getContext(), t, _n21));\n        }\n\n        return e.$context || (e.$context = (n = e.chart.getContext(), o = e, Object.assign(Object.create(n), {\n          scale: o,\n          type: \"scale\"\n        })));\n        var n, o;\n      }\n    }, {\n      key: \"_tickSize\",\n      value: function _tickSize() {\n        var t = this,\n            e = t.options.ticks,\n            i = Et(t.labelRotation),\n            n = Math.abs(Math.cos(i)),\n            o = Math.abs(Math.sin(i)),\n            s = t._getLabelSizes(),\n            a = e.autoSkipPadding || 0,\n            r = s ? s.widest.width + a : 0,\n            l = s ? s.highest.height + a : 0;\n\n        return t.isHorizontal() ? l * n > r * o ? r / n : l / o : l * o < r * n ? l / n : r / o;\n      }\n    }, {\n      key: \"_isVisible\",\n      value: function _isVisible() {\n        var t = this.options.display;\n        return \"auto\" !== t ? !!t : this.getMatchingVisibleMetas().length > 0;\n      }\n    }, {\n      key: \"_computeGridLineItems\",\n      value: function _computeGridLineItems(t) {\n        var e = this,\n            i = e.axis,\n            n = e.chart,\n            o = e.options,\n            s = o.grid,\n            a = o.position,\n            r = s.offset,\n            l = e.isHorizontal(),\n            c = e.ticks.length + (r ? 1 : 0),\n            h = Yi(s),\n            d = [],\n            u = s.setContext(e.getContext()),\n            f = u.drawBorder ? u.borderWidth : 0,\n            g = f / 2,\n            p = function p(t) {\n          return Xt(n, t, f);\n        };\n\n        var m, x, b, _, y, v, w, M, k, S, P, D;\n\n        if (\"top\" === a) m = p(e.bottom), v = e.bottom - h, M = m - g, S = p(t.top) + g, D = t.bottom;else if (\"bottom\" === a) m = p(e.top), S = t.top, D = p(t.bottom) - g, v = m + g, M = e.top + h;else if (\"left\" === a) m = p(e.right), y = e.right - h, w = m - g, k = p(t.left) + g, P = t.right;else if (\"right\" === a) m = p(e.left), k = t.left, P = p(t.right) - g, y = m + g, w = e.left + h;else if (\"x\" === i) {\n          if (\"center\" === a) m = p((t.top + t.bottom) / 2 + .5);else if (U(a)) {\n            var _t20 = Object.keys(a)[0],\n                _i16 = a[_t20];\n            m = p(e.chart.scales[_t20].getPixelForValue(_i16));\n          }\n          S = t.top, D = t.bottom, v = m + g, M = v + h;\n        } else if (\"y\" === i) {\n          if (\"center\" === a) m = p((t.left + t.right) / 2);else if (U(a)) {\n            var _t21 = Object.keys(a)[0],\n                _i17 = a[_t21];\n            m = p(e.chart.scales[_t21].getPixelForValue(_i17));\n          }\n          y = m - g, w = y - h, k = t.left, P = t.right;\n        }\n        var C = K(o.ticks.maxTicksLimit, c),\n            O = Math.max(1, Math.ceil(c / C));\n\n        for (x = 0; x < c; x += O) {\n          var _t22 = s.setContext(e.getContext(x)),\n              _i18 = _t22.lineWidth,\n              _o11 = _t22.color,\n              _a12 = s.borderDash || [],\n              _c7 = _t22.borderDashOffset,\n              _h6 = _t22.tickWidth,\n              _u2 = _t22.tickColor,\n              _f = _t22.tickBorderDash || [],\n              _g = _t22.tickBorderDashOffset;\n\n          b = $i(e, x, r), void 0 !== b && (_ = Xt(n, b, _i18), l ? y = w = k = P = _ : v = M = S = D = _, d.push({\n            tx1: y,\n            ty1: v,\n            tx2: w,\n            ty2: M,\n            x1: k,\n            y1: S,\n            x2: P,\n            y2: D,\n            width: _i18,\n            color: _o11,\n            borderDash: _a12,\n            borderDashOffset: _c7,\n            tickWidth: _h6,\n            tickColor: _u2,\n            tickBorderDash: _f,\n            tickBorderDashOffset: _g\n          }));\n        }\n\n        return e._ticksLength = c, e._borderValue = m, d;\n      }\n    }, {\n      key: \"_computeLabelItems\",\n      value: function _computeLabelItems(t) {\n        var e = this,\n            i = e.axis,\n            n = e.options,\n            o = n.position,\n            s = n.ticks,\n            a = e.isHorizontal(),\n            r = e.ticks,\n            l = s.align,\n            c = s.crossAlign,\n            h = s.padding,\n            d = s.mirror,\n            u = Yi(n.grid),\n            f = u + h,\n            g = d ? -h : f,\n            p = -Et(e.labelRotation),\n            m = [];\n\n        var x,\n            b,\n            _,\n            y,\n            v,\n            w,\n            M,\n            k,\n            S,\n            P,\n            D,\n            C,\n            O = \"middle\";\n\n        if (\"top\" === o) w = e.bottom - g, M = e._getXAxisLabelAlignment();else if (\"bottom\" === o) w = e.top + g, M = e._getXAxisLabelAlignment();else if (\"left\" === o) {\n          var _t23 = e._getYAxisLabelAlignment(u);\n\n          M = _t23.textAlign, v = _t23.x;\n        } else if (\"right\" === o) {\n          var _t24 = e._getYAxisLabelAlignment(u);\n\n          M = _t24.textAlign, v = _t24.x;\n        } else if (\"x\" === i) {\n          if (\"center\" === o) w = (t.top + t.bottom) / 2 + f;else if (U(o)) {\n            var _t25 = Object.keys(o)[0],\n                _i19 = o[_t25];\n            w = e.chart.scales[_t25].getPixelForValue(_i19) + f;\n          }\n          M = e._getXAxisLabelAlignment();\n        } else if (\"y\" === i) {\n          if (\"center\" === o) v = (t.left + t.right) / 2 - f;else if (U(o)) {\n            var _t26 = Object.keys(o)[0],\n                _i20 = o[_t26];\n            v = e.chart.scales[_t26].getPixelForValue(_i20);\n          }\n          M = e._getYAxisLabelAlignment(u).textAlign;\n        }\n        \"y\" === i && (\"start\" === l ? O = \"top\" : \"end\" === l && (O = \"bottom\"));\n\n        var T = e._getLabelSizes();\n\n        for (x = 0, b = r.length; x < b; ++x) {\n          _ = r[x], y = _.label;\n\n          var _t27 = s.setContext(e.getContext(x));\n\n          k = e.getPixelForTick(x) + s.labelOffset, S = e._resolveTickFontOptions(x), P = S.lineHeight, D = Y(y) ? y.length : 1;\n\n          var _i21 = D / 2,\n              _n22 = _t27.color,\n              _l8 = _t27.textStrokeColor,\n              _h7 = _t27.textStrokeWidth;\n\n          var _u3 = void 0;\n\n          if (a ? (v = k, C = \"top\" === o ? \"near\" === c || 0 !== p ? -D * P + P / 2 : \"center\" === c ? -T.highest.height / 2 - _i21 * P + P : -T.highest.height + P / 2 : \"near\" === c || 0 !== p ? P / 2 : \"center\" === c ? T.highest.height / 2 - _i21 * P : T.highest.height - D * P, d && (C *= -1)) : (w = k, C = (1 - D) * P / 2), _t27.showLabelBackdrop) {\n            var _e19 = Fe(_t27.backdropPadding),\n                _i22 = T.heights[x],\n                _n23 = T.widths[x];\n\n            var _o12 = w + C - _e19.top,\n                _s13 = v - _e19.left;\n\n            switch (O) {\n              case \"middle\":\n                _o12 -= _i22 / 2;\n                break;\n\n              case \"bottom\":\n                _o12 -= _i22;\n            }\n\n            switch (M) {\n              case \"center\":\n                _s13 -= _n23 / 2;\n                break;\n\n              case \"right\":\n                _s13 -= _n23;\n            }\n\n            _u3 = {\n              left: _s13,\n              top: _o12,\n              width: _n23 + _e19.width,\n              height: _i22 + _e19.height,\n              color: _t27.backdropColor\n            };\n          }\n\n          m.push({\n            rotation: p,\n            label: y,\n            font: S,\n            color: _n22,\n            strokeColor: _l8,\n            strokeWidth: _h7,\n            textOffset: C,\n            textAlign: M,\n            textBaseline: O,\n            translation: [v, w],\n            backdrop: _u3\n          });\n        }\n\n        return m;\n      }\n    }, {\n      key: \"_getXAxisLabelAlignment\",\n      value: function _getXAxisLabelAlignment() {\n        var _this$options2 = this.options,\n            t = _this$options2.position,\n            e = _this$options2.ticks;\n        if (-Et(this.labelRotation)) return \"top\" === t ? \"left\" : \"right\";\n        var i = \"center\";\n        return \"start\" === e.align ? i = \"left\" : \"end\" === e.align && (i = \"right\"), i;\n      }\n    }, {\n      key: \"_getYAxisLabelAlignment\",\n      value: function _getYAxisLabelAlignment(t) {\n        var e = this,\n            _e$options = e.options,\n            i = _e$options.position,\n            _e$options$ticks = _e$options.ticks,\n            n = _e$options$ticks.crossAlign,\n            o = _e$options$ticks.mirror,\n            s = _e$options$ticks.padding,\n            a = t + s,\n            r = e._getLabelSizes().widest.width;\n\n        var l, c;\n        return \"left\" === i ? o ? (l = \"left\", c = e.right + s) : (c = e.right - a, \"near\" === n ? l = \"right\" : \"center\" === n ? (l = \"center\", c -= r / 2) : (l = \"left\", c = e.left)) : \"right\" === i ? o ? (l = \"right\", c = e.left + s) : (c = e.left + a, \"near\" === n ? l = \"left\" : \"center\" === n ? (l = \"center\", c += r / 2) : (l = \"right\", c = e.right)) : l = \"right\", {\n          textAlign: l,\n          x: c\n        };\n      }\n    }, {\n      key: \"_computeLabelArea\",\n      value: function _computeLabelArea() {\n        var t = this;\n        if (t.options.ticks.mirror) return;\n        var e = t.chart,\n            i = t.options.position;\n        return \"left\" === i || \"right\" === i ? {\n          top: 0,\n          left: t.left,\n          bottom: e.height,\n          right: t.right\n        } : \"top\" === i || \"bottom\" === i ? {\n          top: t.top,\n          left: 0,\n          bottom: t.bottom,\n          right: e.width\n        } : void 0;\n      }\n    }, {\n      key: \"drawBackground\",\n      value: function drawBackground() {\n        var t = this.ctx,\n            e = this.options.backgroundColor,\n            i = this.left,\n            n = this.top,\n            o = this.width,\n            s = this.height;\n        e && (t.save(), t.fillStyle = e, t.fillRect(i, n, o, s), t.restore());\n      }\n    }, {\n      key: \"getLineWidthForValue\",\n      value: function getLineWidthForValue(t) {\n        var e = this,\n            i = e.options.grid;\n        if (!e._isVisible() || !i.display) return 0;\n        var n = e.ticks.findIndex(function (e) {\n          return e.value === t;\n        });\n\n        if (n >= 0) {\n          return i.setContext(e.getContext(n)).lineWidth;\n        }\n\n        return 0;\n      }\n    }, {\n      key: \"drawGrid\",\n      value: function drawGrid(t) {\n        var e = this,\n            i = e.options.grid,\n            n = e.ctx,\n            o = e._gridLineItems || (e._gridLineItems = e._computeGridLineItems(t));\n\n        var s, a;\n\n        var r = function r(t, e, i) {\n          i.width && i.color && (n.save(), n.lineWidth = i.width, n.strokeStyle = i.color, n.setLineDash(i.borderDash || []), n.lineDashOffset = i.borderDashOffset, n.beginPath(), n.moveTo(t.x, t.y), n.lineTo(e.x, e.y), n.stroke(), n.restore());\n        };\n\n        if (i.display) for (s = 0, a = o.length; s < a; ++s) {\n          var _t28 = o[s];\n          i.drawOnChartArea && r({\n            x: _t28.x1,\n            y: _t28.y1\n          }, {\n            x: _t28.x2,\n            y: _t28.y2\n          }, _t28), i.drawTicks && r({\n            x: _t28.tx1,\n            y: _t28.ty1\n          }, {\n            x: _t28.tx2,\n            y: _t28.ty2\n          }, {\n            color: _t28.tickColor,\n            width: _t28.tickWidth,\n            borderDash: _t28.tickBorderDash,\n            borderDashOffset: _t28.tickBorderDashOffset\n          });\n        }\n      }\n    }, {\n      key: \"drawBorder\",\n      value: function drawBorder() {\n        var t = this,\n            e = t.chart,\n            i = t.ctx,\n            n = t.options.grid,\n            o = n.setContext(t.getContext()),\n            s = n.drawBorder ? o.borderWidth : 0;\n        if (!s) return;\n        var a = n.setContext(t.getContext(0)).lineWidth,\n            r = t._borderValue;\n        var l, c, h, d;\n        t.isHorizontal() ? (l = Xt(e, t.left, s) - s / 2, c = Xt(e, t.right, a) + a / 2, h = d = r) : (h = Xt(e, t.top, s) - s / 2, d = Xt(e, t.bottom, a) + a / 2, l = c = r), i.save(), i.lineWidth = o.borderWidth, i.strokeStyle = o.borderColor, i.beginPath(), i.moveTo(l, h), i.lineTo(c, d), i.stroke(), i.restore();\n      }\n    }, {\n      key: \"drawLabels\",\n      value: function drawLabels(t) {\n        var e = this;\n        if (!e.options.ticks.display) return;\n\n        var i = e.ctx,\n            n = e._computeLabelArea();\n\n        n && Zt(i, n);\n\n        var o = e._labelItems || (e._labelItems = e._computeLabelItems(t));\n\n        var s, a;\n\n        for (s = 0, a = o.length; s < a; ++s) {\n          var _t29 = o[s],\n              _e20 = _t29.font,\n              _n24 = _t29.label;\n          _t29.backdrop && (i.fillStyle = _t29.backdrop.color, i.fillRect(_t29.backdrop.left, _t29.backdrop.top, _t29.backdrop.width, _t29.backdrop.height)), ee(i, _n24, 0, _t29.textOffset, _e20, _t29);\n        }\n\n        n && Qt(i);\n      }\n    }, {\n      key: \"drawTitle\",\n      value: function drawTitle() {\n        var t = this.ctx,\n            _this$options3 = this.options,\n            e = _this$options3.position,\n            i = _this$options3.title,\n            n = _this$options3.reverse;\n        if (!i.display) return;\n        var s = Be(i.font),\n            a = Fe(i.padding),\n            r = i.align;\n        var l = s.lineHeight / 2;\n        \"bottom\" === e ? (l += a.bottom, Y(i.text) && (l += s.lineHeight * (i.text.length - 1))) : l += a.top;\n\n        var _ref3 = function (t, e, i, n) {\n          var s = t.top,\n              a = t.left,\n              r = t.bottom,\n              l = t.right;\n          var c,\n              h,\n              d,\n              u = 0;\n          return t.isHorizontal() ? (h = o(n, a, l), d = Hi(t, i, e), c = l - a) : (h = Hi(t, i, e), d = o(n, r, s), u = \"left\" === i ? -Mt : Mt), {\n            titleX: h,\n            titleY: d,\n            maxWidth: c,\n            rotation: u\n          };\n        }(this, l, e, r),\n            c = _ref3.titleX,\n            h = _ref3.titleY,\n            d = _ref3.maxWidth,\n            u = _ref3.rotation;\n\n        ee(t, i.text, 0, 0, s, {\n          color: i.color,\n          maxWidth: d,\n          rotation: u,\n          textAlign: Xi(r, e, n),\n          textBaseline: \"middle\",\n          translation: [c, h]\n        });\n      }\n    }, {\n      key: \"draw\",\n      value: function draw(t) {\n        var e = this;\n        e._isVisible() && (e.drawBackground(), e.drawGrid(t), e.drawBorder(), e.drawTitle(), e.drawLabels(t));\n      }\n    }, {\n      key: \"_layers\",\n      value: function _layers() {\n        var t = this,\n            e = t.options,\n            i = e.ticks && e.ticks.z || 0,\n            n = e.grid && e.grid.z || 0;\n        return t._isVisible() && t.draw === qi.prototype.draw ? [{\n          z: n,\n          draw: function draw(e) {\n            t.drawBackground(), t.drawGrid(e), t.drawTitle();\n          }\n        }, {\n          z: n + 1,\n          draw: function draw() {\n            t.drawBorder();\n          }\n        }, {\n          z: i,\n          draw: function draw(e) {\n            t.drawLabels(e);\n          }\n        }] : [{\n          z: i,\n          draw: function draw(e) {\n            t.draw(e);\n          }\n        }];\n      }\n    }, {\n      key: \"getMatchingVisibleMetas\",\n      value: function getMatchingVisibleMetas(t) {\n        var e = this,\n            i = e.chart.getSortedVisibleDatasetMetas(),\n            n = e.axis + \"AxisID\",\n            o = [];\n        var s, a;\n\n        for (s = 0, a = i.length; s < a; ++s) {\n          var _a13 = i[s];\n          _a13[n] !== e.id || t && _a13.type !== t || o.push(_a13);\n        }\n\n        return o;\n      }\n    }, {\n      key: \"_resolveTickFontOptions\",\n      value: function _resolveTickFontOptions(t) {\n        return Be(this.options.ticks.setContext(this.getContext(t)).font);\n      }\n    }, {\n      key: \"_maxDigits\",\n      value: function _maxDigits() {\n        var t = this,\n            e = t._resolveTickFontOptions(0).lineHeight;\n\n        return (t.isHorizontal() ? t.width : t.height) / e;\n      }\n    }]);\n\n    return qi;\n  }(zi);\n\n  function Ki(t) {\n    var _s14;\n\n    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [\"\"];\n    var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : t;\n    var n = arguments.length > 3 ? arguments[3] : undefined;\n    var o = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {\n      return t[0];\n    };\n    ht(n) || (n = rn(\"_fallback\", t));\n    var s = (_s14 = {}, _defineProperty(_s14, Symbol.toStringTag, \"Object\"), _defineProperty(_s14, \"_cacheable\", !0), _defineProperty(_s14, \"_scopes\", t), _defineProperty(_s14, \"_rootScopes\", i), _defineProperty(_s14, \"_fallback\", n), _defineProperty(_s14, \"_getTarget\", o), _defineProperty(_s14, \"override\", function override(o) {\n      return Ki([o].concat(_toConsumableArray(t)), e, i, n);\n    }), _s14);\n    return new Proxy(s, {\n      deleteProperty: function deleteProperty(e, i) {\n        return delete e[i], delete e._keys, delete t[0][i], !0;\n      },\n      get: function get(i, n) {\n        return tn(i, n, function () {\n          return function (t, e, i, n) {\n            var o;\n\n            var _iterator7 = _createForOfIteratorHelper(e),\n                _step7;\n\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var _s15 = _step7.value;\n                if (o = rn(Qi(_s15, t), i), ht(o)) return Ji(t, o) ? sn(i, n, t, o) : o;\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n          }(n, e, t, i);\n        });\n      },\n      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(t, e) {\n        return Reflect.getOwnPropertyDescriptor(t._scopes[0], e);\n      },\n      getPrototypeOf: function getPrototypeOf() {\n        return Reflect.getPrototypeOf(t[0]);\n      },\n      has: function has(t, e) {\n        return ln(t).includes(e);\n      },\n      ownKeys: function ownKeys(t) {\n        return ln(t);\n      },\n      set: function set(t, e, i) {\n        return (t._storage || (t._storage = o()))[e] = i, delete t[e], delete t._keys, !0;\n      }\n    });\n  }\n\n  function Gi(t, e, i, n) {\n    var o = {\n      _cacheable: !1,\n      _proxy: t,\n      _context: e,\n      _subProxy: i,\n      _stack: new Set(),\n      _descriptors: Zi(t, n),\n      setContext: function setContext(e) {\n        return Gi(t, e, i, n);\n      },\n      override: function override(o) {\n        return Gi(t.override(o), e, i, n);\n      }\n    };\n    return new Proxy(o, {\n      deleteProperty: function deleteProperty(e, i) {\n        return delete e[i], delete t[i], !0;\n      },\n      get: function get(t, e, i) {\n        return tn(t, e, function () {\n          return function (t, e, i) {\n            var n = t._proxy,\n                o = t._context,\n                s = t._subProxy,\n                a = t._descriptors;\n            var r = n[e];\n            dt(r) && a.isScriptable(e) && (r = function (t, e, i, n) {\n              var o = i._proxy,\n                  s = i._context,\n                  a = i._subProxy,\n                  r = i._stack;\n              if (r.has(t)) throw new Error(\"Recursion detected: \" + Array.from(r).join(\"->\") + \"->\" + t);\n              r.add(t), e = e(s, a || n), r[\"delete\"](t), U(e) && (e = sn(o._scopes, o, t, e));\n              return e;\n            }(e, r, t, i));\n            Y(r) && r.length && (r = function (t, e, i, n) {\n              var o = i._proxy,\n                  s = i._context,\n                  a = i._subProxy,\n                  r = i._descriptors;\n              if (ht(s.index) && n(t)) e = e[s.index % e.length];else if (U(e[0])) {\n                var _i23 = e,\n                    _n25 = o._scopes.filter(function (t) {\n                  return t !== _i23;\n                });\n\n                e = [];\n\n                var _iterator8 = _createForOfIteratorHelper(_i23),\n                    _step8;\n\n                try {\n                  for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                    var _l9 = _step8.value;\n\n                    var _i24 = sn(_n25, o, t, _l9);\n\n                    e.push(Gi(_i24, s, a && a[t], r));\n                  }\n                } catch (err) {\n                  _iterator8.e(err);\n                } finally {\n                  _iterator8.f();\n                }\n              }\n              return e;\n            }(e, r, t, a.isIndexable));\n            Ji(e, r) && (r = Gi(r, o, s && s[e], a));\n            return r;\n          }(t, e, i);\n        });\n      },\n      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(e, i) {\n        return e._descriptors.allKeys ? Reflect.has(t, i) ? {\n          enumerable: !0,\n          configurable: !0\n        } : void 0 : Reflect.getOwnPropertyDescriptor(t, i);\n      },\n      getPrototypeOf: function getPrototypeOf() {\n        return Reflect.getPrototypeOf(t);\n      },\n      has: function has(e, i) {\n        return Reflect.has(t, i);\n      },\n      ownKeys: function ownKeys() {\n        return Reflect.ownKeys(t);\n      },\n      set: function set(e, i, n) {\n        return t[i] = n, delete e[i], !0;\n      }\n    });\n  }\n\n  function Zi(t) {\n    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      scriptable: !0,\n      indexable: !0\n    };\n    var _t$_scriptable = t._scriptable,\n        i = _t$_scriptable === void 0 ? e.scriptable : _t$_scriptable,\n        _t$_indexable = t._indexable,\n        n = _t$_indexable === void 0 ? e.indexable : _t$_indexable,\n        _t$_allKeys = t._allKeys,\n        o = _t$_allKeys === void 0 ? e.allKeys : _t$_allKeys;\n    return {\n      allKeys: o,\n      scriptable: i,\n      indexable: n,\n      isScriptable: dt(i) ? i : function () {\n        return i;\n      },\n      isIndexable: dt(n) ? n : function () {\n        return n;\n      }\n    };\n  }\n\n  var Qi = function Qi(t, e) {\n    return t ? t + ct(e) : e;\n  },\n      Ji = function Ji(t, e) {\n    return U(e) && \"adapters\" !== t;\n  };\n\n  function tn(t, e, i) {\n    var n = t[e];\n    return ht(n) || (n = i(), ht(n) && (t[e] = n)), n;\n  }\n\n  function en(t, e, i) {\n    return dt(t) ? t(e, i) : t;\n  }\n\n  var nn = function nn(t, e) {\n    return !0 === t ? e : \"string\" == typeof t ? lt(e, t) : void 0;\n  };\n\n  function on(t, e, i, n) {\n    var _iterator9 = _createForOfIteratorHelper(e),\n        _step9;\n\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var _o13 = _step9.value;\n\n        var _e21 = nn(i, _o13);\n\n        if (_e21) {\n          t.add(_e21);\n\n          var _o14 = en(_e21._fallback, i, _e21);\n\n          if (ht(_o14) && _o14 !== i && _o14 !== n) return _o14;\n        } else if (!1 === _e21 && ht(n) && i !== n) return null;\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n\n    return !1;\n  }\n\n  function sn(t, e, i, n) {\n    var o = e._rootScopes,\n        s = en(e._fallback, i, n),\n        a = [].concat(_toConsumableArray(t), _toConsumableArray(o)),\n        r = new Set();\n    r.add(n);\n    var l = an(r, a, i, s || i);\n    return null !== l && (!ht(s) || s === i || (l = an(r, a, s, l), null !== l)) && Ki(Array.from(r), [\"\"], o, s, function () {\n      return function (t, e, i) {\n        var n = t._getTarget();\n\n        e in n || (n[e] = {});\n        var o = n[e];\n        if (Y(o) && U(i)) return i;\n        return o;\n      }(e, i, n);\n    });\n  }\n\n  function an(t, e, i, n) {\n    for (; i;) {\n      i = on(t, e, i, n);\n    }\n\n    return i;\n  }\n\n  function rn(t, e) {\n    var _iterator10 = _createForOfIteratorHelper(e),\n        _step10;\n\n    try {\n      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n        var _i25 = _step10.value;\n        if (!_i25) continue;\n        var _e22 = _i25[t];\n        if (ht(_e22)) return _e22;\n      }\n    } catch (err) {\n      _iterator10.e(err);\n    } finally {\n      _iterator10.f();\n    }\n  }\n\n  function ln(t) {\n    var e = t._keys;\n    return e || (e = t._keys = function (t) {\n      var e = new Set();\n\n      var _iterator11 = _createForOfIteratorHelper(t),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var _i26 = _step11.value;\n\n          var _iterator12 = _createForOfIteratorHelper(Object.keys(_i26).filter(function (t) {\n            return !t.startsWith(\"_\");\n          })),\n              _step12;\n\n          try {\n            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n              var _t30 = _step12.value;\n              e.add(_t30);\n            }\n          } catch (err) {\n            _iterator12.e(err);\n          } finally {\n            _iterator12.f();\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      return Array.from(e);\n    }(t._scopes)), e;\n  }\n\n  var cn = Number.EPSILON || 1e-14,\n      hn = function hn(t, e) {\n    return e < t.length && !t[e].skip && t[e];\n  },\n      dn = function dn(t) {\n    return \"x\" === t ? \"y\" : \"x\";\n  };\n\n  function un(t, e, i, n) {\n    var o = t.skip ? e : t,\n        s = e,\n        a = i.skip ? e : i,\n        r = Bt(s, o),\n        l = Bt(a, s);\n    var c = r / (r + l),\n        h = l / (r + l);\n    c = isNaN(c) ? 0 : c, h = isNaN(h) ? 0 : h;\n    var d = n * c,\n        u = n * h;\n    return {\n      previous: {\n        x: s.x - d * (a.x - o.x),\n        y: s.y - d * (a.y - o.y)\n      },\n      next: {\n        x: s.x + u * (a.x - o.x),\n        y: s.y + u * (a.y - o.y)\n      }\n    };\n  }\n\n  function fn(t) {\n    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"x\";\n    var i = dn(e),\n        n = t.length,\n        o = Array(n).fill(0),\n        s = Array(n);\n    var a,\n        r,\n        l,\n        c = hn(t, 0);\n\n    for (a = 0; a < n; ++a) {\n      if (r = l, l = c, c = hn(t, a + 1), l) {\n        if (c) {\n          var _t31 = c[e] - l[e];\n\n          o[a] = 0 !== _t31 ? (c[i] - l[i]) / _t31 : 0;\n        }\n\n        s[a] = r ? c ? Dt(o[a - 1]) !== Dt(o[a]) ? 0 : (o[a - 1] + o[a]) / 2 : o[a - 1] : o[a];\n      }\n    }\n\n    !function (t, e, i) {\n      var n = t.length;\n      var o,\n          s,\n          a,\n          r,\n          l,\n          c = hn(t, 0);\n\n      for (var _h8 = 0; _h8 < n - 1; ++_h8) {\n        l = c, c = hn(t, _h8 + 1), l && c && (At(e[_h8], 0, cn) ? i[_h8] = i[_h8 + 1] = 0 : (o = i[_h8] / e[_h8], s = i[_h8 + 1] / e[_h8], r = Math.pow(o, 2) + Math.pow(s, 2), r <= 9 || (a = 3 / Math.sqrt(r), i[_h8] = o * a * e[_h8], i[_h8 + 1] = s * a * e[_h8])));\n      }\n    }(t, o, s), function (t, e) {\n      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"x\";\n      var n = dn(i),\n          o = t.length;\n      var s,\n          a,\n          r,\n          l = hn(t, 0);\n\n      for (var _c8 = 0; _c8 < o; ++_c8) {\n        if (a = r, r = l, l = hn(t, _c8 + 1), !r) continue;\n        var _o15 = r[i],\n            _h9 = r[n];\n        a && (s = (_o15 - a[i]) / 3, r[\"cp1\".concat(i)] = _o15 - s, r[\"cp1\".concat(n)] = _h9 - s * e[_c8]), l && (s = (l[i] - _o15) / 3, r[\"cp2\".concat(i)] = _o15 + s, r[\"cp2\".concat(n)] = _h9 + s * e[_c8]);\n      }\n    }(t, s, e);\n  }\n\n  function gn(t, e, i) {\n    return Math.max(Math.min(t, i), e);\n  }\n\n  function pn(t, e, i, n, o) {\n    var s, a, r, l;\n    if (e.spanGaps && (t = t.filter(function (t) {\n      return !t.skip;\n    })), \"monotone\" === e.cubicInterpolationMode) fn(t, o);else {\n      var _i27 = n ? t[t.length - 1] : t[0];\n\n      for (s = 0, a = t.length; s < a; ++s) {\n        r = t[s], l = un(_i27, r, t[Math.min(s + 1, a - (n ? 0 : 1)) % a], e.tension), r.cp1x = l.previous.x, r.cp1y = l.previous.y, r.cp2x = l.next.x, r.cp2y = l.next.y, _i27 = r;\n      }\n    }\n    e.capBezierPoints && function (t, e) {\n      var i,\n          n,\n          o,\n          s,\n          a,\n          r = Gt(t[0], e);\n\n      for (i = 0, n = t.length; i < n; ++i) {\n        a = s, s = r, r = i < n - 1 && Gt(t[i + 1], e), s && (o = t[i], a && (o.cp1x = gn(o.cp1x, e.left, e.right), o.cp1y = gn(o.cp1y, e.top, e.bottom)), r && (o.cp2x = gn(o.cp2x, e.left, e.right), o.cp2y = gn(o.cp2y, e.top, e.bottom)));\n      }\n    }(t, i);\n  }\n\n  function mn(t, e, i, n) {\n    return {\n      x: t.x + i * (e.x - t.x),\n      y: t.y + i * (e.y - t.y)\n    };\n  }\n\n  function xn(t, e, i, n) {\n    return {\n      x: t.x + i * (e.x - t.x),\n      y: \"middle\" === n ? i < .5 ? t.y : e.y : \"after\" === n ? i < 1 ? t.y : e.y : i > 0 ? e.y : t.y\n    };\n  }\n\n  function bn(t, e, i, n) {\n    var o = {\n      x: t.cp2x,\n      y: t.cp2y\n    },\n        s = {\n      x: e.cp1x,\n      y: e.cp1y\n    },\n        a = mn(t, o, i),\n        r = mn(o, s, i),\n        l = mn(s, e, i),\n        c = mn(a, r, i),\n        h = mn(r, l, i);\n    return mn(c, h, i);\n  }\n\n  function _n(t, e, i) {\n    return t ? function (t, e) {\n      return {\n        x: function x(i) {\n          return t + t + e - i;\n        },\n        setWidth: function setWidth(t) {\n          e = t;\n        },\n        textAlign: function textAlign(t) {\n          return \"center\" === t ? t : \"right\" === t ? \"left\" : \"right\";\n        },\n        xPlus: function xPlus(t, e) {\n          return t - e;\n        },\n        leftForLtr: function leftForLtr(t, e) {\n          return t - e;\n        }\n      };\n    }(e, i) : {\n      x: function x(t) {\n        return t;\n      },\n      setWidth: function setWidth(t) {},\n      textAlign: function textAlign(t) {\n        return t;\n      },\n      xPlus: function xPlus(t, e) {\n        return t + e;\n      },\n      leftForLtr: function leftForLtr(t, e) {\n        return t;\n      }\n    };\n  }\n\n  function yn(t, e) {\n    var i, n;\n    \"ltr\" !== e && \"rtl\" !== e || (i = t.canvas.style, n = [i.getPropertyValue(\"direction\"), i.getPropertyPriority(\"direction\")], i.setProperty(\"direction\", e, \"important\"), t.prevTextDirection = n);\n  }\n\n  function vn(t, e) {\n    void 0 !== e && (delete t.prevTextDirection, t.canvas.style.setProperty(\"direction\", e[0], e[1]));\n  }\n\n  function wn(t) {\n    return \"angle\" === t ? {\n      between: Nt,\n      compare: Vt,\n      normalize: Wt\n    } : {\n      between: function between(t, e, i) {\n        return t >= Math.min(e, i) && t <= Math.max(i, e);\n      },\n      compare: function compare(t, e) {\n        return t - e;\n      },\n      normalize: function normalize(t) {\n        return t;\n      }\n    };\n  }\n\n  function Mn(_ref4) {\n    var t = _ref4.start,\n        e = _ref4.end,\n        i = _ref4.count,\n        n = _ref4.loop,\n        o = _ref4.style;\n    return {\n      start: t % i,\n      end: e % i,\n      loop: n && (e - t + 1) % i == 0,\n      style: o\n    };\n  }\n\n  function kn(t, e, i) {\n    if (!i) return [t];\n\n    var n = i.property,\n        o = i.start,\n        s = i.end,\n        a = e.length,\n        _wn = wn(n),\n        r = _wn.compare,\n        l = _wn.between,\n        c = _wn.normalize,\n        _ref5 = function (t, e, i) {\n      var n = i.property,\n          o = i.start,\n          s = i.end,\n          _wn2 = wn(n),\n          a = _wn2.between,\n          r = _wn2.normalize,\n          l = e.length;\n\n      var c,\n          h,\n          d = t.start,\n          u = t.end,\n          f = t.loop;\n\n      if (f) {\n        for (d += l, u += l, c = 0, h = l; c < h && a(r(e[d % l][n]), o, s); ++c) {\n          d--, u--;\n        }\n\n        d %= l, u %= l;\n      }\n\n      return u < d && (u += l), {\n        start: d,\n        end: u,\n        loop: f,\n        style: t.style\n      };\n    }(t, e, i),\n        h = _ref5.start,\n        d = _ref5.end,\n        u = _ref5.loop,\n        f = _ref5.style,\n        g = [];\n\n    var p,\n        m,\n        x,\n        b = !1,\n        _ = null;\n\n    var y = function y() {\n      return b || l(o, x, p) && 0 !== r(o, x);\n    },\n        v = function v() {\n      return !b || 0 === r(s, p) || l(s, x, p);\n    };\n\n    for (var _t32 = h, _i28 = h; _t32 <= d; ++_t32) {\n      m = e[_t32 % a], m.skip || (p = c(m[n]), p !== x && (b = l(p, o, s), null === _ && y() && (_ = 0 === r(p, o) ? _t32 : _i28), null !== _ && v() && (g.push(Mn({\n        start: _,\n        end: _t32,\n        loop: u,\n        count: a,\n        style: f\n      })), _ = null), _i28 = _t32, x = p));\n    }\n\n    return null !== _ && g.push(Mn({\n      start: _,\n      end: d,\n      loop: u,\n      count: a,\n      style: f\n    })), g;\n  }\n\n  function Sn(t, e) {\n    var i = [],\n        n = t.segments;\n\n    for (var _o16 = 0; _o16 < n.length; _o16++) {\n      var _s16 = kn(n[_o16], t.points, e);\n\n      _s16.length && i.push.apply(i, _toConsumableArray(_s16));\n    }\n\n    return i;\n  }\n\n  function Pn(t, e) {\n    var i = t.points,\n        n = t.options.spanGaps,\n        o = i.length;\n    if (!o) return [];\n\n    var s = !!t._loop,\n        _ref6 = function (t, e, i, n) {\n      var o = 0,\n          s = e - 1;\n      if (i && !n) for (; o < e && !t[o].skip;) {\n        o++;\n      }\n\n      for (; o < e && t[o].skip;) {\n        o++;\n      }\n\n      for (o %= e, i && (s += o); s > o && t[s % e].skip;) {\n        s--;\n      }\n\n      return s %= e, {\n        start: o,\n        end: s\n      };\n    }(i, o, s, n),\n        a = _ref6.start,\n        r = _ref6.end;\n\n    if (!0 === n) return Dn([{\n      start: a,\n      end: r,\n      loop: s\n    }], i, e);\n    return Dn(function (t, e, i, n) {\n      var o = t.length,\n          s = [];\n      var a,\n          r = e,\n          l = t[e];\n\n      for (a = e + 1; a <= i; ++a) {\n        var _i29 = t[a % o];\n        _i29.skip || _i29.stop ? l.skip || (n = !1, s.push({\n          start: e % o,\n          end: (a - 1) % o,\n          loop: n\n        }), e = r = _i29.stop ? a : null) : (r = a, l.skip && (e = a)), l = _i29;\n      }\n\n      return null !== r && s.push({\n        start: e % o,\n        end: r % o,\n        loop: n\n      }), s;\n    }(i, a, r < a ? r + o : r, !!t._fullLoop && 0 === a && r === o - 1), i, e);\n  }\n\n  function Dn(t, e, i) {\n    return i && i.setContext && e ? function (t, e, i) {\n      var n = e.length,\n          o = [];\n      var s = t[0].start,\n          a = s;\n\n      var _iterator13 = _createForOfIteratorHelper(t),\n          _step13;\n\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var _r6 = _step13.value;\n\n          var _t33 = void 0,\n              _l10 = void 0,\n              _c9 = e[s % n];\n\n          for (a = s + 1; a <= _r6.end; a++) {\n            var _h10 = e[a % n];\n            _l10 = Cn(i.setContext({\n              type: \"segment\",\n              p0: _c9,\n              p1: _h10\n            })), On(_l10, _t33) && (o.push({\n              start: s,\n              end: a - 1,\n              loop: _r6.loop,\n              style: _t33\n            }), _t33 = _l10, s = a - 1), _c9 = _h10, _t33 = _l10;\n          }\n\n          s < a - 1 && (o.push({\n            start: s,\n            end: a - 1,\n            loop: _r6.loop,\n            style: _l10\n          }), s = a - 1);\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n\n      return o;\n    }(t, e, i) : t;\n  }\n\n  function Cn(t) {\n    return {\n      backgroundColor: t.backgroundColor,\n      borderCapStyle: t.borderCapStyle,\n      borderDash: t.borderDash,\n      borderDashOffset: t.borderDashOffset,\n      borderJoinStyle: t.borderJoinStyle,\n      borderWidth: t.borderWidth,\n      borderColor: t.borderColor\n    };\n  }\n\n  function On(t, e) {\n    return e && JSON.stringify(t) !== JSON.stringify(e);\n  }\n\n  var Tn = Object.freeze({\n    __proto__: null,\n    easingEffects: xi,\n    color: W,\n    getHoverColor: N,\n    noop: H,\n    uid: j,\n    isNullOrUndef: $,\n    isArray: Y,\n    isObject: U,\n    isFinite: X,\n    finiteOrDefault: q,\n    valueOrDefault: K,\n    toPercentage: G,\n    toDimension: Z,\n    callback: Q,\n    each: J,\n    _elementsEqual: tt,\n    clone: et,\n    _merger: nt,\n    merge: ot,\n    mergeIf: st,\n    _mergerIf: at,\n    _deprecated: function _deprecated(t, e, i, n) {\n      void 0 !== e && console.warn(t + ': \"' + i + '\" is deprecated. Please use \"' + n + '\" instead');\n    },\n    resolveObjectKey: lt,\n    _capitalize: ct,\n    defined: ht,\n    isFunction: dt,\n    setsEqual: ut,\n    toFontString: $t,\n    _measureText: Yt,\n    _longestText: Ut,\n    _alignPixel: Xt,\n    clearCanvas: qt,\n    drawPoint: Kt,\n    _isPointInArea: Gt,\n    clipArea: Zt,\n    unclipArea: Qt,\n    _steppedLineTo: Jt,\n    _bezierCurveTo: te,\n    renderText: ee,\n    addRoundedRectPath: ne,\n    _lookup: oe,\n    _lookupByKey: se,\n    _rlookupByKey: ae,\n    _filterBetween: re,\n    listenArrayEvents: ce,\n    unlistenArrayEvents: he,\n    _arrayUnique: de,\n    _createResolver: Ki,\n    _attachContext: Gi,\n    _descriptors: Zi,\n    splineCurve: un,\n    splineCurveMonotone: fn,\n    _updateBezierControlPoints: pn,\n    _getParentNode: ue,\n    getStyle: pe,\n    getRelativePosition: be,\n    getMaximumSize: ye,\n    retinaScale: ve,\n    supportsEventListenerOptions: we,\n    readUsedSize: Me,\n    fontString: function fontString(t, e, i) {\n      return e + \" \" + t + \"px \" + i;\n    },\n    requestAnimFrame: t,\n    throttled: e,\n    debounce: i,\n    _toLeftRightCenter: n,\n    _alignStartEnd: o,\n    _textX: s,\n    _pointInLine: mn,\n    _steppedInterpolation: xn,\n    _bezierInterpolation: bn,\n    formatNumber: Fi,\n    toLineHeight: Re,\n    _readValueToProps: Ee,\n    toTRBL: ze,\n    toTRBLCorners: Ie,\n    toPadding: Fe,\n    toFont: Be,\n    resolve: Ve,\n    _addGrace: We,\n    PI: bt,\n    TAU: _t,\n    PITAU: yt,\n    INFINITY: vt,\n    RAD_PER_DEG: wt,\n    HALF_PI: Mt,\n    QUARTER_PI: kt,\n    TWO_THIRDS_PI: St,\n    log10: Pt,\n    sign: Dt,\n    niceNum: Ct,\n    _factorize: Ot,\n    isNumber: Tt,\n    almostEquals: At,\n    almostWhole: Lt,\n    _setMinAndMaxByKey: Rt,\n    toRadians: Et,\n    toDegrees: zt,\n    _decimalPlaces: It,\n    getAngleFromPoint: Ft,\n    distanceBetweenPoints: Bt,\n    _angleDiff: Vt,\n    _normalizeAngle: Wt,\n    _angleBetween: Nt,\n    _limitValue: Ht,\n    _int16Range: jt,\n    getRtlAdapter: _n,\n    overrideTextDirection: yn,\n    restoreTextDirection: vn,\n    _boundSegment: kn,\n    _boundSegments: Sn,\n    _computeSegments: Pn\n  });\n\n  var An = /*#__PURE__*/function () {\n    function An(t, e, i) {\n      _classCallCheck(this, An);\n\n      this.type = t, this.scope = e, this.override = i, this.items = Object.create(null);\n    }\n\n    _createClass(An, [{\n      key: \"isForType\",\n      value: function isForType(t) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, t.prototype);\n      }\n    }, {\n      key: \"register\",\n      value: function register(t) {\n        var e = this,\n            i = Object.getPrototypeOf(t);\n        var n;\n        (function (t) {\n          return \"id\" in t && \"defaults\" in t;\n        })(i) && (n = e.register(i));\n        var o = e.items,\n            s = t.id,\n            a = e.scope + \".\" + s;\n        if (!s) throw new Error(\"class does not have id: \" + t);\n        return s in o || (o[s] = t, function (t, e, i) {\n          var n = ot(Object.create(null), [i ? xt.get(i) : {}, xt.get(e), t.defaults]);\n          xt.set(e, n), t.defaultRoutes && function (t, e) {\n            Object.keys(e).forEach(function (i) {\n              var n = i.split(\".\"),\n                  o = n.pop(),\n                  s = [t].concat(n).join(\".\"),\n                  a = e[i].split(\".\"),\n                  r = a.pop(),\n                  l = a.join(\".\");\n              xt.route(s, o, l, r);\n            });\n          }(e, t.defaultRoutes);\n          t.descriptors && xt.describe(e, t.descriptors);\n        }(t, a, n), e.override && xt.override(t.id, t.overrides)), a;\n      }\n    }, {\n      key: \"get\",\n      value: function get(t) {\n        return this.items[t];\n      }\n    }, {\n      key: \"unregister\",\n      value: function unregister(t) {\n        var e = this.items,\n            i = t.id,\n            n = this.scope;\n        i in e && delete e[i], n && i in xt[n] && (delete xt[n][i], this.override && delete ft[i]);\n      }\n    }]);\n\n    return An;\n  }();\n\n  var Ln = new ( /*#__PURE__*/function () {\n    function _class3() {\n      _classCallCheck(this, _class3);\n\n      this.controllers = new An(Ei, \"datasets\", !0), this.elements = new An(zi, \"elements\"), this.plugins = new An(Object, \"plugins\"), this.scales = new An(qi, \"scales\"), this._typedRegistries = [this.controllers, this.scales, this.elements];\n    }\n\n    _createClass(_class3, [{\n      key: \"add\",\n      value: function add() {\n        for (var _len3 = arguments.length, t = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          t[_key3] = arguments[_key3];\n        }\n\n        this._each(\"register\", t);\n      }\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        for (var _len4 = arguments.length, t = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          t[_key4] = arguments[_key4];\n        }\n\n        this._each(\"unregister\", t);\n      }\n    }, {\n      key: \"addControllers\",\n      value: function addControllers() {\n        for (var _len5 = arguments.length, t = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          t[_key5] = arguments[_key5];\n        }\n\n        this._each(\"register\", t, this.controllers);\n      }\n    }, {\n      key: \"addElements\",\n      value: function addElements() {\n        for (var _len6 = arguments.length, t = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          t[_key6] = arguments[_key6];\n        }\n\n        this._each(\"register\", t, this.elements);\n      }\n    }, {\n      key: \"addPlugins\",\n      value: function addPlugins() {\n        for (var _len7 = arguments.length, t = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n          t[_key7] = arguments[_key7];\n        }\n\n        this._each(\"register\", t, this.plugins);\n      }\n    }, {\n      key: \"addScales\",\n      value: function addScales() {\n        for (var _len8 = arguments.length, t = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n          t[_key8] = arguments[_key8];\n        }\n\n        this._each(\"register\", t, this.scales);\n      }\n    }, {\n      key: \"getController\",\n      value: function getController(t) {\n        return this._get(t, this.controllers, \"controller\");\n      }\n    }, {\n      key: \"getElement\",\n      value: function getElement(t) {\n        return this._get(t, this.elements, \"element\");\n      }\n    }, {\n      key: \"getPlugin\",\n      value: function getPlugin(t) {\n        return this._get(t, this.plugins, \"plugin\");\n      }\n    }, {\n      key: \"getScale\",\n      value: function getScale(t) {\n        return this._get(t, this.scales, \"scale\");\n      }\n    }, {\n      key: \"removeControllers\",\n      value: function removeControllers() {\n        for (var _len9 = arguments.length, t = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n          t[_key9] = arguments[_key9];\n        }\n\n        this._each(\"unregister\", t, this.controllers);\n      }\n    }, {\n      key: \"removeElements\",\n      value: function removeElements() {\n        for (var _len10 = arguments.length, t = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n          t[_key10] = arguments[_key10];\n        }\n\n        this._each(\"unregister\", t, this.elements);\n      }\n    }, {\n      key: \"removePlugins\",\n      value: function removePlugins() {\n        for (var _len11 = arguments.length, t = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n          t[_key11] = arguments[_key11];\n        }\n\n        this._each(\"unregister\", t, this.plugins);\n      }\n    }, {\n      key: \"removeScales\",\n      value: function removeScales() {\n        for (var _len12 = arguments.length, t = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n          t[_key12] = arguments[_key12];\n        }\n\n        this._each(\"unregister\", t, this.scales);\n      }\n    }, {\n      key: \"_each\",\n      value: function _each(t, e, i) {\n        var n = this;\n\n        _toConsumableArray(e).forEach(function (e) {\n          var o = i || n._getRegistryForType(e);\n\n          i || o.isForType(e) || o === n.plugins && e.id ? n._exec(t, o, e) : J(e, function (e) {\n            var o = i || n._getRegistryForType(e);\n\n            n._exec(t, o, e);\n          });\n        });\n      }\n    }, {\n      key: \"_exec\",\n      value: function _exec(t, e, i) {\n        var n = ct(t);\n        Q(i[\"before\" + n], [], i), e[t](i), Q(i[\"after\" + n], [], i);\n      }\n    }, {\n      key: \"_getRegistryForType\",\n      value: function _getRegistryForType(t) {\n        for (var _e23 = 0; _e23 < this._typedRegistries.length; _e23++) {\n          var _i30 = this._typedRegistries[_e23];\n          if (_i30.isForType(t)) return _i30;\n        }\n\n        return this.plugins;\n      }\n    }, {\n      key: \"_get\",\n      value: function _get(t, e, i) {\n        var n = e.get(t);\n        if (void 0 === n) throw new Error('\"' + t + '\" is not a registered ' + i + \".\");\n        return n;\n      }\n    }]);\n\n    return _class3;\n  }())();\n\n  var Rn = /*#__PURE__*/function () {\n    function Rn() {\n      _classCallCheck(this, Rn);\n\n      this._init = [];\n    }\n\n    _createClass(Rn, [{\n      key: \"notify\",\n      value: function notify(t, e, i, n) {\n        var o = this;\n        \"beforeInit\" === e && (o._init = o._createDescriptors(t, !0), o._notify(o._init, t, \"install\"));\n\n        var s = n ? o._descriptors(t).filter(n) : o._descriptors(t),\n            a = o._notify(s, t, e, i);\n\n        return \"destroy\" === e && (o._notify(s, t, \"stop\"), o._notify(o._init, t, \"uninstall\")), a;\n      }\n    }, {\n      key: \"_notify\",\n      value: function _notify(t, e, i, n) {\n        n = n || {};\n\n        var _iterator14 = _createForOfIteratorHelper(t),\n            _step14;\n\n        try {\n          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n            var _o17 = _step14.value;\n            var _t34 = _o17.plugin;\n            if (!1 === Q(_t34[i], [e, n, _o17.options], _t34) && n.cancelable) return !1;\n          }\n        } catch (err) {\n          _iterator14.e(err);\n        } finally {\n          _iterator14.f();\n        }\n\n        return !0;\n      }\n    }, {\n      key: \"invalidate\",\n      value: function invalidate() {\n        $(this._cache) || (this._oldCache = this._cache, this._cache = void 0);\n      }\n    }, {\n      key: \"_descriptors\",\n      value: function _descriptors(t) {\n        if (this._cache) return this._cache;\n\n        var e = this._cache = this._createDescriptors(t);\n\n        return this._notifyStateChanges(t), e;\n      }\n    }, {\n      key: \"_createDescriptors\",\n      value: function _createDescriptors(t, e) {\n        var i = t && t.config,\n            n = K(i.options && i.options.plugins, {}),\n            o = function (t) {\n          var e = [],\n              i = Object.keys(Ln.plugins.items);\n\n          for (var _t35 = 0; _t35 < i.length; _t35++) {\n            e.push(Ln.getPlugin(i[_t35]));\n          }\n\n          var n = t.plugins || [];\n\n          for (var _t36 = 0; _t36 < n.length; _t36++) {\n            var _i31 = n[_t36];\n            -1 === e.indexOf(_i31) && e.push(_i31);\n          }\n\n          return e;\n        }(i);\n\n        return !1 !== n || e ? function (t, e, i, n) {\n          var o = [],\n              s = t.getContext();\n\n          for (var _a14 = 0; _a14 < e.length; _a14++) {\n            var _r7 = e[_a14],\n                _l11 = En(i[_r7.id], n);\n\n            null !== _l11 && o.push({\n              plugin: _r7,\n              options: zn(t.config, _r7, _l11, s)\n            });\n          }\n\n          return o;\n        }(t, o, n, e) : [];\n      }\n    }, {\n      key: \"_notifyStateChanges\",\n      value: function _notifyStateChanges(t) {\n        var e = this._oldCache || [],\n            i = this._cache,\n            n = function n(t, e) {\n          return t.filter(function (t) {\n            return !e.some(function (e) {\n              return t.plugin.id === e.plugin.id;\n            });\n          });\n        };\n\n        this._notify(n(e, i), t, \"stop\"), this._notify(n(i, e), t, \"start\");\n      }\n    }]);\n\n    return Rn;\n  }();\n\n  function En(t, e) {\n    return e || !1 !== t ? !0 === t ? {} : t : null;\n  }\n\n  function zn(t, e, i, n) {\n    var o = t.pluginScopeKeys(e),\n        s = t.getOptionScopes(i, o);\n    return t.createResolver(s, n, [\"\"], {\n      scriptable: !1,\n      indexable: !1,\n      allKeys: !0\n    });\n  }\n\n  function In(t, e) {\n    var i = xt.datasets[t] || {};\n    return ((e.datasets || {})[t] || {}).indexAxis || e.indexAxis || i.indexAxis || \"x\";\n  }\n\n  function Fn(t, e) {\n    return \"x\" === t || \"y\" === t ? t : e.axis || (\"top\" === (i = e.position) || \"bottom\" === i ? \"x\" : \"left\" === i || \"right\" === i ? \"y\" : void 0) || t.charAt(0).toLowerCase();\n    var i;\n  }\n\n  function Bn(t) {\n    var e = t.options || (t.options = {});\n    e.plugins = K(e.plugins, {}), e.scales = function (t, e) {\n      var i = ft[t.type] || {\n        scales: {}\n      },\n          n = e.scales || {},\n          o = In(t.type, e),\n          s = Object.create(null),\n          a = Object.create(null);\n      return Object.keys(n).forEach(function (t) {\n        var e = n[t],\n            r = Fn(t, e),\n            l = function (t, e) {\n          return t === e ? \"_index_\" : \"_value_\";\n        }(r, o),\n            c = i.scales || {};\n\n        s[r] = s[r] || t, a[t] = st(Object.create(null), [{\n          axis: r\n        }, e, c[r], c[l]]);\n      }), t.data.datasets.forEach(function (i) {\n        var o = i.type || t.type,\n            r = i.indexAxis || In(o, e),\n            l = (ft[o] || {}).scales || {};\n        Object.keys(l).forEach(function (t) {\n          var e = function (t, e) {\n            var i = t;\n            return \"_index_\" === t ? i = e : \"_value_\" === t && (i = \"x\" === e ? \"y\" : \"x\"), i;\n          }(t, r),\n              o = i[e + \"AxisID\"] || s[e] || e;\n\n          a[o] = a[o] || Object.create(null), st(a[o], [{\n            axis: e\n          }, n[o], l[t]]);\n        });\n      }), Object.keys(a).forEach(function (t) {\n        var e = a[t];\n        st(e, [xt.scales[e.type], xt.scale]);\n      }), a;\n    }(t, e);\n  }\n\n  function Vn(t) {\n    return (t = t || {}).datasets = t.datasets || [], t.labels = t.labels || [], t;\n  }\n\n  var Wn = new Map(),\n      Nn = new Set();\n\n  function Hn(t, e) {\n    var i = Wn.get(t);\n    return i || (i = e(), Wn.set(t, i), Nn.add(i)), i;\n  }\n\n  var jn = function jn(t, e, i) {\n    var n = lt(e, i);\n    void 0 !== n && t.add(n);\n  };\n\n  var $n = /*#__PURE__*/function () {\n    function $n(t) {\n      _classCallCheck(this, $n);\n\n      this._config = function (t) {\n        return (t = t || {}).data = Vn(t.data), Bn(t), t;\n      }(t), this._scopeCache = new Map(), this._resolverCache = new Map();\n    }\n\n    _createClass($n, [{\n      key: \"type\",\n      get: function get() {\n        return this._config.type;\n      },\n      set: function set(t) {\n        this._config.type = t;\n      }\n    }, {\n      key: \"data\",\n      get: function get() {\n        return this._config.data;\n      },\n      set: function set(t) {\n        this._config.data = Vn(t);\n      }\n    }, {\n      key: \"options\",\n      get: function get() {\n        return this._config.options;\n      },\n      set: function set(t) {\n        this._config.options = t;\n      }\n    }, {\n      key: \"plugins\",\n      get: function get() {\n        return this._config.plugins;\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var t = this._config;\n        this.clearCache(), Bn(t);\n      }\n    }, {\n      key: \"clearCache\",\n      value: function clearCache() {\n        this._scopeCache.clear(), this._resolverCache.clear();\n      }\n    }, {\n      key: \"datasetScopeKeys\",\n      value: function datasetScopeKeys(t) {\n        return Hn(t, function () {\n          return [[\"datasets.\".concat(t), \"\"]];\n        });\n      }\n    }, {\n      key: \"datasetAnimationScopeKeys\",\n      value: function datasetAnimationScopeKeys(t, e) {\n        return Hn(\"\".concat(t, \".transition.\").concat(e), function () {\n          return [[\"datasets.\".concat(t, \".transitions.\").concat(e), \"transitions.\".concat(e)], [\"datasets.\".concat(t), \"\"]];\n        });\n      }\n    }, {\n      key: \"datasetElementScopeKeys\",\n      value: function datasetElementScopeKeys(t, e) {\n        return Hn(\"\".concat(t, \"-\").concat(e), function () {\n          return [[\"datasets.\".concat(t, \".elements.\").concat(e), \"datasets.\".concat(t), \"elements.\".concat(e), \"\"]];\n        });\n      }\n    }, {\n      key: \"pluginScopeKeys\",\n      value: function pluginScopeKeys(t) {\n        var e = t.id;\n        return Hn(\"\".concat(this.type, \"-plugin-\").concat(e), function () {\n          return [[\"plugins.\".concat(e)].concat(_toConsumableArray(t.additionalOptionScopes || []))];\n        });\n      }\n    }, {\n      key: \"_cachedScopes\",\n      value: function _cachedScopes(t, e) {\n        var i = this._scopeCache;\n        var n = i.get(t);\n        return n && !e || (n = new Map(), i.set(t, n)), n;\n      }\n    }, {\n      key: \"getOptionScopes\",\n      value: function getOptionScopes(t, e, i) {\n        var n = this.options,\n            o = this.type,\n            s = this._cachedScopes(t, i),\n            a = s.get(e);\n\n        if (a) return a;\n        var r = new Set();\n        e.forEach(function (e) {\n          t && (r.add(t), e.forEach(function (e) {\n            return jn(r, t, e);\n          })), e.forEach(function (t) {\n            return jn(r, n, t);\n          }), e.forEach(function (t) {\n            return jn(r, ft[o] || {}, t);\n          }), e.forEach(function (t) {\n            return jn(r, xt, t);\n          }), e.forEach(function (t) {\n            return jn(r, gt, t);\n          });\n        });\n        var l = Array.from(r);\n        return Nn.has(e) && s.set(e, l), l;\n      }\n    }, {\n      key: \"chartOptionScopes\",\n      value: function chartOptionScopes() {\n        var t = this.options,\n            e = this.type;\n        return [t, ft[e] || {}, xt.datasets[e] || {}, {\n          type: e\n        }, xt, gt];\n      }\n    }, {\n      key: \"resolveNamedOptions\",\n      value: function resolveNamedOptions(t, e, i) {\n        var n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [\"\"];\n\n        var o = {\n          $shared: !0\n        },\n            _Yn = Yn(this._resolverCache, t, n),\n            s = _Yn.resolver,\n            a = _Yn.subPrefixes;\n\n        var r = s;\n\n        if (function (t, e) {\n          var _Zi = Zi(t),\n              i = _Zi.isScriptable,\n              n = _Zi.isIndexable;\n\n          var _iterator15 = _createForOfIteratorHelper(e),\n              _step15;\n\n          try {\n            for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n              var _o18 = _step15.value;\n              if (i(_o18) && dt(t[_o18]) || n(_o18) && Y(t[_o18])) return !0;\n            }\n          } catch (err) {\n            _iterator15.e(err);\n          } finally {\n            _iterator15.f();\n          }\n\n          return !1;\n        }(s, e)) {\n          o.$shared = !1;\n          r = Gi(s, i = dt(i) ? i() : i, this.createResolver(t, i, a));\n        }\n\n        var _iterator16 = _createForOfIteratorHelper(e),\n            _step16;\n\n        try {\n          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var _t37 = _step16.value;\n            o[_t37] = r[_t37];\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n\n        return o;\n      }\n    }, {\n      key: \"createResolver\",\n      value: function createResolver(t, e) {\n        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [\"\"];\n        var n = arguments.length > 3 ? arguments[3] : undefined;\n\n        var _Yn2 = Yn(this._resolverCache, t, i),\n            o = _Yn2.resolver;\n\n        return U(e) ? Gi(o, e, void 0, n) : o;\n      }\n    }]);\n\n    return $n;\n  }();\n\n  function Yn(t, e, i) {\n    var n = t.get(e);\n    n || (n = new Map(), t.set(e, n));\n    var o = i.join();\n    var s = n.get(o);\n\n    if (!s) {\n      s = {\n        resolver: Ki(e, i),\n        subPrefixes: i.filter(function (t) {\n          return !t.toLowerCase().includes(\"hover\");\n        })\n      }, n.set(o, s);\n    }\n\n    return s;\n  }\n\n  var Un = [\"top\", \"bottom\", \"left\", \"right\", \"chartArea\"];\n\n  function Xn(t, e) {\n    return \"top\" === t || \"bottom\" === t || -1 === Un.indexOf(t) && \"x\" === e;\n  }\n\n  function qn(t, e) {\n    return function (i, n) {\n      return i[t] === n[t] ? i[e] - n[e] : i[t] - n[t];\n    };\n  }\n\n  function Kn(t) {\n    var e = t.chart,\n        i = e.options.animation;\n    e.notifyPlugins(\"afterRender\"), Q(i && i.onComplete, [t], e);\n  }\n\n  function Gn(t) {\n    var e = t.chart,\n        i = e.options.animation;\n    Q(i && i.onProgress, [t], e);\n  }\n\n  function Zn() {\n    return \"undefined\" != typeof window && \"undefined\" != typeof document;\n  }\n\n  function Qn(t) {\n    return Zn() && \"string\" == typeof t ? t = document.getElementById(t) : t && t.length && (t = t[0]), t && t.canvas && (t = t.canvas), t;\n  }\n\n  var Jn = {},\n      to = function to(t) {\n    var e = Qn(t);\n    return Object.values(Jn).filter(function (t) {\n      return t.canvas === e;\n    }).pop();\n  };\n\n  var eo = /*#__PURE__*/function () {\n    function eo(t, e) {\n      var _this2 = this;\n\n      _classCallCheck(this, eo);\n\n      var n = this;\n      this.config = e = new $n(e);\n      var o = Qn(t),\n          s = to(o);\n      if (s) throw new Error(\"Canvas is already in use. Chart with ID '\" + s.id + \"' must be destroyed before the canvas can be reused.\");\n      var r = e.createResolver(e.chartOptionScopes(), n.getContext());\n      this.platform = n._initializePlatform(o, e);\n      var l = n.platform.acquireContext(o, r.aspectRatio),\n          c = l && l.canvas,\n          h = c && c.height,\n          d = c && c.width;\n      this.id = j(), this.ctx = l, this.canvas = c, this.width = d, this.height = h, this._options = r, this._aspectRatio = this.aspectRatio, this._layers = [], this._metasets = [], this._stacks = void 0, this.boxes = [], this.currentDevicePixelRatio = void 0, this.chartArea = void 0, this._active = [], this._lastEvent = void 0, this._listeners = {}, this._responsiveListeners = void 0, this._sortedMetasets = [], this.scales = {}, this.scale = void 0, this._plugins = new Rn(), this.$proxies = {}, this._hiddenIndices = {}, this.attached = !1, this._animationsDisabled = void 0, this.$context = void 0, this._doResize = i(function () {\n        return _this2.update(\"resize\");\n      }, r.resizeDelay || 0), Jn[n.id] = n, l && c ? (a.listen(n, \"complete\", Kn), a.listen(n, \"progress\", Gn), n._initialize(), n.attached && n.update()) : console.error(\"Failed to create chart: can't acquire context from the given item\");\n    }\n\n    _createClass(eo, [{\n      key: \"aspectRatio\",\n      get: function get() {\n        var _this$options4 = this.options,\n            t = _this$options4.aspectRatio,\n            e = _this$options4.maintainAspectRatio,\n            i = this.width,\n            n = this.height,\n            o = this._aspectRatio;\n        return $(t) ? e && o ? o : n ? i / n : null : t;\n      }\n    }, {\n      key: \"data\",\n      get: function get() {\n        return this.config.data;\n      },\n      set: function set(t) {\n        this.config.data = t;\n      }\n    }, {\n      key: \"options\",\n      get: function get() {\n        return this._options;\n      },\n      set: function set(t) {\n        this.config.options = t;\n      }\n    }, {\n      key: \"_initialize\",\n      value: function _initialize() {\n        var t = this;\n        return t.notifyPlugins(\"beforeInit\"), t.options.responsive ? t.resize() : ve(t, t.options.devicePixelRatio), t.bindEvents(), t.notifyPlugins(\"afterInit\"), t;\n      }\n    }, {\n      key: \"_initializePlatform\",\n      value: function _initializePlatform(t, e) {\n        return e.platform ? new e.platform() : !Zn() || \"undefined\" != typeof OffscreenCanvas && t instanceof OffscreenCanvas ? new Je() : new ui();\n      }\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        return qt(this.canvas, this.ctx), this;\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        return a.stop(this), this;\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(t, e) {\n        a.running(this) ? this._resizeBeforeDraw = {\n          width: t,\n          height: e\n        } : this._resize(t, e);\n      }\n    }, {\n      key: \"_resize\",\n      value: function _resize(t, e) {\n        var i = this,\n            n = i.options,\n            o = i.canvas,\n            s = n.maintainAspectRatio && i.aspectRatio,\n            a = i.platform.getMaximumSize(o, t, e, s),\n            r = n.devicePixelRatio || i.platform.getDevicePixelRatio();\n        i.width = a.width, i.height = a.height, i._aspectRatio = i.aspectRatio, ve(i, r, !0) && (i.notifyPlugins(\"resize\", {\n          size: a\n        }), Q(n.onResize, [i, a], i), i.attached && i._doResize() && i.render());\n      }\n    }, {\n      key: \"ensureScalesHaveIDs\",\n      value: function ensureScalesHaveIDs() {\n        J(this.options.scales || {}, function (t, e) {\n          t.id = e;\n        });\n      }\n    }, {\n      key: \"buildOrUpdateScales\",\n      value: function buildOrUpdateScales() {\n        var t = this,\n            e = t.options,\n            i = e.scales,\n            n = t.scales,\n            o = Object.keys(n).reduce(function (t, e) {\n          return t[e] = !1, t;\n        }, {});\n        var s = [];\n        i && (s = s.concat(Object.keys(i).map(function (t) {\n          var e = i[t],\n              n = Fn(t, e),\n              o = \"r\" === n,\n              s = \"x\" === n;\n          return {\n            options: e,\n            dposition: o ? \"chartArea\" : s ? \"bottom\" : \"left\",\n            dtype: o ? \"radialLinear\" : s ? \"category\" : \"linear\"\n          };\n        }))), J(s, function (i) {\n          var s = i.options,\n              a = s.id,\n              r = Fn(a, s),\n              l = K(s.type, i.dtype);\n          void 0 !== s.position && Xn(s.position, r) === Xn(i.dposition) || (s.position = i.dposition), o[a] = !0;\n          var c = null;\n          if (a in n && n[a].type === l) c = n[a];else {\n            c = new (Ln.getScale(l))({\n              id: a,\n              type: l,\n              ctx: t.ctx,\n              chart: t\n            }), n[c.id] = c;\n          }\n          c.init(s, e);\n        }), J(o, function (t, e) {\n          t || delete n[e];\n        }), J(n, function (e) {\n          Ze.configure(t, e, e.options), Ze.addBox(t, e);\n        });\n      }\n    }, {\n      key: \"_updateMetasets\",\n      value: function _updateMetasets() {\n        var t = this,\n            e = t._metasets,\n            i = t.data.datasets.length,\n            n = e.length;\n\n        if (e.sort(function (t, e) {\n          return t.index - e.index;\n        }), n > i) {\n          for (var _e24 = i; _e24 < n; ++_e24) {\n            t._destroyDatasetMeta(_e24);\n          }\n\n          e.splice(i, n - i);\n        }\n\n        t._sortedMetasets = e.slice(0).sort(qn(\"order\", \"index\"));\n      }\n    }, {\n      key: \"_removeUnreferencedMetasets\",\n      value: function _removeUnreferencedMetasets() {\n        var t = this,\n            e = t._metasets,\n            i = t.data.datasets;\n        e.length > i.length && delete t._stacks, e.forEach(function (e, n) {\n          0 === i.filter(function (t) {\n            return t === e._dataset;\n          }).length && t._destroyDatasetMeta(n);\n        });\n      }\n    }, {\n      key: \"buildOrUpdateControllers\",\n      value: function buildOrUpdateControllers() {\n        var t = this,\n            e = [],\n            i = t.data.datasets;\n        var n, o;\n\n        for (t._removeUnreferencedMetasets(), n = 0, o = i.length; n < o; n++) {\n          var _o19 = i[n];\n\n          var _s17 = t.getDatasetMeta(n);\n\n          var _a15 = _o19.type || t.config.type;\n\n          if (_s17.type && _s17.type !== _a15 && (t._destroyDatasetMeta(n), _s17 = t.getDatasetMeta(n)), _s17.type = _a15, _s17.indexAxis = _o19.indexAxis || In(_a15, t.options), _s17.order = _o19.order || 0, _s17.index = n, _s17.label = \"\" + _o19.label, _s17.visible = t.isDatasetVisible(n), _s17.controller) _s17.controller.updateIndex(n), _s17.controller.linkScales();else {\n            var _i32 = Ln.getController(_a15),\n                _xt$datasets$_a = xt.datasets[_a15],\n                _o20 = _xt$datasets$_a.datasetElementType,\n                _r8 = _xt$datasets$_a.dataElementType;\n\n            Object.assign(_i32.prototype, {\n              dataElementType: Ln.getElement(_r8),\n              datasetElementType: _o20 && Ln.getElement(_o20)\n            }), _s17.controller = new _i32(t, n), e.push(_s17.controller);\n          }\n        }\n\n        return t._updateMetasets(), e;\n      }\n    }, {\n      key: \"_resetElements\",\n      value: function _resetElements() {\n        var t = this;\n        J(t.data.datasets, function (e, i) {\n          t.getDatasetMeta(i).controller.reset();\n        }, t);\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this._resetElements(), this.notifyPlugins(\"reset\");\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {\n        var e = this,\n            i = e.config;\n        i.update(), e._options = i.createResolver(i.chartOptionScopes(), e.getContext()), J(e.scales, function (t) {\n          Ze.removeBox(e, t);\n        });\n        var n = e._animationsDisabled = !e.options.animation;\n        e.ensureScalesHaveIDs(), e.buildOrUpdateScales();\n        var o = new Set(Object.keys(e._listeners)),\n            s = new Set(e.options.events);\n        if (ut(o, s) && !!this._responsiveListeners === e.options.responsive || (e.unbindEvents(), e.bindEvents()), e._plugins.invalidate(), !1 === e.notifyPlugins(\"beforeUpdate\", {\n          mode: t,\n          cancelable: !0\n        })) return;\n        var a = e.buildOrUpdateControllers();\n        e.notifyPlugins(\"beforeElementsUpdate\");\n        var r = 0;\n\n        for (var _t38 = 0, _i33 = e.data.datasets.length; _t38 < _i33; _t38++) {\n          var _e$getDatasetMeta = e.getDatasetMeta(_t38),\n              _i34 = _e$getDatasetMeta.controller,\n              _o21 = !n && -1 === a.indexOf(_i34);\n\n          _i34.buildOrUpdateElements(_o21), r = Math.max(+_i34.getMaxOverflow(), r);\n        }\n\n        e._minPadding = r, e._updateLayout(r), n || J(a, function (t) {\n          t.reset();\n        }), e._updateDatasets(t), e.notifyPlugins(\"afterUpdate\", {\n          mode: t\n        }), e._layers.sort(qn(\"z\", \"_idx\")), e._lastEvent && e._eventHandler(e._lastEvent, !0), e.render();\n      }\n    }, {\n      key: \"_updateLayout\",\n      value: function _updateLayout(t) {\n        var e = this;\n        if (!1 === e.notifyPlugins(\"beforeLayout\", {\n          cancelable: !0\n        })) return;\n        Ze.update(e, e.width, e.height, t);\n        var i = e.chartArea,\n            n = i.width <= 0 || i.height <= 0;\n        e._layers = [], J(e.boxes, function (t) {\n          var _e$_layers;\n\n          n && \"chartArea\" === t.position || (t.configure && t.configure(), (_e$_layers = e._layers).push.apply(_e$_layers, _toConsumableArray(t._layers())));\n        }, e), e._layers.forEach(function (t, e) {\n          t._idx = e;\n        }), e.notifyPlugins(\"afterLayout\");\n      }\n    }, {\n      key: \"_updateDatasets\",\n      value: function _updateDatasets(t) {\n        var e = this,\n            i = \"function\" == typeof t;\n\n        if (!1 !== e.notifyPlugins(\"beforeDatasetsUpdate\", {\n          mode: t,\n          cancelable: !0\n        })) {\n          for (var _n26 = 0, _o22 = e.data.datasets.length; _n26 < _o22; ++_n26) {\n            e._updateDataset(_n26, i ? t({\n              datasetIndex: _n26\n            }) : t);\n          }\n\n          e.notifyPlugins(\"afterDatasetsUpdate\", {\n            mode: t\n          });\n        }\n      }\n    }, {\n      key: \"_updateDataset\",\n      value: function _updateDataset(t, e) {\n        var i = this,\n            n = i.getDatasetMeta(t),\n            o = {\n          meta: n,\n          index: t,\n          mode: e,\n          cancelable: !0\n        };\n        !1 !== i.notifyPlugins(\"beforeDatasetUpdate\", o) && (n.controller._update(e), o.cancelable = !1, i.notifyPlugins(\"afterDatasetUpdate\", o));\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var t = this;\n        !1 !== t.notifyPlugins(\"beforeRender\", {\n          cancelable: !0\n        }) && (a.has(t) ? t.attached && !a.running(t) && a.start(t) : (t.draw(), Kn({\n          chart: t\n        })));\n      }\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        var t = this;\n        var e;\n\n        if (t._resizeBeforeDraw) {\n          var _t$_resizeBeforeDraw = t._resizeBeforeDraw,\n              _e25 = _t$_resizeBeforeDraw.width,\n              _i35 = _t$_resizeBeforeDraw.height;\n          t._resize(_e25, _i35), t._resizeBeforeDraw = null;\n        }\n\n        if (t.clear(), t.width <= 0 || t.height <= 0) return;\n        if (!1 === t.notifyPlugins(\"beforeDraw\", {\n          cancelable: !0\n        })) return;\n        var i = t._layers;\n\n        for (e = 0; e < i.length && i[e].z <= 0; ++e) {\n          i[e].draw(t.chartArea);\n        }\n\n        for (t._drawDatasets(); e < i.length; ++e) {\n          i[e].draw(t.chartArea);\n        }\n\n        t.notifyPlugins(\"afterDraw\");\n      }\n    }, {\n      key: \"_getSortedDatasetMetas\",\n      value: function _getSortedDatasetMetas(t) {\n        var e = this._sortedMetasets,\n            i = [];\n        var n, o;\n\n        for (n = 0, o = e.length; n < o; ++n) {\n          var _o23 = e[n];\n          t && !_o23.visible || i.push(_o23);\n        }\n\n        return i;\n      }\n    }, {\n      key: \"getSortedVisibleDatasetMetas\",\n      value: function getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(!0);\n      }\n    }, {\n      key: \"_drawDatasets\",\n      value: function _drawDatasets() {\n        var t = this;\n        if (!1 === t.notifyPlugins(\"beforeDatasetsDraw\", {\n          cancelable: !0\n        })) return;\n        var e = t.getSortedVisibleDatasetMetas();\n\n        for (var _i36 = e.length - 1; _i36 >= 0; --_i36) {\n          t._drawDataset(e[_i36]);\n        }\n\n        t.notifyPlugins(\"afterDatasetsDraw\");\n      }\n    }, {\n      key: \"_drawDataset\",\n      value: function _drawDataset(t) {\n        var e = this,\n            i = e.ctx,\n            n = t._clip,\n            o = !n.disabled,\n            s = e.chartArea,\n            a = {\n          meta: t,\n          index: t.index,\n          cancelable: !0\n        };\n        !1 !== e.notifyPlugins(\"beforeDatasetDraw\", a) && (o && Zt(i, {\n          left: !1 === n.left ? 0 : s.left - n.left,\n          right: !1 === n.right ? e.width : s.right + n.right,\n          top: !1 === n.top ? 0 : s.top - n.top,\n          bottom: !1 === n.bottom ? e.height : s.bottom + n.bottom\n        }), t.controller.draw(), o && Qt(i), a.cancelable = !1, e.notifyPlugins(\"afterDatasetDraw\", a));\n      }\n    }, {\n      key: \"getElementsAtEventForMode\",\n      value: function getElementsAtEventForMode(t, e, i, n) {\n        var o = Te.modes[e];\n        return \"function\" == typeof o ? o(this, t, i, n) : [];\n      }\n    }, {\n      key: \"getDatasetMeta\",\n      value: function getDatasetMeta(t) {\n        var e = this.data.datasets[t],\n            i = this._metasets;\n        var n = i.filter(function (t) {\n          return t && t._dataset === e;\n        }).pop();\n        return n || (n = {\n          type: null,\n          data: [],\n          dataset: null,\n          controller: null,\n          hidden: null,\n          xAxisID: null,\n          yAxisID: null,\n          order: e && e.order || 0,\n          index: t,\n          _dataset: e,\n          _parsed: [],\n          _sorted: !1\n        }, i.push(n)), n;\n      }\n    }, {\n      key: \"getContext\",\n      value: function getContext() {\n        return this.$context || (this.$context = {\n          chart: this,\n          type: \"chart\"\n        });\n      }\n    }, {\n      key: \"getVisibleDatasetCount\",\n      value: function getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n      }\n    }, {\n      key: \"isDatasetVisible\",\n      value: function isDatasetVisible(t) {\n        var e = this.data.datasets[t];\n        if (!e) return !1;\n        var i = this.getDatasetMeta(t);\n        return \"boolean\" == typeof i.hidden ? !i.hidden : !e.hidden;\n      }\n    }, {\n      key: \"setDatasetVisibility\",\n      value: function setDatasetVisibility(t, e) {\n        this.getDatasetMeta(t).hidden = !e;\n      }\n    }, {\n      key: \"toggleDataVisibility\",\n      value: function toggleDataVisibility(t) {\n        this._hiddenIndices[t] = !this._hiddenIndices[t];\n      }\n    }, {\n      key: \"getDataVisibility\",\n      value: function getDataVisibility(t) {\n        return !this._hiddenIndices[t];\n      }\n    }, {\n      key: \"_updateDatasetVisibility\",\n      value: function _updateDatasetVisibility(t, e) {\n        var i = this,\n            n = e ? \"show\" : \"hide\",\n            o = i.getDatasetMeta(t),\n            s = o.controller._resolveAnimations(void 0, n);\n\n        i.setDatasetVisibility(t, e), s.update(o, {\n          visible: e\n        }), i.update(function (e) {\n          return e.datasetIndex === t ? n : void 0;\n        });\n      }\n    }, {\n      key: \"hide\",\n      value: function hide(t) {\n        this._updateDatasetVisibility(t, !1);\n      }\n    }, {\n      key: \"show\",\n      value: function show(t) {\n        this._updateDatasetVisibility(t, !0);\n      }\n    }, {\n      key: \"_destroyDatasetMeta\",\n      value: function _destroyDatasetMeta(t) {\n        var e = this,\n            i = e._metasets && e._metasets[t];\n        i && i.controller && (i.controller._destroy(), delete e._metasets[t]);\n      }\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        var t = this,\n            e = t.canvas,\n            i = t.ctx;\n        var n, o;\n\n        for (t.stop(), a.remove(t), n = 0, o = t.data.datasets.length; n < o; ++n) {\n          t._destroyDatasetMeta(n);\n        }\n\n        t.config.clearCache(), e && (t.unbindEvents(), qt(e, i), t.platform.releaseContext(i), t.canvas = null, t.ctx = null), t.notifyPlugins(\"destroy\"), delete Jn[t.id];\n      }\n    }, {\n      key: \"toBase64Image\",\n      value: function toBase64Image() {\n        var _this$canvas;\n\n        return (_this$canvas = this.canvas).toDataURL.apply(_this$canvas, arguments);\n      }\n    }, {\n      key: \"bindEvents\",\n      value: function bindEvents() {\n        this.bindUserEvents(), this.options.responsive ? this.bindResponsiveEvents() : this.attached = !0;\n      }\n    }, {\n      key: \"bindUserEvents\",\n      value: function bindUserEvents() {\n        var t = this,\n            e = t._listeners,\n            i = t.platform,\n            n = function n(e, i, _n27) {\n          e.offsetX = i, e.offsetY = _n27, t._eventHandler(e);\n        };\n\n        J(t.options.events, function (o) {\n          return function (n, o) {\n            i.addEventListener(t, n, o), e[n] = o;\n          }(o, n);\n        });\n      }\n    }, {\n      key: \"bindResponsiveEvents\",\n      value: function bindResponsiveEvents() {\n        var t = this;\n        t._responsiveListeners || (t._responsiveListeners = {});\n\n        var e = t._responsiveListeners,\n            i = t.platform,\n            n = function n(_n28, o) {\n          i.addEventListener(t, _n28, o), e[_n28] = o;\n        },\n            o = function o(n, _o24) {\n          e[n] && (i.removeEventListener(t, n, _o24), delete e[n]);\n        },\n            s = function s(e, i) {\n          t.canvas && t.resize(e, i);\n        };\n\n        var a;\n\n        var r = function r() {\n          o(\"attach\", r), t.attached = !0, t.resize(), n(\"resize\", s), n(\"detach\", a);\n        };\n\n        a = function a() {\n          t.attached = !1, o(\"resize\", s), n(\"attach\", r);\n        }, i.isAttached(t.canvas) ? r() : a();\n      }\n    }, {\n      key: \"unbindEvents\",\n      value: function unbindEvents() {\n        var t = this;\n        J(t._listeners, function (e, i) {\n          t.platform.removeEventListener(t, i, e);\n        }), t._listeners = {}, J(t._responsiveListeners, function (e, i) {\n          t.platform.removeEventListener(t, i, e);\n        }), t._responsiveListeners = void 0;\n      }\n    }, {\n      key: \"updateHoverStyle\",\n      value: function updateHoverStyle(t, e, i) {\n        var n = i ? \"set\" : \"remove\";\n        var o, s, a, r;\n\n        for (\"dataset\" === e && (o = this.getDatasetMeta(t[0].datasetIndex), o.controller[\"_\" + n + \"DatasetHoverStyle\"]()), a = 0, r = t.length; a < r; ++a) {\n          s = t[a];\n\n          var _e26 = s && this.getDatasetMeta(s.datasetIndex).controller;\n\n          _e26 && _e26[n + \"HoverStyle\"](s.element, s.datasetIndex, s.index);\n        }\n      }\n    }, {\n      key: \"getActiveElements\",\n      value: function getActiveElements() {\n        return this._active || [];\n      }\n    }, {\n      key: \"setActiveElements\",\n      value: function setActiveElements(t) {\n        var e = this,\n            i = e._active || [],\n            n = t.map(function (_ref7) {\n          var t = _ref7.datasetIndex,\n              i = _ref7.index;\n          var n = e.getDatasetMeta(t);\n          if (!n) throw new Error(\"No dataset found at index \" + t);\n          return {\n            datasetIndex: t,\n            element: n.data[i],\n            index: i\n          };\n        });\n        !tt(n, i) && (e._active = n, e._updateHoverStyles(n, i));\n      }\n    }, {\n      key: \"notifyPlugins\",\n      value: function notifyPlugins(t, e, i) {\n        return this._plugins.notify(this, t, e, i);\n      }\n    }, {\n      key: \"_updateHoverStyles\",\n      value: function _updateHoverStyles(t, e, i) {\n        var n = this,\n            o = n.options.hover,\n            s = function s(t, e) {\n          return t.filter(function (t) {\n            return !e.some(function (e) {\n              return t.datasetIndex === e.datasetIndex && t.index === e.index;\n            });\n          });\n        },\n            a = s(e, t),\n            r = i ? t : s(t, e);\n\n        a.length && n.updateHoverStyle(a, o.mode, !1), r.length && o.mode && n.updateHoverStyle(r, o.mode, !0);\n      }\n    }, {\n      key: \"_eventHandler\",\n      value: function _eventHandler(t, e) {\n        var _this3 = this;\n\n        var i = this,\n            n = {\n          event: t,\n          replay: e,\n          cancelable: !0\n        },\n            o = function o(e) {\n          return (e.options.events || _this3.options.events).includes(t.type);\n        };\n\n        if (!1 === i.notifyPlugins(\"beforeEvent\", n, o)) return;\n\n        var s = i._handleEvent(t, e);\n\n        return n.cancelable = !1, i.notifyPlugins(\"afterEvent\", n, o), (s || n.changed) && i.render(), i;\n      }\n    }, {\n      key: \"_handleEvent\",\n      value: function _handleEvent(t, e) {\n        var i = this,\n            _i$_active = i._active,\n            n = _i$_active === void 0 ? [] : _i$_active,\n            o = i.options,\n            s = o.hover,\n            a = e;\n        var r = [],\n            l = !1,\n            c = null;\n        return \"mouseout\" !== t.type && (r = i.getElementsAtEventForMode(t, s.mode, s, a), c = \"click\" === t.type ? i._lastEvent : t), i._lastEvent = null, Gt(t, i.chartArea, i._minPadding) && (Q(o.onHover, [t, r, i], i), \"mouseup\" !== t.type && \"click\" !== t.type && \"contextmenu\" !== t.type || Q(o.onClick, [t, r, i], i)), l = !tt(r, n), (l || e) && (i._active = r, i._updateHoverStyles(r, n, e)), i._lastEvent = c, l;\n      }\n    }]);\n\n    return eo;\n  }();\n\n  var io = function io() {\n    return J(eo.instances, function (t) {\n      return t._plugins.invalidate();\n    });\n  },\n      no = !0;\n\n  function oo() {\n    throw new Error(\"This method is not implemented: Check that a complete date adapter is provided.\");\n  }\n\n  Object.defineProperties(eo, {\n    defaults: {\n      enumerable: no,\n      value: xt\n    },\n    instances: {\n      enumerable: no,\n      value: Jn\n    },\n    overrides: {\n      enumerable: no,\n      value: ft\n    },\n    registry: {\n      enumerable: no,\n      value: Ln\n    },\n    version: {\n      enumerable: no,\n      value: \"3.4.1\"\n    },\n    getChart: {\n      enumerable: no,\n      value: to\n    },\n    register: {\n      enumerable: no,\n      value: function value() {\n        Ln.add.apply(Ln, arguments), io();\n      }\n    },\n    unregister: {\n      enumerable: no,\n      value: function value() {\n        Ln.remove.apply(Ln, arguments), io();\n      }\n    }\n  });\n\n  var so = /*#__PURE__*/function () {\n    function so(t) {\n      _classCallCheck(this, so);\n\n      this.options = t || {};\n    }\n\n    _createClass(so, [{\n      key: \"formats\",\n      value: function formats() {\n        return oo();\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(t, e) {\n        return oo();\n      }\n    }, {\n      key: \"format\",\n      value: function format(t, e) {\n        return oo();\n      }\n    }, {\n      key: \"add\",\n      value: function add(t, e, i) {\n        return oo();\n      }\n    }, {\n      key: \"diff\",\n      value: function diff(t, e, i) {\n        return oo();\n      }\n    }, {\n      key: \"startOf\",\n      value: function startOf(t, e, i) {\n        return oo();\n      }\n    }, {\n      key: \"endOf\",\n      value: function endOf(t, e) {\n        return oo();\n      }\n    }]);\n\n    return so;\n  }();\n\n  so.override = function (t) {\n    Object.assign(so.prototype, t);\n  };\n\n  var ao = {\n    _date: so\n  };\n\n  function ro(t) {\n    var e = function (t) {\n      if (!t._cache.$bar) {\n        var _e27 = t.getMatchingVisibleMetas(\"bar\");\n\n        var _i37 = [];\n\n        for (var _n29 = 0, _o25 = _e27.length; _n29 < _o25; _n29++) {\n          _i37 = _i37.concat(_e27[_n29].controller.getAllParsedValues(t));\n        }\n\n        t._cache.$bar = de(_i37.sort(function (t, e) {\n          return t - e;\n        }));\n      }\n\n      return t._cache.$bar;\n    }(t);\n\n    var i,\n        n,\n        o,\n        s,\n        a = t._length;\n\n    var r = function r() {\n      32767 !== o && -32768 !== o && (ht(s) && (a = Math.min(a, Math.abs(o - s) || a)), s = o);\n    };\n\n    for (i = 0, n = e.length; i < n; ++i) {\n      o = t.getPixelForValue(e[i]), r();\n    }\n\n    for (s = void 0, i = 0, n = t.ticks.length; i < n; ++i) {\n      o = t.getPixelForTick(i), r();\n    }\n\n    return a;\n  }\n\n  function lo(t, e, i, n) {\n    return Y(t) ? function (t, e, i, n) {\n      var o = i.parse(t[0], n),\n          s = i.parse(t[1], n),\n          a = Math.min(o, s),\n          r = Math.max(o, s);\n      var l = a,\n          c = r;\n      Math.abs(a) > Math.abs(r) && (l = r, c = a), e[i.axis] = c, e._custom = {\n        barStart: l,\n        barEnd: c,\n        start: o,\n        end: s,\n        min: a,\n        max: r\n      };\n    }(t, e, i, n) : e[i.axis] = i.parse(t, n), e;\n  }\n\n  function co(t, e, i, n) {\n    var o = t.iScale,\n        s = t.vScale,\n        a = o.getLabels(),\n        r = o === s,\n        l = [];\n    var c, h, d, u;\n\n    for (c = i, h = i + n; c < h; ++c) {\n      u = e[c], d = {}, d[o.axis] = r || o.parse(a[c], c), l.push(lo(u, d, s, c));\n    }\n\n    return l;\n  }\n\n  function ho(t) {\n    return t && void 0 !== t.barStart && void 0 !== t.barEnd;\n  }\n\n  var uo = /*#__PURE__*/function (_Ei) {\n    _inherits(uo, _Ei);\n\n    var _super4 = _createSuper(uo);\n\n    function uo() {\n      _classCallCheck(this, uo);\n\n      return _super4.apply(this, arguments);\n    }\n\n    _createClass(uo, [{\n      key: \"parsePrimitiveData\",\n      value: function parsePrimitiveData(t, e, i, n) {\n        return co(t, e, i, n);\n      }\n    }, {\n      key: \"parseArrayData\",\n      value: function parseArrayData(t, e, i, n) {\n        return co(t, e, i, n);\n      }\n    }, {\n      key: \"parseObjectData\",\n      value: function parseObjectData(t, e, i, n) {\n        var o = t.iScale,\n            s = t.vScale,\n            _this$_parsing2 = this._parsing,\n            _this$_parsing2$xAxis = _this$_parsing2.xAxisKey,\n            a = _this$_parsing2$xAxis === void 0 ? \"x\" : _this$_parsing2$xAxis,\n            _this$_parsing2$yAxis = _this$_parsing2.yAxisKey,\n            r = _this$_parsing2$yAxis === void 0 ? \"y\" : _this$_parsing2$yAxis,\n            l = \"x\" === o.axis ? a : r,\n            c = \"x\" === s.axis ? a : r,\n            h = [];\n        var d, u, f, g;\n\n        for (d = i, u = i + n; d < u; ++d) {\n          g = e[d], f = {}, f[o.axis] = o.parse(lt(g, l), d), h.push(lo(lt(g, c), f, s, d));\n        }\n\n        return h;\n      }\n    }, {\n      key: \"updateRangeFromParsed\",\n      value: function updateRangeFromParsed(t, e, i, n) {\n        _get2(_getPrototypeOf(uo.prototype), \"updateRangeFromParsed\", this).call(this, t, e, i, n);\n\n        var o = i._custom;\n        o && e === this._cachedMeta.vScale && (t.min = Math.min(t.min, o.min), t.max = Math.max(t.max, o.max));\n      }\n    }, {\n      key: \"getMaxOverflow\",\n      value: function getMaxOverflow() {\n        return 0;\n      }\n    }, {\n      key: \"getLabelAndValue\",\n      value: function getLabelAndValue(t) {\n        var e = this._cachedMeta,\n            i = e.iScale,\n            n = e.vScale,\n            o = this.getParsed(t),\n            s = o._custom,\n            a = ho(s) ? \"[\" + s.start + \", \" + s.end + \"]\" : \"\" + n.getLabelForValue(o[n.axis]);\n        return {\n          label: \"\" + i.getLabelForValue(o[i.axis]),\n          value: a\n        };\n      }\n    }, {\n      key: \"initialize\",\n      value: function initialize() {\n        var t = this;\n        t.enableOptionSharing = !0, _get2(_getPrototypeOf(uo.prototype), \"initialize\", this).call(this);\n        t._cachedMeta.stack = t.getDataset().stack;\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {\n        var e = this._cachedMeta;\n        this.updateElements(e.data, 0, e.data.length, t);\n      }\n    }, {\n      key: \"updateElements\",\n      value: function updateElements(t, e, i, n) {\n        var o = this,\n            s = \"reset\" === n,\n            a = o._cachedMeta.vScale,\n            r = a.getBasePixel(),\n            l = a.isHorizontal(),\n            c = o._getRuler(),\n            h = o.resolveDataElementOptions(e, n),\n            d = o.getSharedOptions(h),\n            u = o.includeOptions(n, d);\n\n        o.updateSharedOptions(d, n, h);\n\n        for (var _h11 = e; _h11 < e + i; _h11++) {\n          var _e28 = o.getParsed(_h11),\n              _i38 = s || $(_e28[a.axis]) ? {\n            base: r,\n            head: r\n          } : o._calculateBarValuePixels(_h11),\n              _f2 = o._calculateBarIndexPixels(_h11, c),\n              _g2 = (_e28._stacks || {})[a.axis],\n              _p = {\n            horizontal: l,\n            base: _i38.base,\n            enableBorderRadius: !_g2 || ho(_e28._custom) || o.index === _g2._top || o.index === _g2._bottom,\n            x: l ? _i38.head : _f2.center,\n            y: l ? _f2.center : _i38.head,\n            height: l ? _f2.size : Math.abs(_i38.size),\n            width: l ? Math.abs(_i38.size) : _f2.size\n          };\n\n          u && (_p.options = d || o.resolveDataElementOptions(_h11, t[_h11].active ? \"active\" : n)), o.updateElement(t[_h11], _h11, _p, n);\n        }\n      }\n    }, {\n      key: \"_getStacks\",\n      value: function _getStacks(t, e) {\n        var i = this._cachedMeta.iScale,\n            n = i.getMatchingVisibleMetas(this._type),\n            o = i.options.stacked,\n            s = n.length,\n            a = [];\n        var r, l;\n\n        for (r = 0; r < s; ++r) {\n          if (l = n[r], l.controller.options.grouped) {\n            if (void 0 !== e) {\n              var _t39 = l.controller.getParsed(e)[l.controller._cachedMeta.vScale.axis];\n\n              if ($(_t39) || isNaN(_t39)) continue;\n            }\n\n            if ((!1 === o || -1 === a.indexOf(l.stack) || void 0 === o && void 0 === l.stack) && a.push(l.stack), l.index === t) break;\n          }\n        }\n\n        return a.length || a.push(void 0), a;\n      }\n    }, {\n      key: \"_getStackCount\",\n      value: function _getStackCount(t) {\n        return this._getStacks(void 0, t).length;\n      }\n    }, {\n      key: \"_getStackIndex\",\n      value: function _getStackIndex(t, e, i) {\n        var n = this._getStacks(t, i),\n            o = void 0 !== e ? n.indexOf(e) : -1;\n\n        return -1 === o ? n.length - 1 : o;\n      }\n    }, {\n      key: \"_getRuler\",\n      value: function _getRuler() {\n        var t = this,\n            e = t.options,\n            i = t._cachedMeta,\n            n = i.iScale,\n            o = [];\n        var s, a;\n\n        for (s = 0, a = i.data.length; s < a; ++s) {\n          o.push(n.getPixelForValue(t.getParsed(s)[n.axis], s));\n        }\n\n        var r = e.barThickness;\n        return {\n          min: r || ro(n),\n          pixels: o,\n          start: n._startPixel,\n          end: n._endPixel,\n          stackCount: t._getStackCount(),\n          scale: n,\n          grouped: e.grouped,\n          ratio: r ? 1 : e.categoryPercentage * e.barPercentage\n        };\n      }\n    }, {\n      key: \"_calculateBarValuePixels\",\n      value: function _calculateBarValuePixels(t) {\n        var e = this,\n            _e$_cachedMeta = e._cachedMeta,\n            i = _e$_cachedMeta.vScale,\n            n = _e$_cachedMeta._stacked,\n            _e$options2 = e.options,\n            o = _e$options2.base,\n            s = _e$options2.minBarLength,\n            a = e.getParsed(t),\n            r = a._custom,\n            l = ho(r);\n        var c,\n            h,\n            d = a[i.axis],\n            u = 0,\n            f = n ? e.applyStack(i, a, n) : d;\n        f !== d && (u = f - d, f = d), l && (d = r.barStart, f = r.barEnd - r.barStart, 0 !== d && Dt(d) !== Dt(r.barEnd) && (u = 0), u += d);\n        var g = $(o) || l ? u : o;\n        var p = i.getPixelForValue(g);\n        c = this.chart.getDataVisibility(t) ? i.getPixelForValue(u + f) : p, h = c - p, void 0 !== s && Math.abs(h) < s && (h = h < 0 ? -s : s, 0 === d && (p -= h / 2), c = p + h);\n        var m = o || 0;\n\n        if (p === i.getPixelForValue(m)) {\n          var _t40 = i.getLineWidthForValue(m) / 2;\n\n          h > 0 ? (p += _t40, h -= _t40) : h < 0 && (p -= _t40, h += _t40);\n        }\n\n        return {\n          size: h,\n          base: p,\n          head: c,\n          center: c + h / 2\n        };\n      }\n    }, {\n      key: \"_calculateBarIndexPixels\",\n      value: function _calculateBarIndexPixels(t, e) {\n        var i = this,\n            n = e.scale,\n            o = i.options,\n            s = o.skipNull,\n            a = K(o.maxBarThickness, 1 / 0);\n        var r, l;\n\n        if (e.grouped) {\n          var _n30 = s ? i._getStackCount(t) : e.stackCount,\n              _c10 = \"flex\" === o.barThickness ? function (t, e, i, n) {\n            var o = e.pixels,\n                s = o[t];\n            var a = t > 0 ? o[t - 1] : null,\n                r = t < o.length - 1 ? o[t + 1] : null;\n            var l = i.categoryPercentage;\n            null === a && (a = s - (null === r ? e.end - e.start : r - s)), null === r && (r = s + s - a);\n            var c = s - (s - Math.min(a, r)) / 2 * l;\n            return {\n              chunk: Math.abs(r - a) / 2 * l / n,\n              ratio: i.barPercentage,\n              start: c\n            };\n          }(t, e, o, _n30) : function (t, e, i, n) {\n            var o = i.barThickness;\n            var s, a;\n            return $(o) ? (s = e.min * i.categoryPercentage, a = i.barPercentage) : (s = o * n, a = 1), {\n              chunk: s / n,\n              ratio: a,\n              start: e.pixels[t] - s / 2\n            };\n          }(t, e, o, _n30),\n              _h12 = i._getStackIndex(i.index, i._cachedMeta.stack, s ? t : void 0);\n\n          r = _c10.start + _c10.chunk * _h12 + _c10.chunk / 2, l = Math.min(a, _c10.chunk * _c10.ratio);\n        } else r = n.getPixelForValue(i.getParsed(t)[n.axis], t), l = Math.min(a, e.min * e.ratio);\n\n        return {\n          base: r - l / 2,\n          head: r + l / 2,\n          center: r,\n          size: l\n        };\n      }\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        var t = this,\n            e = t._cachedMeta,\n            i = e.vScale,\n            n = e.data,\n            o = n.length;\n        var s = 0;\n\n        for (; s < o; ++s) {\n          null !== t.getParsed(s)[i.axis] && n[s].draw(t._ctx);\n        }\n      }\n    }]);\n\n    return uo;\n  }(Ei);\n\n  uo.id = \"bar\", uo.defaults = {\n    datasetElementType: !1,\n    dataElementType: \"bar\",\n    categoryPercentage: .8,\n    barPercentage: .9,\n    grouped: !0,\n    animations: {\n      numbers: {\n        type: \"number\",\n        properties: [\"x\", \"y\", \"base\", \"width\", \"height\"]\n      }\n    }\n  }, uo.overrides = {\n    interaction: {\n      mode: \"index\"\n    },\n    scales: {\n      _index_: {\n        type: \"category\",\n        offset: !0,\n        grid: {\n          offset: !0\n        }\n      },\n      _value_: {\n        type: \"linear\",\n        beginAtZero: !0\n      }\n    }\n  };\n\n  var fo = /*#__PURE__*/function (_Ei2) {\n    _inherits(fo, _Ei2);\n\n    var _super5 = _createSuper(fo);\n\n    function fo() {\n      _classCallCheck(this, fo);\n\n      return _super5.apply(this, arguments);\n    }\n\n    _createClass(fo, [{\n      key: \"initialize\",\n      value: function initialize() {\n        this.enableOptionSharing = !0, _get2(_getPrototypeOf(fo.prototype), \"initialize\", this).call(this);\n      }\n    }, {\n      key: \"parseObjectData\",\n      value: function parseObjectData(t, e, i, n) {\n        var o = t.xScale,\n            s = t.yScale,\n            _this$_parsing3 = this._parsing,\n            _this$_parsing3$xAxis = _this$_parsing3.xAxisKey,\n            a = _this$_parsing3$xAxis === void 0 ? \"x\" : _this$_parsing3$xAxis,\n            _this$_parsing3$yAxis = _this$_parsing3.yAxisKey,\n            r = _this$_parsing3$yAxis === void 0 ? \"y\" : _this$_parsing3$yAxis,\n            l = [];\n        var c, h, d;\n\n        for (c = i, h = i + n; c < h; ++c) {\n          d = e[c], l.push({\n            x: o.parse(lt(d, a), c),\n            y: s.parse(lt(d, r), c),\n            _custom: d && d.r && +d.r\n          });\n        }\n\n        return l;\n      }\n    }, {\n      key: \"getMaxOverflow\",\n      value: function getMaxOverflow() {\n        var _this$_cachedMeta = this._cachedMeta,\n            t = _this$_cachedMeta.data,\n            e = _this$_cachedMeta._parsed;\n        var i = 0;\n\n        for (var _n31 = t.length - 1; _n31 >= 0; --_n31) {\n          i = Math.max(i, t[_n31].size() / 2, e[_n31]._custom);\n        }\n\n        return i > 0 && i;\n      }\n    }, {\n      key: \"getLabelAndValue\",\n      value: function getLabelAndValue(t) {\n        var e = this._cachedMeta,\n            i = e.xScale,\n            n = e.yScale,\n            o = this.getParsed(t),\n            s = i.getLabelForValue(o.x),\n            a = n.getLabelForValue(o.y),\n            r = o._custom;\n        return {\n          label: e.label,\n          value: \"(\" + s + \", \" + a + (r ? \", \" + r : \"\") + \")\"\n        };\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {\n        var e = this._cachedMeta.data;\n        this.updateElements(e, 0, e.length, t);\n      }\n    }, {\n      key: \"updateElements\",\n      value: function updateElements(t, e, i, n) {\n        var o = this,\n            s = \"reset\" === n,\n            _o$_cachedMeta = o._cachedMeta,\n            a = _o$_cachedMeta.iScale,\n            r = _o$_cachedMeta.vScale,\n            l = o.resolveDataElementOptions(e, n),\n            c = o.getSharedOptions(l),\n            h = o.includeOptions(n, c),\n            d = a.axis,\n            u = r.axis;\n\n        for (var _l12 = e; _l12 < e + i; _l12++) {\n          var _e29 = t[_l12],\n              _i39 = !s && o.getParsed(_l12),\n              _c11 = {},\n              _f3 = _c11[d] = s ? a.getPixelForDecimal(.5) : a.getPixelForValue(_i39[d]),\n              _g3 = _c11[u] = s ? r.getBasePixel() : r.getPixelForValue(_i39[u]);\n\n          _c11.skip = isNaN(_f3) || isNaN(_g3), h && (_c11.options = o.resolveDataElementOptions(_l12, _e29.active ? \"active\" : n), s && (_c11.options.radius = 0)), o.updateElement(_e29, _l12, _c11, n);\n        }\n\n        o.updateSharedOptions(c, n, l);\n      }\n    }, {\n      key: \"resolveDataElementOptions\",\n      value: function resolveDataElementOptions(t, e) {\n        var i = this.getParsed(t);\n\n        var n = _get2(_getPrototypeOf(fo.prototype), \"resolveDataElementOptions\", this).call(this, t, e);\n\n        n.$shared && (n = Object.assign({}, n, {\n          $shared: !1\n        }));\n        var o = n.radius;\n        return \"active\" !== e && (n.radius = 0), n.radius += K(i && i._custom, o), n;\n      }\n    }]);\n\n    return fo;\n  }(Ei);\n\n  fo.id = \"bubble\", fo.defaults = {\n    datasetElementType: !1,\n    dataElementType: \"point\",\n    animations: {\n      numbers: {\n        type: \"number\",\n        properties: [\"x\", \"y\", \"borderWidth\", \"radius\"]\n      }\n    }\n  }, fo.overrides = {\n    scales: {\n      x: {\n        type: \"linear\"\n      },\n      y: {\n        type: \"linear\"\n      }\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          title: function title() {\n            return \"\";\n          }\n        }\n      }\n    }\n  };\n\n  var go = /*#__PURE__*/function (_Ei3) {\n    _inherits(go, _Ei3);\n\n    var _super6 = _createSuper(go);\n\n    function go(t, e) {\n      var _this4;\n\n      _classCallCheck(this, go);\n\n      _this4 = _super6.call(this, t, e), _this4.enableOptionSharing = !0, _this4.innerRadius = void 0, _this4.outerRadius = void 0, _this4.offsetX = void 0, _this4.offsetY = void 0;\n      return _this4;\n    }\n\n    _createClass(go, [{\n      key: \"linkScales\",\n      value: function linkScales() {}\n    }, {\n      key: \"parse\",\n      value: function parse(t, e) {\n        var i = this.getDataset().data,\n            n = this._cachedMeta;\n        var o, s;\n\n        for (o = t, s = t + e; o < s; ++o) {\n          n._parsed[o] = +i[o];\n        }\n      }\n    }, {\n      key: \"_getRotation\",\n      value: function _getRotation() {\n        return Et(this.options.rotation - 90);\n      }\n    }, {\n      key: \"_getCircumference\",\n      value: function _getCircumference() {\n        return Et(this.options.circumference);\n      }\n    }, {\n      key: \"_getRotationExtents\",\n      value: function _getRotationExtents() {\n        var t = _t,\n            e = -_t;\n        var i = this;\n\n        for (var _n32 = 0; _n32 < i.chart.data.datasets.length; ++_n32) {\n          if (i.chart.isDatasetVisible(_n32)) {\n            var _o26 = i.chart.getDatasetMeta(_n32).controller,\n                _s18 = _o26._getRotation(),\n                _a16 = _o26._getCircumference();\n\n            t = Math.min(t, _s18), e = Math.max(e, _s18 + _a16);\n          }\n        }\n\n        return {\n          rotation: t,\n          circumference: e - t\n        };\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {\n        var e = this,\n            i = e.chart,\n            n = i.chartArea,\n            o = e._cachedMeta,\n            s = o.data,\n            a = e.getMaxBorderWidth() + e.getMaxOffset(s) + e.options.spacing,\n            r = Math.max((Math.min(n.width, n.height) - a) / 2, 0),\n            l = Math.min(G(e.options.cutout, r), 1),\n            c = e._getRingWeight(e.index),\n            _e$_getRotationExtent = e._getRotationExtents(),\n            h = _e$_getRotationExtent.circumference,\n            d = _e$_getRotationExtent.rotation,\n            _ref8 = function (t, e, i) {\n          var n = 1,\n              o = 1,\n              s = 0,\n              a = 0;\n\n          if (e < _t) {\n            var _r9 = t,\n                _l13 = _r9 + e,\n                _c12 = Math.cos(_r9),\n                _h13 = Math.sin(_r9),\n                _d4 = Math.cos(_l13),\n                _u4 = Math.sin(_l13),\n                _f4 = function _f4(t, e, n) {\n              return Nt(t, _r9, _l13, !0) ? 1 : Math.max(e, e * i, n, n * i);\n            },\n                _g4 = function _g4(t, e, n) {\n              return Nt(t, _r9, _l13, !0) ? -1 : Math.min(e, e * i, n, n * i);\n            },\n                _p2 = _f4(0, _c12, _d4),\n                _m = _f4(Mt, _h13, _u4),\n                _x = _g4(bt, _c12, _d4),\n                _b = _g4(bt + Mt, _h13, _u4);\n\n            n = (_p2 - _x) / 2, o = (_m - _b) / 2, s = -(_p2 + _x) / 2, a = -(_m + _b) / 2;\n          }\n\n          return {\n            ratioX: n,\n            ratioY: o,\n            offsetX: s,\n            offsetY: a\n          };\n        }(d, h, l),\n            u = _ref8.ratioX,\n            f = _ref8.ratioY,\n            g = _ref8.offsetX,\n            p = _ref8.offsetY,\n            m = (n.width - a) / u,\n            x = (n.height - a) / f,\n            b = Math.max(Math.min(m, x) / 2, 0),\n            _ = Z(e.options.radius, b),\n            y = (_ - Math.max(_ * l, 0)) / e._getVisibleDatasetWeightTotal();\n\n        e.offsetX = g * _, e.offsetY = p * _, o.total = e.calculateTotal(), e.outerRadius = _ - y * e._getRingWeightOffset(e.index), e.innerRadius = Math.max(e.outerRadius - y * c, 0), e.updateElements(s, 0, s.length, t);\n      }\n    }, {\n      key: \"_circumference\",\n      value: function _circumference(t, e) {\n        var i = this,\n            n = i.options,\n            o = i._cachedMeta,\n            s = i._getCircumference();\n\n        return e && n.animation.animateRotate || !this.chart.getDataVisibility(t) || null === o._parsed[t] ? 0 : i.calculateCircumference(o._parsed[t] * s / _t);\n      }\n    }, {\n      key: \"updateElements\",\n      value: function updateElements(t, e, i, n) {\n        var o = this,\n            s = \"reset\" === n,\n            a = o.chart,\n            r = a.chartArea,\n            l = a.options.animation,\n            c = (r.left + r.right) / 2,\n            h = (r.top + r.bottom) / 2,\n            d = s && l.animateScale,\n            u = d ? 0 : o.innerRadius,\n            f = d ? 0 : o.outerRadius,\n            g = o.resolveDataElementOptions(e, n),\n            p = o.getSharedOptions(g),\n            m = o.includeOptions(n, p);\n\n        var x,\n            b = o._getRotation();\n\n        for (x = 0; x < e; ++x) {\n          b += o._circumference(x, s);\n        }\n\n        for (x = e; x < e + i; ++x) {\n          var _e30 = o._circumference(x, s),\n              _i40 = t[x],\n              _a17 = {\n            x: c + o.offsetX,\n            y: h + o.offsetY,\n            startAngle: b,\n            endAngle: b + _e30,\n            circumference: _e30,\n            outerRadius: f,\n            innerRadius: u\n          };\n\n          m && (_a17.options = p || o.resolveDataElementOptions(x, _i40.active ? \"active\" : n)), b += _e30, o.updateElement(_i40, x, _a17, n);\n        }\n\n        o.updateSharedOptions(p, n, g);\n      }\n    }, {\n      key: \"calculateTotal\",\n      value: function calculateTotal() {\n        var t = this._cachedMeta,\n            e = t.data;\n        var i,\n            n = 0;\n\n        for (i = 0; i < e.length; i++) {\n          var _e31 = t._parsed[i];\n          null !== _e31 && !isNaN(_e31) && this.chart.getDataVisibility(i) && (n += Math.abs(_e31));\n        }\n\n        return n;\n      }\n    }, {\n      key: \"calculateCircumference\",\n      value: function calculateCircumference(t) {\n        var e = this._cachedMeta.total;\n        return e > 0 && !isNaN(t) ? _t * (Math.abs(t) / e) : 0;\n      }\n    }, {\n      key: \"getLabelAndValue\",\n      value: function getLabelAndValue(t) {\n        var e = this._cachedMeta,\n            i = this.chart,\n            n = i.data.labels || [],\n            o = Fi(e._parsed[t], i.options.locale);\n        return {\n          label: n[t] || \"\",\n          value: o\n        };\n      }\n    }, {\n      key: \"getMaxBorderWidth\",\n      value: function getMaxBorderWidth(t) {\n        var e = this;\n        var i = 0;\n        var n = e.chart;\n        var o, s, a, r, l;\n        if (!t) for (o = 0, s = n.data.datasets.length; o < s; ++o) {\n          if (n.isDatasetVisible(o)) {\n            a = n.getDatasetMeta(o), t = a.data, r = a.controller, r !== e && r.configure();\n            break;\n          }\n        }\n        if (!t) return 0;\n\n        for (o = 0, s = t.length; o < s; ++o) {\n          l = r.resolveDataElementOptions(o), \"inner\" !== l.borderAlign && (i = Math.max(i, l.borderWidth || 0, l.hoverBorderWidth || 0));\n        }\n\n        return i;\n      }\n    }, {\n      key: \"getMaxOffset\",\n      value: function getMaxOffset(t) {\n        var e = 0;\n\n        for (var _i41 = 0, _n33 = t.length; _i41 < _n33; ++_i41) {\n          var _t41 = this.resolveDataElementOptions(_i41);\n\n          e = Math.max(e, _t41.offset || 0, _t41.hoverOffset || 0);\n        }\n\n        return e;\n      }\n    }, {\n      key: \"_getRingWeightOffset\",\n      value: function _getRingWeightOffset(t) {\n        var e = 0;\n\n        for (var _i42 = 0; _i42 < t; ++_i42) {\n          this.chart.isDatasetVisible(_i42) && (e += this._getRingWeight(_i42));\n        }\n\n        return e;\n      }\n    }, {\n      key: \"_getRingWeight\",\n      value: function _getRingWeight(t) {\n        return Math.max(K(this.chart.data.datasets[t].weight, 1), 0);\n      }\n    }, {\n      key: \"_getVisibleDatasetWeightTotal\",\n      value: function _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n      }\n    }]);\n\n    return go;\n  }(Ei);\n\n  go.id = \"doughnut\", go.defaults = {\n    datasetElementType: !1,\n    dataElementType: \"arc\",\n    animation: {\n      animateRotate: !0,\n      animateScale: !1\n    },\n    animations: {\n      numbers: {\n        type: \"number\",\n        properties: [\"circumference\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"startAngle\", \"x\", \"y\", \"offset\", \"borderWidth\", \"spacing\"]\n      }\n    },\n    cutout: \"50%\",\n    rotation: 0,\n    circumference: 360,\n    radius: \"100%\",\n    spacing: 0,\n    indexAxis: \"r\"\n  }, go.descriptors = {\n    _scriptable: function _scriptable(t) {\n      return \"spacing\" !== t;\n    },\n    _indexable: function _indexable(t) {\n      return \"spacing\" !== t;\n    }\n  }, go.overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels: function generateLabels(t) {\n            var e = t.data;\n\n            if (e.labels.length && e.datasets.length) {\n              var _i43 = t.legend.options.labels.pointStyle;\n              return e.labels.map(function (e, n) {\n                var o = t.getDatasetMeta(0).controller.getStyle(n);\n                return {\n                  text: e,\n                  fillStyle: o.backgroundColor,\n                  strokeStyle: o.borderColor,\n                  lineWidth: o.borderWidth,\n                  pointStyle: _i43,\n                  hidden: !t.getDataVisibility(n),\n                  index: n\n                };\n              });\n            }\n\n            return [];\n          }\n        },\n        onClick: function onClick(t, e, i) {\n          i.chart.toggleDataVisibility(e.index), i.chart.update();\n        }\n      },\n      tooltip: {\n        callbacks: {\n          title: function title() {\n            return \"\";\n          },\n          label: function label(t) {\n            var e = t.label;\n            var i = \": \" + t.formattedValue;\n            return Y(e) ? (e = e.slice(), e[0] += i) : e += i, e;\n          }\n        }\n      }\n    }\n  };\n\n  var po = /*#__PURE__*/function (_Ei4) {\n    _inherits(po, _Ei4);\n\n    var _super7 = _createSuper(po);\n\n    function po() {\n      _classCallCheck(this, po);\n\n      return _super7.apply(this, arguments);\n    }\n\n    _createClass(po, [{\n      key: \"initialize\",\n      value: function initialize() {\n        this.enableOptionSharing = !0, _get2(_getPrototypeOf(po.prototype), \"initialize\", this).call(this);\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {\n        var e = this,\n            i = e._cachedMeta,\n            n = i.dataset,\n            _i$data = i.data,\n            o = _i$data === void 0 ? [] : _i$data,\n            s = i._dataset,\n            a = e.chart._animationsDisabled;\n\n        var _ref9 = function (t, e, i) {\n          var n = e.length;\n          var o = 0,\n              s = n;\n\n          if (t._sorted) {\n            var _a18 = t.iScale,\n                _r10 = t._parsed,\n                _l14 = _a18.axis,\n                _a18$getUserBounds = _a18.getUserBounds(),\n                _c13 = _a18$getUserBounds.min,\n                _h14 = _a18$getUserBounds.max,\n                _d5 = _a18$getUserBounds.minDefined,\n                _u5 = _a18$getUserBounds.maxDefined;\n\n            _d5 && (o = Ht(Math.min(se(_r10, _a18.axis, _c13).lo, i ? n : se(e, _l14, _a18.getPixelForValue(_c13)).lo), 0, n - 1)), s = _u5 ? Ht(Math.max(se(_r10, _a18.axis, _h14).hi + 1, i ? 0 : se(e, _l14, _a18.getPixelForValue(_h14)).hi + 1), o, n) - o : n - o;\n          }\n\n          return {\n            start: o,\n            count: s\n          };\n        }(i, o, a),\n            r = _ref9.start,\n            l = _ref9.count;\n\n        e._drawStart = r, e._drawCount = l, function (t) {\n          var e = t.xScale,\n              i = t.yScale,\n              n = t._scaleRanges,\n              o = {\n            xmin: e.min,\n            xmax: e.max,\n            ymin: i.min,\n            ymax: i.max\n          };\n          if (!n) return t._scaleRanges = o, !0;\n          var s = n.xmin !== e.min || n.xmax !== e.max || n.ymin !== i.min || n.ymax !== i.max;\n          return Object.assign(n, o), s;\n        }(i) && (r = 0, l = o.length), n._decimated = !!s._decimated, n.points = o;\n        var c = e.resolveDatasetElementOptions(t);\n        e.options.showLine || (c.borderWidth = 0), c.segment = e.options.segment, e.updateElement(n, void 0, {\n          animated: !a,\n          options: c\n        }, t), e.updateElements(o, r, l, t);\n      }\n    }, {\n      key: \"updateElements\",\n      value: function updateElements(t, e, i, n) {\n        var o = this,\n            s = \"reset\" === n,\n            _o$_cachedMeta2 = o._cachedMeta,\n            a = _o$_cachedMeta2.iScale,\n            r = _o$_cachedMeta2.vScale,\n            l = _o$_cachedMeta2._stacked,\n            c = o.resolveDataElementOptions(e, n),\n            h = o.getSharedOptions(c),\n            d = o.includeOptions(n, h),\n            u = a.axis,\n            f = r.axis,\n            g = o.options.spanGaps,\n            p = Tt(g) ? g : Number.POSITIVE_INFINITY,\n            m = o.chart._animationsDisabled || s || \"none\" === n;\n        var x = e > 0 && o.getParsed(e - 1);\n\n        for (var _c14 = e; _c14 < e + i; ++_c14) {\n          var _e32 = t[_c14],\n              _i44 = o.getParsed(_c14),\n              _g5 = m ? _e32 : {},\n              _b2 = $(_i44[f]),\n              _2 = _g5[u] = a.getPixelForValue(_i44[u], _c14),\n              _y = _g5[f] = s || _b2 ? r.getBasePixel() : r.getPixelForValue(l ? o.applyStack(r, _i44, l) : _i44[f], _c14);\n\n          _g5.skip = isNaN(_2) || isNaN(_y) || _b2, _g5.stop = _c14 > 0 && _i44[u] - x[u] > p, _g5.parsed = _i44, d && (_g5.options = h || o.resolveDataElementOptions(_c14, _e32.active ? \"active\" : n)), m || o.updateElement(_e32, _c14, _g5, n), x = _i44;\n        }\n\n        o.updateSharedOptions(h, n, c);\n      }\n    }, {\n      key: \"getMaxOverflow\",\n      value: function getMaxOverflow() {\n        var t = this,\n            e = t._cachedMeta,\n            i = e.dataset,\n            n = i.options && i.options.borderWidth || 0,\n            o = e.data || [];\n        if (!o.length) return n;\n        var s = o[0].size(t.resolveDataElementOptions(0)),\n            a = o[o.length - 1].size(t.resolveDataElementOptions(o.length - 1));\n        return Math.max(n, s, a) / 2;\n      }\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        var t = this._cachedMeta;\n        t.dataset.updateControlPoints(this.chart.chartArea, t.iScale.axis), _get2(_getPrototypeOf(po.prototype), \"draw\", this).call(this);\n      }\n    }]);\n\n    return po;\n  }(Ei);\n\n  po.id = \"line\", po.defaults = {\n    datasetElementType: \"line\",\n    dataElementType: \"point\",\n    showLine: !0,\n    spanGaps: !1\n  }, po.overrides = {\n    scales: {\n      _index_: {\n        type: \"category\"\n      },\n      _value_: {\n        type: \"linear\"\n      }\n    }\n  };\n\n  var mo = /*#__PURE__*/function (_Ei5) {\n    _inherits(mo, _Ei5);\n\n    var _super8 = _createSuper(mo);\n\n    function mo(t, e) {\n      var _this5;\n\n      _classCallCheck(this, mo);\n\n      _this5 = _super8.call(this, t, e), _this5.innerRadius = void 0, _this5.outerRadius = void 0;\n      return _this5;\n    }\n\n    _createClass(mo, [{\n      key: \"getLabelAndValue\",\n      value: function getLabelAndValue(t) {\n        var e = this._cachedMeta,\n            i = this.chart,\n            n = i.data.labels || [],\n            o = Fi(e._parsed[t].r, i.options.locale);\n        return {\n          label: n[t] || \"\",\n          value: o\n        };\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {\n        var e = this._cachedMeta.data;\n        this._updateRadius(), this.updateElements(e, 0, e.length, t);\n      }\n    }, {\n      key: \"_updateRadius\",\n      value: function _updateRadius() {\n        var t = this,\n            e = t.chart,\n            i = e.chartArea,\n            n = e.options,\n            o = Math.min(i.right - i.left, i.bottom - i.top),\n            s = Math.max(o / 2, 0),\n            a = (s - Math.max(n.cutoutPercentage ? s / 100 * n.cutoutPercentage : 1, 0)) / e.getVisibleDatasetCount();\n        t.outerRadius = s - a * t.index, t.innerRadius = t.outerRadius - a;\n      }\n    }, {\n      key: \"updateElements\",\n      value: function updateElements(t, e, i, n) {\n        var o = this,\n            s = \"reset\" === n,\n            a = o.chart,\n            r = o.getDataset(),\n            l = a.options.animation,\n            c = o._cachedMeta.rScale,\n            h = c.xCenter,\n            d = c.yCenter,\n            u = c.getIndexAngle(0) - .5 * bt;\n        var f,\n            g = u;\n        var p = 360 / o.countVisibleElements();\n\n        for (f = 0; f < e; ++f) {\n          g += o._computeAngle(f, n, p);\n        }\n\n        for (f = e; f < e + i; f++) {\n          var _e33 = t[f];\n\n          var _i45 = g,\n              _m2 = g + o._computeAngle(f, n, p),\n              _x2 = a.getDataVisibility(f) ? c.getDistanceFromCenterForValue(r.data[f]) : 0;\n\n          g = _m2, s && (l.animateScale && (_x2 = 0), l.animateRotate && (_i45 = _m2 = u));\n          var _b3 = {\n            x: h,\n            y: d,\n            innerRadius: 0,\n            outerRadius: _x2,\n            startAngle: _i45,\n            endAngle: _m2,\n            options: o.resolveDataElementOptions(f, _e33.active ? \"active\" : n)\n          };\n          o.updateElement(_e33, f, _b3, n);\n        }\n      }\n    }, {\n      key: \"countVisibleElements\",\n      value: function countVisibleElements() {\n        var _this6 = this;\n\n        var t = this.getDataset(),\n            e = this._cachedMeta;\n        var i = 0;\n        return e.data.forEach(function (e, n) {\n          !isNaN(t.data[n]) && _this6.chart.getDataVisibility(n) && i++;\n        }), i;\n      }\n    }, {\n      key: \"_computeAngle\",\n      value: function _computeAngle(t, e, i) {\n        return this.chart.getDataVisibility(t) ? Et(this.resolveDataElementOptions(t, e).angle || i) : 0;\n      }\n    }]);\n\n    return mo;\n  }(Ei);\n\n  mo.id = \"polarArea\", mo.defaults = {\n    dataElementType: \"arc\",\n    animation: {\n      animateRotate: !0,\n      animateScale: !0\n    },\n    animations: {\n      numbers: {\n        type: \"number\",\n        properties: [\"x\", \"y\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\"]\n      }\n    },\n    indexAxis: \"r\",\n    startAngle: 0\n  }, mo.overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels: function generateLabels(t) {\n            var e = t.data;\n\n            if (e.labels.length && e.datasets.length) {\n              var _i46 = t.legend.options.labels.pointStyle;\n              return e.labels.map(function (e, n) {\n                var o = t.getDatasetMeta(0).controller.getStyle(n);\n                return {\n                  text: e,\n                  fillStyle: o.backgroundColor,\n                  strokeStyle: o.borderColor,\n                  lineWidth: o.borderWidth,\n                  pointStyle: _i46,\n                  hidden: !t.getDataVisibility(n),\n                  index: n\n                };\n              });\n            }\n\n            return [];\n          }\n        },\n        onClick: function onClick(t, e, i) {\n          i.chart.toggleDataVisibility(e.index), i.chart.update();\n        }\n      },\n      tooltip: {\n        callbacks: {\n          title: function title() {\n            return \"\";\n          },\n          label: function label(t) {\n            return t.chart.data.labels[t.dataIndex] + \": \" + t.formattedValue;\n          }\n        }\n      }\n    },\n    scales: {\n      r: {\n        type: \"radialLinear\",\n        angleLines: {\n          display: !1\n        },\n        beginAtZero: !0,\n        grid: {\n          circular: !0\n        },\n        pointLabels: {\n          display: !1\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  var xo = /*#__PURE__*/function (_go) {\n    _inherits(xo, _go);\n\n    var _super9 = _createSuper(xo);\n\n    function xo() {\n      _classCallCheck(this, xo);\n\n      return _super9.apply(this, arguments);\n    }\n\n    return xo;\n  }(go);\n\n  xo.id = \"pie\", xo.defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: \"100%\"\n  };\n\n  var bo = /*#__PURE__*/function (_Ei6) {\n    _inherits(bo, _Ei6);\n\n    var _super10 = _createSuper(bo);\n\n    function bo() {\n      _classCallCheck(this, bo);\n\n      return _super10.apply(this, arguments);\n    }\n\n    _createClass(bo, [{\n      key: \"getLabelAndValue\",\n      value: function getLabelAndValue(t) {\n        var e = this._cachedMeta.vScale,\n            i = this.getParsed(t);\n        return {\n          label: e.getLabels()[t],\n          value: \"\" + e.getLabelForValue(i[e.axis])\n        };\n      }\n    }, {\n      key: \"update\",\n      value: function update(t) {\n        var e = this,\n            i = e._cachedMeta,\n            n = i.dataset,\n            o = i.data || [],\n            s = i.iScale.getLabels();\n\n        if (n.points = o, \"resize\" !== t) {\n          var _i47 = e.resolveDatasetElementOptions(t);\n\n          e.options.showLine || (_i47.borderWidth = 0);\n          var _a19 = {\n            _loop: !0,\n            _fullLoop: s.length === o.length,\n            options: _i47\n          };\n          e.updateElement(n, void 0, _a19, t);\n        }\n\n        e.updateElements(o, 0, o.length, t);\n      }\n    }, {\n      key: \"updateElements\",\n      value: function updateElements(t, e, i, n) {\n        var o = this,\n            s = o.getDataset(),\n            a = o._cachedMeta.rScale,\n            r = \"reset\" === n;\n\n        for (var _l15 = e; _l15 < e + i; _l15++) {\n          var _e34 = t[_l15],\n              _i48 = o.resolveDataElementOptions(_l15, _e34.active ? \"active\" : n),\n              _c15 = a.getPointPositionForValue(_l15, s.data[_l15]),\n              _h15 = r ? a.xCenter : _c15.x,\n              _d6 = r ? a.yCenter : _c15.y,\n              _u6 = {\n            x: _h15,\n            y: _d6,\n            angle: _c15.angle,\n            skip: isNaN(_h15) || isNaN(_d6),\n            options: _i48\n          };\n\n          o.updateElement(_e34, _l15, _u6, n);\n        }\n      }\n    }]);\n\n    return bo;\n  }(Ei);\n\n  bo.id = \"radar\", bo.defaults = {\n    datasetElementType: \"line\",\n    dataElementType: \"point\",\n    indexAxis: \"r\",\n    showLine: !0,\n    elements: {\n      line: {\n        fill: \"start\"\n      }\n    }\n  }, bo.overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: \"radialLinear\"\n      }\n    }\n  };\n\n  var _o = /*#__PURE__*/function (_po) {\n    _inherits(_o, _po);\n\n    var _super11 = _createSuper(_o);\n\n    function _o() {\n      _classCallCheck(this, _o);\n\n      return _super11.apply(this, arguments);\n    }\n\n    return _o;\n  }(po);\n\n  _o.id = \"scatter\", _o.defaults = {\n    showLine: !1,\n    fill: !1\n  }, _o.overrides = {\n    interaction: {\n      mode: \"point\"\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          title: function title() {\n            return \"\";\n          },\n          label: function label(t) {\n            return \"(\" + t.label + \", \" + t.formattedValue + \")\";\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        type: \"linear\"\n      },\n      y: {\n        type: \"linear\"\n      }\n    }\n  };\n  var yo = Object.freeze({\n    __proto__: null,\n    BarController: uo,\n    BubbleController: fo,\n    DoughnutController: go,\n    LineController: po,\n    PolarAreaController: mo,\n    PieController: xo,\n    RadarController: bo,\n    ScatterController: _o\n  });\n\n  function vo(t, e, i) {\n    var n = e.startAngle,\n        o = e.pixelMargin,\n        s = e.x,\n        a = e.y,\n        r = e.outerRadius,\n        l = e.innerRadius;\n    var c = o / r;\n    t.beginPath(), t.arc(s, a, r, n - c, i + c), l > o ? (c = o / l, t.arc(s, a, l, i + c, n - c, !0)) : t.arc(s, a, o, i + Mt, n - Mt), t.closePath(), t.clip();\n  }\n\n  function wo(t, e, i, n) {\n    var o = Ee(t.options.borderRadius, [\"outerStart\", \"outerEnd\", \"innerStart\", \"innerEnd\"]);\n\n    var s = (i - e) / 2,\n        a = Math.min(s, n * e / 2),\n        r = function r(t) {\n      var e = (i - Math.min(s, t)) * n / 2;\n      return Ht(t, 0, Math.min(s, e));\n    };\n\n    return {\n      outerStart: r(o.outerStart),\n      outerEnd: r(o.outerEnd),\n      innerStart: Ht(o.innerStart, 0, a),\n      innerEnd: Ht(o.innerEnd, 0, a)\n    };\n  }\n\n  function Mo(t, e, i, n) {\n    return {\n      x: i + t * Math.cos(e),\n      y: n + t * Math.sin(e)\n    };\n  }\n\n  function ko(t, e, i, n, o) {\n    var s = e.x,\n        a = e.y,\n        r = e.startAngle,\n        l = e.pixelMargin,\n        c = e.innerRadius,\n        h = Math.max(e.outerRadius + n + i - l, 0),\n        d = c > 0 ? c + n + i + l : 0;\n    var u = 0;\n    var f = o - r;\n\n    if (n) {\n      var _t42 = ((c > 0 ? c - n : 0) + (h > 0 ? h - n : 0)) / 2;\n\n      u = (f - (0 !== _t42 ? f * _t42 / (_t42 + n) : f)) / 2;\n    }\n\n    var g = (f - Math.max(.001, f * h - i / bt) / h) / 2,\n        p = r + g + u,\n        m = o - g - u,\n        _wo = wo(e, d, h, m - p),\n        x = _wo.outerStart,\n        b = _wo.outerEnd,\n        _ = _wo.innerStart,\n        y = _wo.innerEnd,\n        v = h - x,\n        w = h - b,\n        M = p + x / v,\n        k = m - b / w,\n        S = d + _,\n        P = d + y,\n        D = p + _ / S,\n        C = m - y / P;\n\n    if (t.beginPath(), t.arc(s, a, h, M, k), b > 0) {\n      var _e35 = Mo(w, k, s, a);\n\n      t.arc(_e35.x, _e35.y, b, k, m + Mt);\n    }\n\n    var O = Mo(P, m, s, a);\n\n    if (t.lineTo(O.x, O.y), y > 0) {\n      var _e36 = Mo(P, C, s, a);\n\n      t.arc(_e36.x, _e36.y, y, m + Mt, C + Math.PI);\n    }\n\n    if (t.arc(s, a, d, m - y / d, p + _ / d, !0), _ > 0) {\n      var _e37 = Mo(S, D, s, a);\n\n      t.arc(_e37.x, _e37.y, _, D + Math.PI, p - Mt);\n    }\n\n    var T = Mo(v, p, s, a);\n\n    if (t.lineTo(T.x, T.y), x > 0) {\n      var _e38 = Mo(v, M, s, a);\n\n      t.arc(_e38.x, _e38.y, x, p - Mt, M);\n    }\n\n    t.closePath();\n  }\n\n  function So(t, e, i, n, o) {\n    var s = e.options,\n        a = \"inner\" === s.borderAlign;\n    s.borderWidth && (a ? (t.lineWidth = 2 * s.borderWidth, t.lineJoin = \"round\") : (t.lineWidth = s.borderWidth, t.lineJoin = \"bevel\"), e.fullCircles && function (t, e, i) {\n      var n = e.x,\n          o = e.y,\n          s = e.startAngle,\n          a = e.pixelMargin,\n          r = e.fullCircles,\n          l = Math.max(e.outerRadius - a, 0),\n          c = e.innerRadius + a;\n      var h;\n\n      for (i && vo(t, e, s + _t), t.beginPath(), t.arc(n, o, c, s + _t, s, !0), h = 0; h < r; ++h) {\n        t.stroke();\n      }\n\n      for (t.beginPath(), t.arc(n, o, l, s, s + _t), h = 0; h < r; ++h) {\n        t.stroke();\n      }\n    }(t, e, a), a && vo(t, e, o), ko(t, e, i, n, o), t.stroke());\n  }\n\n  var Po = /*#__PURE__*/function (_zi2) {\n    _inherits(Po, _zi2);\n\n    var _super12 = _createSuper(Po);\n\n    function Po(t) {\n      var _this7;\n\n      _classCallCheck(this, Po);\n\n      _this7 = _super12.call(this), _this7.options = void 0, _this7.circumference = void 0, _this7.startAngle = void 0, _this7.endAngle = void 0, _this7.innerRadius = void 0, _this7.outerRadius = void 0, _this7.pixelMargin = 0, _this7.fullCircles = 0, t && Object.assign(_assertThisInitialized(_this7), t);\n      return _this7;\n    }\n\n    _createClass(Po, [{\n      key: \"inRange\",\n      value: function inRange(t, e, i) {\n        var n = this.getProps([\"x\", \"y\"], i),\n            _Ft = Ft(n, {\n          x: t,\n          y: e\n        }),\n            o = _Ft.angle,\n            s = _Ft.distance,\n            _this$getProps2 = this.getProps([\"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"circumference\"], i),\n            a = _this$getProps2.startAngle,\n            r = _this$getProps2.endAngle,\n            l = _this$getProps2.innerRadius,\n            c = _this$getProps2.outerRadius,\n            h = _this$getProps2.circumference,\n            d = this.options.spacing / 2;\n\n        return (h >= _t || Nt(o, a, r)) && s >= l + d && s <= c + d;\n      }\n    }, {\n      key: \"getCenterPoint\",\n      value: function getCenterPoint(t) {\n        var _this$getProps3 = this.getProps([\"x\", \"y\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"circumference\"], t),\n            e = _this$getProps3.x,\n            i = _this$getProps3.y,\n            n = _this$getProps3.startAngle,\n            o = _this$getProps3.endAngle,\n            s = _this$getProps3.innerRadius,\n            a = _this$getProps3.outerRadius,\n            _this$options5 = this.options,\n            r = _this$options5.offset,\n            l = _this$options5.spacing,\n            c = (n + o) / 2,\n            h = (s + a + l + r) / 2;\n\n        return {\n          x: e + Math.cos(c) * h,\n          y: i + Math.sin(c) * h\n        };\n      }\n    }, {\n      key: \"tooltipPosition\",\n      value: function tooltipPosition(t) {\n        return this.getCenterPoint(t);\n      }\n    }, {\n      key: \"draw\",\n      value: function draw(t) {\n        var e = this,\n            i = e.options,\n            n = e.circumference,\n            o = (i.offset || 0) / 2,\n            s = (i.spacing || 0) / 2;\n        if (e.pixelMargin = \"inner\" === i.borderAlign ? .33 : 0, e.fullCircles = n > _t ? Math.floor(n / _t) : 0, 0 === n || e.innerRadius < 0 || e.outerRadius < 0) return;\n        t.save();\n        var a = 0;\n\n        if (o) {\n          a = o / 2;\n\n          var _i49 = (e.startAngle + e.endAngle) / 2;\n\n          t.translate(Math.cos(_i49) * a, Math.sin(_i49) * a), e.circumference >= bt && (a = o);\n        }\n\n        t.fillStyle = i.backgroundColor, t.strokeStyle = i.borderColor;\n\n        var r = function (t, e, i, n) {\n          var o = e.fullCircles,\n              s = e.startAngle,\n              a = e.circumference;\n          var r = e.endAngle;\n\n          if (o) {\n            ko(t, e, i, n, s + _t);\n\n            for (var _e39 = 0; _e39 < o; ++_e39) {\n              t.fill();\n            }\n\n            isNaN(a) || (r = s + a % _t, a % _t == 0 && (r += _t));\n          }\n\n          return ko(t, e, i, n, r), t.fill(), r;\n        }(t, e, a, s);\n\n        So(t, e, a, s, r), t.restore();\n      }\n    }]);\n\n    return Po;\n  }(zi);\n\n  function Do(t, e) {\n    var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : e;\n    t.lineCap = K(i.borderCapStyle, e.borderCapStyle), t.setLineDash(K(i.borderDash, e.borderDash)), t.lineDashOffset = K(i.borderDashOffset, e.borderDashOffset), t.lineJoin = K(i.borderJoinStyle, e.borderJoinStyle), t.lineWidth = K(i.borderWidth, e.borderWidth), t.strokeStyle = K(i.borderColor, e.borderColor);\n  }\n\n  function Co(t, e, i) {\n    t.lineTo(i.x, i.y);\n  }\n\n  function Oo(t, e) {\n    var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var n = t.length,\n        _i$start = i.start,\n        o = _i$start === void 0 ? 0 : _i$start,\n        _i$end = i.end,\n        s = _i$end === void 0 ? n - 1 : _i$end,\n        a = e.start,\n        r = e.end,\n        l = Math.max(o, a),\n        c = Math.min(s, r),\n        h = o < a && s < a || o > r && s > r;\n    return {\n      count: n,\n      start: l,\n      loop: e.loop,\n      ilen: c < l && !h ? n + c - l : c - l\n    };\n  }\n\n  function To(t, e, i, n) {\n    var o = e.points,\n        s = e.options,\n        _Oo = Oo(o, i, n),\n        a = _Oo.count,\n        r = _Oo.start,\n        l = _Oo.loop,\n        c = _Oo.ilen,\n        h = function (t) {\n      return t.stepped ? Jt : t.tension || \"monotone\" === t.cubicInterpolationMode ? te : Co;\n    }(s);\n\n    var d,\n        u,\n        f,\n        _ref10 = n || {},\n        _ref10$move = _ref10.move,\n        g = _ref10$move === void 0 ? !0 : _ref10$move,\n        p = _ref10.reverse;\n\n    for (d = 0; d <= c; ++d) {\n      u = o[(r + (p ? c - d : d)) % a], u.skip || (g ? (t.moveTo(u.x, u.y), g = !1) : h(t, f, u, p, s.stepped), f = u);\n    }\n\n    return l && (u = o[(r + (p ? c : 0)) % a], h(t, f, u, p, s.stepped)), !!l;\n  }\n\n  function Ao(t, e, i, n) {\n    var o = e.points,\n        _Oo2 = Oo(o, i, n),\n        s = _Oo2.count,\n        a = _Oo2.start,\n        r = _Oo2.ilen,\n        _ref11 = n || {},\n        _ref11$move = _ref11.move,\n        l = _ref11$move === void 0 ? !0 : _ref11$move,\n        c = _ref11.reverse;\n\n    var h,\n        d,\n        u,\n        f,\n        g,\n        p,\n        m = 0,\n        x = 0;\n\n    var b = function b(t) {\n      return (a + (c ? r - t : t)) % s;\n    },\n        _ = function _() {\n      f !== g && (t.lineTo(m, g), t.lineTo(m, f), t.lineTo(m, p));\n    };\n\n    for (l && (d = o[b(0)], t.moveTo(d.x, d.y)), h = 0; h <= r; ++h) {\n      if (d = o[b(h)], d.skip) continue;\n\n      var _e40 = d.x,\n          _i50 = d.y,\n          _n34 = 0 | _e40;\n\n      _n34 === u ? (_i50 < f ? f = _i50 : _i50 > g && (g = _i50), m = (x * m + _e40) / ++x) : (_(), t.lineTo(_e40, _i50), u = _n34, x = 0, f = g = _i50), p = _i50;\n    }\n\n    _();\n  }\n\n  function Lo(t) {\n    var e = t.options,\n        i = e.borderDash && e.borderDash.length;\n    return !(t._decimated || t._loop || e.tension || \"monotone\" === e.cubicInterpolationMode || e.stepped || i) ? Ao : To;\n  }\n\n  Po.id = \"arc\", Po.defaults = {\n    borderAlign: \"center\",\n    borderColor: \"#fff\",\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: void 0\n  }, Po.defaultRoutes = {\n    backgroundColor: \"backgroundColor\"\n  };\n  var Ro = \"function\" == typeof Path2D;\n\n  function Eo(t, e, i, n) {\n    Ro && 1 === e.segments.length ? function (t, e, i, n) {\n      var o = e._path;\n      o || (o = e._path = new Path2D(), e.path(o, i, n) && o.closePath()), Do(t, e.options), t.stroke(o);\n    }(t, e, i, n) : function (t, e, i, n) {\n      var o = e.segments,\n          s = e.options,\n          a = Lo(e);\n\n      var _iterator17 = _createForOfIteratorHelper(o),\n          _step17;\n\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var _r11 = _step17.value;\n          Do(t, s, _r11.style), t.beginPath(), a(t, e, _r11, {\n            start: i,\n            end: i + n - 1\n          }) && t.closePath(), t.stroke();\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n    }(t, e, i, n);\n  }\n\n  var zo = /*#__PURE__*/function (_zi3) {\n    _inherits(zo, _zi3);\n\n    var _super13 = _createSuper(zo);\n\n    function zo(t) {\n      var _this8;\n\n      _classCallCheck(this, zo);\n\n      _this8 = _super13.call(this), _this8.animated = !0, _this8.options = void 0, _this8._loop = void 0, _this8._fullLoop = void 0, _this8._path = void 0, _this8._points = void 0, _this8._segments = void 0, _this8._decimated = !1, _this8._pointsUpdated = !1, t && Object.assign(_assertThisInitialized(_this8), t);\n      return _this8;\n    }\n\n    _createClass(zo, [{\n      key: \"updateControlPoints\",\n      value: function updateControlPoints(t, e) {\n        var i = this,\n            n = i.options;\n\n        if ((n.tension || \"monotone\" === n.cubicInterpolationMode) && !n.stepped && !i._pointsUpdated) {\n          var _o27 = n.spanGaps ? i._loop : i._fullLoop;\n\n          pn(i._points, n, t, _o27, e), i._pointsUpdated = !0;\n        }\n      }\n    }, {\n      key: \"points\",\n      get: function get() {\n        return this._points;\n      },\n      set: function set(t) {\n        var e = this;\n        e._points = t, delete e._segments, delete e._path, e._pointsUpdated = !1;\n      }\n    }, {\n      key: \"segments\",\n      get: function get() {\n        return this._segments || (this._segments = Pn(this, this.options.segment));\n      }\n    }, {\n      key: \"first\",\n      value: function first() {\n        var t = this.segments,\n            e = this.points;\n        return t.length && e[t[0].start];\n      }\n    }, {\n      key: \"last\",\n      value: function last() {\n        var t = this.segments,\n            e = this.points,\n            i = t.length;\n        return i && e[t[i - 1].end];\n      }\n    }, {\n      key: \"interpolate\",\n      value: function interpolate(t, e) {\n        var i = this,\n            n = i.options,\n            o = t[e],\n            s = i.points,\n            a = Sn(i, {\n          property: e,\n          start: o,\n          end: o\n        });\n        if (!a.length) return;\n\n        var r = [],\n            l = function (t) {\n          return t.stepped ? xn : t.tension || \"monotone\" === t.cubicInterpolationMode ? bn : mn;\n        }(n);\n\n        var c, h;\n\n        for (c = 0, h = a.length; c < h; ++c) {\n          var _a$c = a[c],\n              _i51 = _a$c.start,\n              _h16 = _a$c.end,\n              _d7 = s[_i51],\n              _u7 = s[_h16];\n\n          if (_d7 === _u7) {\n            r.push(_d7);\n            continue;\n          }\n\n          var _f5 = l(_d7, _u7, Math.abs((o - _d7[e]) / (_u7[e] - _d7[e])), n.stepped);\n\n          _f5[e] = t[e], r.push(_f5);\n        }\n\n        return 1 === r.length ? r[0] : r;\n      }\n    }, {\n      key: \"pathSegment\",\n      value: function pathSegment(t, e, i) {\n        return Lo(this)(t, this, e, i);\n      }\n    }, {\n      key: \"path\",\n      value: function path(t, e, i) {\n        var n = this,\n            o = n.segments,\n            s = Lo(n);\n        var a = n._loop;\n        e = e || 0, i = i || n.points.length - e;\n\n        var _iterator18 = _createForOfIteratorHelper(o),\n            _step18;\n\n        try {\n          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n            var _r12 = _step18.value;\n            a &= s(t, n, _r12, {\n              start: e,\n              end: e + i - 1\n            });\n          }\n        } catch (err) {\n          _iterator18.e(err);\n        } finally {\n          _iterator18.f();\n        }\n\n        return !!a;\n      }\n    }, {\n      key: \"draw\",\n      value: function draw(t, e, i, n) {\n        var o = this,\n            s = o.options || {};\n        (o.points || []).length && s.borderWidth && (t.save(), Eo(t, o, i, n), t.restore(), o.animated && (o._pointsUpdated = !1, o._path = void 0));\n      }\n    }]);\n\n    return zo;\n  }(zi);\n\n  function Io(t, e, i, n) {\n    var o = t.options,\n        _t$getProps = t.getProps([i], n),\n        s = _t$getProps[i];\n\n    return Math.abs(e - s) < o.radius + o.hitRadius;\n  }\n\n  zo.id = \"line\", zo.defaults = {\n    borderCapStyle: \"butt\",\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: \"miter\",\n    borderWidth: 3,\n    capBezierPoints: !0,\n    cubicInterpolationMode: \"default\",\n    fill: !1,\n    spanGaps: !1,\n    stepped: !1,\n    tension: 0\n  }, zo.defaultRoutes = {\n    backgroundColor: \"backgroundColor\",\n    borderColor: \"borderColor\"\n  }, zo.descriptors = {\n    _scriptable: !0,\n    _indexable: function _indexable(t) {\n      return \"borderDash\" !== t && \"fill\" !== t;\n    }\n  };\n\n  var Fo = /*#__PURE__*/function (_zi4) {\n    _inherits(Fo, _zi4);\n\n    var _super14 = _createSuper(Fo);\n\n    function Fo(t) {\n      var _this9;\n\n      _classCallCheck(this, Fo);\n\n      _this9 = _super14.call(this), _this9.options = void 0, _this9.parsed = void 0, _this9.skip = void 0, _this9.stop = void 0, t && Object.assign(_assertThisInitialized(_this9), t);\n      return _this9;\n    }\n\n    _createClass(Fo, [{\n      key: \"inRange\",\n      value: function inRange(t, e, i) {\n        var n = this.options,\n            _this$getProps4 = this.getProps([\"x\", \"y\"], i),\n            o = _this$getProps4.x,\n            s = _this$getProps4.y;\n\n        return Math.pow(t - o, 2) + Math.pow(e - s, 2) < Math.pow(n.hitRadius + n.radius, 2);\n      }\n    }, {\n      key: \"inXRange\",\n      value: function inXRange(t, e) {\n        return Io(this, t, \"x\", e);\n      }\n    }, {\n      key: \"inYRange\",\n      value: function inYRange(t, e) {\n        return Io(this, t, \"y\", e);\n      }\n    }, {\n      key: \"getCenterPoint\",\n      value: function getCenterPoint(t) {\n        var _this$getProps5 = this.getProps([\"x\", \"y\"], t),\n            e = _this$getProps5.x,\n            i = _this$getProps5.y;\n\n        return {\n          x: e,\n          y: i\n        };\n      }\n    }, {\n      key: \"size\",\n      value: function size(t) {\n        var e = (t = t || this.options || {}).radius || 0;\n        e = Math.max(e, e && t.hoverRadius || 0);\n        return 2 * (e + (e && t.borderWidth || 0));\n      }\n    }, {\n      key: \"draw\",\n      value: function draw(t) {\n        var e = this,\n            i = e.options;\n        e.skip || i.radius < .1 || (t.strokeStyle = i.borderColor, t.lineWidth = i.borderWidth, t.fillStyle = i.backgroundColor, Kt(t, i, e.x, e.y));\n      }\n    }, {\n      key: \"getRange\",\n      value: function getRange() {\n        var t = this.options || {};\n        return t.radius + t.hitRadius;\n      }\n    }]);\n\n    return Fo;\n  }(zi);\n\n  function Bo(t, e) {\n    var _t$getProps2 = t.getProps([\"x\", \"y\", \"base\", \"width\", \"height\"], e),\n        i = _t$getProps2.x,\n        n = _t$getProps2.y,\n        o = _t$getProps2.base,\n        s = _t$getProps2.width,\n        a = _t$getProps2.height;\n\n    var r, l, c, h, d;\n    return t.horizontal ? (d = a / 2, r = Math.min(i, o), l = Math.max(i, o), c = n - d, h = n + d) : (d = s / 2, r = i - d, l = i + d, c = Math.min(n, o), h = Math.max(n, o)), {\n      left: r,\n      top: c,\n      right: l,\n      bottom: h\n    };\n  }\n\n  function Vo(t) {\n    var e = t.options.borderSkipped;\n    var i = {};\n    return e ? (e = t.horizontal ? Wo(e, \"left\", \"right\", t.base > t.x) : Wo(e, \"bottom\", \"top\", t.base < t.y), i[e] = !0, i) : i;\n  }\n\n  function Wo(t, e, i, n) {\n    var o, s, a;\n    return n ? (a = i, t = No(t = (o = t) === (s = e) ? a : o === a ? s : o, i, e)) : t = No(t, e, i), t;\n  }\n\n  function No(t, e, i) {\n    return \"start\" === t ? e : \"end\" === t ? i : t;\n  }\n\n  function Ho(t, e, i, n) {\n    return t ? 0 : Math.max(Math.min(e, n), i);\n  }\n\n  function jo(t) {\n    var e = Bo(t),\n        i = e.right - e.left,\n        n = e.bottom - e.top,\n        o = function (t, e, i) {\n      var n = t.options.borderWidth,\n          o = Vo(t),\n          s = ze(n);\n      return {\n        t: Ho(o.top, s.top, 0, i),\n        r: Ho(o.right, s.right, 0, e),\n        b: Ho(o.bottom, s.bottom, 0, i),\n        l: Ho(o.left, s.left, 0, e)\n      };\n    }(t, i / 2, n / 2),\n        s = function (t, e, i) {\n      var _t$getProps3 = t.getProps([\"enableBorderRadius\"]),\n          n = _t$getProps3.enableBorderRadius,\n          o = t.options.borderRadius,\n          s = Ie(o),\n          a = Math.min(e, i),\n          r = Vo(t),\n          l = n || U(o);\n\n      return {\n        topLeft: Ho(!l || r.top || r.left, s.topLeft, 0, a),\n        topRight: Ho(!l || r.top || r.right, s.topRight, 0, a),\n        bottomLeft: Ho(!l || r.bottom || r.left, s.bottomLeft, 0, a),\n        bottomRight: Ho(!l || r.bottom || r.right, s.bottomRight, 0, a)\n      };\n    }(t, i / 2, n / 2);\n\n    return {\n      outer: {\n        x: e.left,\n        y: e.top,\n        w: i,\n        h: n,\n        radius: s\n      },\n      inner: {\n        x: e.left + o.l,\n        y: e.top + o.t,\n        w: i - o.l - o.r,\n        h: n - o.t - o.b,\n        radius: {\n          topLeft: Math.max(0, s.topLeft - Math.max(o.t, o.l)),\n          topRight: Math.max(0, s.topRight - Math.max(o.t, o.r)),\n          bottomLeft: Math.max(0, s.bottomLeft - Math.max(o.b, o.l)),\n          bottomRight: Math.max(0, s.bottomRight - Math.max(o.b, o.r))\n        }\n      }\n    };\n  }\n\n  function $o(t, e, i, n) {\n    var o = null === e,\n        s = null === i,\n        a = t && !(o && s) && Bo(t, n);\n    return a && (o || e >= a.left && e <= a.right) && (s || i >= a.top && i <= a.bottom);\n  }\n\n  function Yo(t, e) {\n    t.rect(e.x, e.y, e.w, e.h);\n  }\n\n  Fo.id = \"point\", Fo.defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: \"circle\",\n    radius: 3,\n    rotation: 0\n  }, Fo.defaultRoutes = {\n    backgroundColor: \"backgroundColor\",\n    borderColor: \"borderColor\"\n  };\n\n  var Uo = /*#__PURE__*/function (_zi5) {\n    _inherits(Uo, _zi5);\n\n    var _super15 = _createSuper(Uo);\n\n    function Uo(t) {\n      var _this10;\n\n      _classCallCheck(this, Uo);\n\n      _this10 = _super15.call(this), _this10.options = void 0, _this10.horizontal = void 0, _this10.base = void 0, _this10.width = void 0, _this10.height = void 0, t && Object.assign(_assertThisInitialized(_this10), t);\n      return _this10;\n    }\n\n    _createClass(Uo, [{\n      key: \"draw\",\n      value: function draw(t) {\n        var e = this.options,\n            _jo = jo(this),\n            i = _jo.inner,\n            n = _jo.outer,\n            o = (s = n.radius).topLeft || s.topRight || s.bottomLeft || s.bottomRight ? ne : Yo;\n\n        var s;\n        t.save(), n.w === i.w && n.h === i.h || (t.beginPath(), o(t, n), t.clip(), o(t, i), t.fillStyle = e.borderColor, t.fill(\"evenodd\")), t.beginPath(), o(t, i), t.fillStyle = e.backgroundColor, t.fill(), t.restore();\n      }\n    }, {\n      key: \"inRange\",\n      value: function inRange(t, e, i) {\n        return $o(this, t, e, i);\n      }\n    }, {\n      key: \"inXRange\",\n      value: function inXRange(t, e) {\n        return $o(this, t, null, e);\n      }\n    }, {\n      key: \"inYRange\",\n      value: function inYRange(t, e) {\n        return $o(this, null, t, e);\n      }\n    }, {\n      key: \"getCenterPoint\",\n      value: function getCenterPoint(t) {\n        var _this$getProps6 = this.getProps([\"x\", \"y\", \"base\", \"horizontal\"], t),\n            e = _this$getProps6.x,\n            i = _this$getProps6.y,\n            n = _this$getProps6.base,\n            o = _this$getProps6.horizontal;\n\n        return {\n          x: o ? (e + n) / 2 : e,\n          y: o ? i : (i + n) / 2\n        };\n      }\n    }, {\n      key: \"getRange\",\n      value: function getRange(t) {\n        return \"x\" === t ? this.width / 2 : this.height / 2;\n      }\n    }]);\n\n    return Uo;\n  }(zi);\n\n  Uo.id = \"bar\", Uo.defaults = {\n    borderSkipped: \"start\",\n    borderWidth: 0,\n    borderRadius: 0,\n    enableBorderRadius: !0,\n    pointStyle: void 0\n  }, Uo.defaultRoutes = {\n    backgroundColor: \"backgroundColor\",\n    borderColor: \"borderColor\"\n  };\n  var Xo = Object.freeze({\n    __proto__: null,\n    ArcElement: Po,\n    LineElement: zo,\n    PointElement: Fo,\n    BarElement: Uo\n  });\n\n  function qo(t) {\n    if (t._decimated) {\n      var _e41 = t._data;\n      delete t._decimated, delete t._data, Object.defineProperty(t, \"data\", {\n        value: _e41\n      });\n    }\n  }\n\n  function Ko(t) {\n    t.data.datasets.forEach(function (t) {\n      qo(t);\n    });\n  }\n\n  var Go = {\n    id: \"decimation\",\n    defaults: {\n      algorithm: \"min-max\",\n      enabled: !1\n    },\n    beforeElementsUpdate: function beforeElementsUpdate(t, e, i) {\n      if (!i.enabled) return void Ko(t);\n      var n = t.width;\n      t.data.datasets.forEach(function (e, o) {\n        var s = e._data,\n            a = e.indexAxis,\n            r = t.getDatasetMeta(o),\n            l = s || e.data;\n        if (\"y\" === Ve([a, t.options.indexAxis])) return;\n        if (\"line\" !== r.type) return;\n        var c = t.scales[r.xAxisID];\n        if (\"linear\" !== c.type && \"time\" !== c.type) return;\n        if (t.options.parsing) return;\n\n        var h,\n            _ref12 = function (t, e) {\n          var i = e.length;\n          var n,\n              o = 0;\n\n          var s = t.iScale,\n              _s$getUserBounds = s.getUserBounds(),\n              a = _s$getUserBounds.min,\n              r = _s$getUserBounds.max,\n              l = _s$getUserBounds.minDefined,\n              c = _s$getUserBounds.maxDefined;\n\n          return l && (o = Ht(se(e, s.axis, a).lo, 0, i - 1)), n = c ? Ht(se(e, s.axis, r).hi + 1, o, i) - o : i - o, {\n            start: o,\n            count: n\n          };\n        }(r, l),\n            d = _ref12.start,\n            u = _ref12.count;\n\n        if (u <= 4 * n) qo(e);else {\n          switch ($(s) && (e._data = l, delete e.data, Object.defineProperty(e, \"data\", {\n            configurable: !0,\n            enumerable: !0,\n            get: function get() {\n              return this._decimated;\n            },\n            set: function set(t) {\n              this._data = t;\n            }\n          })), i.algorithm) {\n            case \"lttb\":\n              h = function (t, e, i, n, o) {\n                var s = o.samples || n;\n                if (s >= i) return t.slice(e, e + i);\n                var a = [],\n                    r = (i - 2) / (s - 2);\n                var l = 0;\n                var c = e + i - 1;\n                var h,\n                    d,\n                    u,\n                    f,\n                    g,\n                    p = e;\n\n                for (a[l++] = t[p], h = 0; h < s - 2; h++) {\n                  var _n35 = void 0,\n                      _o28 = 0,\n                      _s19 = 0;\n\n                  var _c16 = Math.floor((h + 1) * r) + 1 + e,\n                      _m3 = Math.min(Math.floor((h + 2) * r) + 1, i) + e,\n                      _x3 = _m3 - _c16;\n\n                  for (_n35 = _c16; _n35 < _m3; _n35++) {\n                    _o28 += t[_n35].x, _s19 += t[_n35].y;\n                  }\n\n                  _o28 /= _x3, _s19 /= _x3;\n\n                  var _b4 = Math.floor(h * r) + 1 + e,\n                      _3 = Math.floor((h + 1) * r) + 1 + e,\n                      _t$p = t[p],\n                      _y2 = _t$p.x,\n                      _v = _t$p.y;\n\n                  for (u = f = -1, _n35 = _b4; _n35 < _3; _n35++) {\n                    f = .5 * Math.abs((_y2 - _o28) * (t[_n35].y - _v) - (_y2 - t[_n35].x) * (_s19 - _v)), f > u && (u = f, d = t[_n35], g = _n35);\n                  }\n\n                  a[l++] = d, p = g;\n                }\n\n                return a[l++] = t[c], a;\n              }(l, d, u, n, i);\n\n              break;\n\n            case \"min-max\":\n              h = function (t, e, i, n) {\n                var o,\n                    s,\n                    a,\n                    r,\n                    l,\n                    c,\n                    h,\n                    d,\n                    u,\n                    f,\n                    g = 0,\n                    p = 0;\n\n                var m = [],\n                    x = e + i - 1,\n                    b = t[e].x,\n                    _ = t[x].x - b;\n\n                for (o = e; o < e + i; ++o) {\n                  s = t[o], a = (s.x - b) / _ * n, r = s.y;\n\n                  var _e42 = 0 | a;\n\n                  if (_e42 === l) r < u ? (u = r, c = o) : r > f && (f = r, h = o), g = (p * g + s.x) / ++p;else {\n                    var _i52 = o - 1;\n\n                    if (!$(c) && !$(h)) {\n                      var _e43 = Math.min(c, h),\n                          _n36 = Math.max(c, h);\n\n                      _e43 !== d && _e43 !== _i52 && m.push(_objectSpread(_objectSpread({}, t[_e43]), {}, {\n                        x: g\n                      })), _n36 !== d && _n36 !== _i52 && m.push(_objectSpread(_objectSpread({}, t[_n36]), {}, {\n                        x: g\n                      }));\n                    }\n\n                    o > 0 && _i52 !== d && m.push(t[_i52]), m.push(s), l = _e42, p = 0, u = f = r, c = h = d = o;\n                  }\n                }\n\n                return m;\n              }(l, d, u, n);\n\n              break;\n\n            default:\n              throw new Error(\"Unsupported decimation algorithm '\".concat(i.algorithm, \"'\"));\n          }\n\n          e._decimated = h;\n        }\n      });\n    },\n    destroy: function destroy(t) {\n      Ko(t);\n    }\n  };\n\n  function Zo(t, e, i) {\n    var n = function (t) {\n      var e = t.options,\n          i = e.fill;\n      var n = K(i && i.target, i);\n      return void 0 === n && (n = !!e.backgroundColor), !1 !== n && null !== n && (!0 === n ? \"origin\" : n);\n    }(t);\n\n    if (U(n)) return !isNaN(n.value) && n;\n    var o = parseFloat(n);\n    return X(o) && Math.floor(o) === o ? (\"-\" !== n[0] && \"+\" !== n[0] || (o = e + o), !(o === e || o < 0 || o >= i) && o) : [\"origin\", \"start\", \"end\", \"stack\"].indexOf(n) >= 0 && n;\n  }\n\n  var Qo = /*#__PURE__*/function () {\n    function Qo(t) {\n      _classCallCheck(this, Qo);\n\n      this.x = t.x, this.y = t.y, this.radius = t.radius;\n    }\n\n    _createClass(Qo, [{\n      key: \"pathSegment\",\n      value: function pathSegment(t, e, i) {\n        var n = this.x,\n            o = this.y,\n            s = this.radius;\n        return e = e || {\n          start: 0,\n          end: _t\n        }, t.arc(n, o, s, e.end, e.start, !0), !i.bounds;\n      }\n    }, {\n      key: \"interpolate\",\n      value: function interpolate(t) {\n        var e = this.x,\n            i = this.y,\n            n = this.radius,\n            o = t.angle;\n        return {\n          x: e + Math.cos(o) * n,\n          y: i + Math.sin(o) * n,\n          angle: o\n        };\n      }\n    }]);\n\n    return Qo;\n  }();\n\n  function Jo(t) {\n    return (t.scale || {}).getPointPositionForValue ? function (t) {\n      var e = t.scale,\n          i = t.fill,\n          n = e.options,\n          o = e.getLabels().length,\n          s = [],\n          a = n.reverse ? e.max : e.min,\n          r = n.reverse ? e.min : e.max;\n      var l, c, h;\n      if (h = \"start\" === i ? a : \"end\" === i ? r : U(i) ? i.value : e.getBaseValue(), n.grid.circular) return c = e.getPointPositionForValue(0, a), new Qo({\n        x: c.x,\n        y: c.y,\n        radius: e.getDistanceFromCenterForValue(h)\n      });\n\n      for (l = 0; l < o; ++l) {\n        s.push(e.getPointPositionForValue(l, h));\n      }\n\n      return s;\n    }(t) : function (t) {\n      var _t$scale = t.scale,\n          e = _t$scale === void 0 ? {} : _t$scale,\n          i = t.fill;\n      var n,\n          o = null;\n      return \"start\" === i ? o = e.bottom : \"end\" === i ? o = e.top : U(i) ? o = e.getPixelForValue(i.value) : e.getBasePixel && (o = e.getBasePixel()), X(o) ? (n = e.isHorizontal(), {\n        x: n ? o : null,\n        y: n ? null : o\n      }) : null;\n    }(t);\n  }\n\n  function ts(t, e, i) {\n    for (; e > t; e--) {\n      var _t43 = i[e];\n      if (!isNaN(_t43.x) && !isNaN(_t43.y)) break;\n    }\n\n    return e;\n  }\n\n  function es(t) {\n    var e = t.chart,\n        i = t.scale,\n        n = t.index,\n        o = t.line,\n        s = [],\n        a = o.segments,\n        r = o.points,\n        l = function (t, e) {\n      var i = [],\n          n = t.getSortedVisibleDatasetMetas();\n\n      for (var _t44 = 0; _t44 < n.length; _t44++) {\n        var _o29 = n[_t44];\n        if (_o29.index === e) break;\n        is(_o29) && i.unshift(_o29.dataset);\n      }\n\n      return i;\n    }(e, n);\n\n    l.push(ss({\n      x: null,\n      y: i.bottom\n    }, o));\n\n    for (var _t45 = 0; _t45 < a.length; _t45++) {\n      var _e44 = a[_t45];\n\n      for (var _t46 = _e44.start; _t46 <= _e44.end; _t46++) {\n        ns(s, r[_t46], l);\n      }\n    }\n\n    return new zo({\n      points: s,\n      options: {}\n    });\n  }\n\n  var is = function is(t) {\n    return \"line\" === t.type && !t.hidden;\n  };\n\n  function ns(t, e, i) {\n    var n = [];\n\n    for (var _o30 = 0; _o30 < i.length; _o30++) {\n      var _s20 = i[_o30],\n          _os = os(_s20, e, \"x\"),\n          _a20 = _os.first,\n          _r13 = _os.last,\n          _l16 = _os.point;\n\n      if (!(!_l16 || _a20 && _r13)) if (_a20) n.unshift(_l16);else if (t.push(_l16), !_r13) break;\n    }\n\n    t.push.apply(t, n);\n  }\n\n  function os(t, e, i) {\n    var n = t.interpolate(e, i);\n    if (!n) return {};\n    var o = n[i],\n        s = t.segments,\n        a = t.points;\n    var r = !1,\n        l = !1;\n\n    for (var _t47 = 0; _t47 < s.length; _t47++) {\n      var _e45 = s[_t47],\n          _n37 = a[_e45.start][i],\n          _c17 = a[_e45.end][i];\n\n      if (o >= _n37 && o <= _c17) {\n        r = o === _n37, l = o === _c17;\n        break;\n      }\n    }\n\n    return {\n      first: r,\n      last: l,\n      point: n\n    };\n  }\n\n  function ss(t, e) {\n    var i = [],\n        n = !1;\n    return Y(t) ? (n = !0, i = t) : i = function (t, e) {\n      var _ref13 = t || {},\n          _ref13$x = _ref13.x,\n          i = _ref13$x === void 0 ? null : _ref13$x,\n          _ref13$y = _ref13.y,\n          n = _ref13$y === void 0 ? null : _ref13$y,\n          o = e.points,\n          s = [];\n\n      return e.segments.forEach(function (_ref14) {\n        var t = _ref14.start,\n            e = _ref14.end;\n        e = ts(t, e, o);\n        var a = o[t],\n            r = o[e];\n        null !== n ? (s.push({\n          x: a.x,\n          y: n\n        }), s.push({\n          x: r.x,\n          y: n\n        })) : null !== i && (s.push({\n          x: i,\n          y: a.y\n        }), s.push({\n          x: i,\n          y: r.y\n        }));\n      }), s;\n    }(t, e), i.length ? new zo({\n      points: i,\n      options: {\n        tension: 0\n      },\n      _loop: n,\n      _fullLoop: n\n    }) : null;\n  }\n\n  function as(t, e, i) {\n    var n = t[e].fill;\n    var o = [e];\n    var s;\n    if (!i) return n;\n\n    for (; !1 !== n && -1 === o.indexOf(n);) {\n      if (!X(n)) return n;\n      if (s = t[n], !s) return !1;\n      if (s.visible) return n;\n      o.push(n), n = s.fill;\n    }\n\n    return !1;\n  }\n\n  function rs(t, e, i) {\n    t.beginPath(), e.path(t), t.lineTo(e.last().x, i), t.lineTo(e.first().x, i), t.closePath(), t.clip();\n  }\n\n  function ls(t, e, i, n) {\n    if (n) return;\n    var o = e[t],\n        s = i[t];\n    return \"angle\" === t && (o = Wt(o), s = Wt(s)), {\n      property: t,\n      start: o,\n      end: s\n    };\n  }\n\n  function cs(t, e, i, n) {\n    return t && e ? n(t[i], e[i]) : t ? t[i] : e ? e[i] : 0;\n  }\n\n  function hs(t, e, i) {\n    var _e$chart$chartArea = e.chart.chartArea,\n        n = _e$chart$chartArea.top,\n        o = _e$chart$chartArea.bottom,\n        _ref15 = i || {},\n        s = _ref15.property,\n        a = _ref15.start,\n        r = _ref15.end;\n\n    \"x\" === s && (t.beginPath(), t.rect(a, n, r - a, o - n), t.clip());\n  }\n\n  function ds(t, e, i, n) {\n    var o = e.interpolate(i, n);\n    o && t.lineTo(o.x, o.y);\n  }\n\n  function us(t, e) {\n    var i = e.line,\n        n = e.target,\n        o = e.property,\n        s = e.color,\n        a = e.scale,\n        r = function (t, e, i) {\n      var n = t.segments,\n          o = t.points,\n          s = e.points,\n          a = [];\n\n      var _iterator19 = _createForOfIteratorHelper(n),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var _t48 = _step19.value;\n          var _n38 = _t48.start,\n              _r14 = _t48.end;\n          _r14 = ts(_n38, _r14, o);\n\n          var _l17 = ls(i, o[_n38], o[_r14], _t48.loop);\n\n          if (!e.segments) {\n            a.push({\n              source: _t48,\n              target: _l17,\n              start: o[_n38],\n              end: o[_r14]\n            });\n            continue;\n          }\n\n          var _c18 = Sn(e, _l17);\n\n          var _iterator20 = _createForOfIteratorHelper(_c18),\n              _step20;\n\n          try {\n            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n              var _e46 = _step20.value;\n\n              var _n39 = ls(i, s[_e46.start], s[_e46.end], _e46.loop),\n                  _r15 = kn(_t48, o, _n39);\n\n              var _iterator21 = _createForOfIteratorHelper(_r15),\n                  _step21;\n\n              try {\n                for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n                  var _t49 = _step21.value;\n                  a.push({\n                    source: _t49,\n                    target: _e46,\n                    start: _defineProperty({}, i, cs(_l17, _n39, \"start\", Math.max)),\n                    end: _defineProperty({}, i, cs(_l17, _n39, \"end\", Math.min))\n                  });\n                }\n              } catch (err) {\n                _iterator21.e(err);\n              } finally {\n                _iterator21.f();\n              }\n            }\n          } catch (err) {\n            _iterator20.e(err);\n          } finally {\n            _iterator20.f();\n          }\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n\n      return a;\n    }(i, n, o);\n\n    var _iterator22 = _createForOfIteratorHelper(r),\n        _step22;\n\n    try {\n      for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n        var _step22$value = _step22.value,\n            _e47 = _step22$value.source,\n            _l18 = _step22$value.target,\n            _c19 = _step22$value.start,\n            _h17 = _step22$value.end;\n        var _e47$style = _e47.style;\n        _e47$style = _e47$style === void 0 ? {} : _e47$style;\n\n        var _e47$style$background = _e47$style.backgroundColor,\n            _r16 = _e47$style$background === void 0 ? s : _e47$style$background;\n\n        t.save(), t.fillStyle = _r16, hs(t, a, ls(o, _c19, _h17)), t.beginPath();\n\n        var _d8 = !!i.pathSegment(t, _e47);\n\n        _d8 ? t.closePath() : ds(t, n, _h17, o);\n\n        var _u8 = !!n.pathSegment(t, _l18, {\n          move: _d8,\n          reverse: !0\n        }),\n            _f6 = _d8 && _u8;\n\n        _f6 || ds(t, n, _c19, o), t.closePath(), t.fill(_f6 ? \"evenodd\" : \"nonzero\"), t.restore();\n      }\n    } catch (err) {\n      _iterator22.e(err);\n    } finally {\n      _iterator22.f();\n    }\n  }\n\n  function fs(t, e, i) {\n    var n = function (t) {\n      var e = t.chart,\n          i = t.fill,\n          n = t.line;\n      if (X(i)) return function (t, e) {\n        var i = t.getDatasetMeta(e);\n        return i && t.isDatasetVisible(e) ? i.dataset : null;\n      }(e, i);\n      if (\"stack\" === i) return es(t);\n      var o = Jo(t);\n      return o instanceof Qo ? o : ss(o, n);\n    }(e),\n        o = e.line,\n        s = e.scale,\n        a = e.axis,\n        r = o.options,\n        l = r.fill,\n        c = r.backgroundColor,\n        _ref16 = l || {},\n        _ref16$above = _ref16.above,\n        h = _ref16$above === void 0 ? c : _ref16$above,\n        _ref16$below = _ref16.below,\n        d = _ref16$below === void 0 ? c : _ref16$below;\n\n    n && o.points.length && (Zt(t, i), function (t, e) {\n      var i = e.line,\n          n = e.target,\n          o = e.above,\n          s = e.below,\n          a = e.area,\n          r = e.scale,\n          l = i._loop ? \"angle\" : e.axis;\n      t.save(), \"x\" === l && s !== o && (rs(t, n, a.top), us(t, {\n        line: i,\n        target: n,\n        color: o,\n        scale: r,\n        property: l\n      }), t.restore(), t.save(), rs(t, n, a.bottom)), us(t, {\n        line: i,\n        target: n,\n        color: s,\n        scale: r,\n        property: l\n      }), t.restore();\n    }(t, {\n      line: o,\n      target: n,\n      above: h,\n      below: d,\n      area: i,\n      scale: s,\n      axis: a\n    }), Qt(t));\n  }\n\n  var gs = {\n    id: \"filler\",\n    afterDatasetsUpdate: function afterDatasetsUpdate(t, e, i) {\n      var n = (t.data.datasets || []).length,\n          o = [];\n      var s, a, r, l;\n\n      for (a = 0; a < n; ++a) {\n        s = t.getDatasetMeta(a), r = s.dataset, l = null, r && r.options && r instanceof zo && (l = {\n          visible: t.isDatasetVisible(a),\n          index: a,\n          fill: Zo(r, a, n),\n          chart: t,\n          axis: s.controller.options.indexAxis,\n          scale: s.vScale,\n          line: r\n        }), s.$filler = l, o.push(l);\n      }\n\n      for (a = 0; a < n; ++a) {\n        l = o[a], l && !1 !== l.fill && (l.fill = as(o, a, i.propagate));\n      }\n    },\n    beforeDraw: function beforeDraw(t, e, i) {\n      var n = \"beforeDraw\" === i.drawTime,\n          o = t.getSortedVisibleDatasetMetas(),\n          s = t.chartArea;\n\n      for (var _e48 = o.length - 1; _e48 >= 0; --_e48) {\n        var _i53 = o[_e48].$filler;\n        _i53 && (_i53.line.updateControlPoints(s, _i53.axis), n && fs(t.ctx, _i53, s));\n      }\n    },\n    beforeDatasetsDraw: function beforeDatasetsDraw(t, e, i) {\n      if (\"beforeDatasetsDraw\" !== i.drawTime) return;\n      var n = t.getSortedVisibleDatasetMetas();\n\n      for (var _e49 = n.length - 1; _e49 >= 0; --_e49) {\n        var _i54 = n[_e49].$filler;\n        _i54 && fs(t.ctx, _i54, t.chartArea);\n      }\n    },\n    beforeDatasetDraw: function beforeDatasetDraw(t, e, i) {\n      var n = e.meta.$filler;\n      n && !1 !== n.fill && \"beforeDatasetDraw\" === i.drawTime && fs(t.ctx, n, t.chartArea);\n    },\n    defaults: {\n      propagate: !0,\n      drawTime: \"beforeDatasetDraw\"\n    }\n  };\n\n  var ps = function ps(t, e) {\n    var _t$boxHeight = t.boxHeight,\n        i = _t$boxHeight === void 0 ? e : _t$boxHeight,\n        _t$boxWidth = t.boxWidth,\n        n = _t$boxWidth === void 0 ? e : _t$boxWidth;\n    return t.usePointStyle && (i = Math.min(i, e), n = Math.min(n, e)), {\n      boxWidth: n,\n      boxHeight: i,\n      itemHeight: Math.max(e, i)\n    };\n  };\n\n  var ms = /*#__PURE__*/function (_zi6) {\n    _inherits(ms, _zi6);\n\n    var _super16 = _createSuper(ms);\n\n    function ms(t) {\n      var _this11;\n\n      _classCallCheck(this, ms);\n\n      _this11 = _super16.call(this), _this11._added = !1, _this11.legendHitBoxes = [], _this11._hoveredItem = null, _this11.doughnutMode = !1, _this11.chart = t.chart, _this11.options = t.options, _this11.ctx = t.ctx, _this11.legendItems = void 0, _this11.columnSizes = void 0, _this11.lineWidths = void 0, _this11.maxHeight = void 0, _this11.maxWidth = void 0, _this11.top = void 0, _this11.bottom = void 0, _this11.left = void 0, _this11.right = void 0, _this11.height = void 0, _this11.width = void 0, _this11._margins = void 0, _this11.position = void 0, _this11.weight = void 0, _this11.fullSize = void 0;\n      return _this11;\n    }\n\n    _createClass(ms, [{\n      key: \"update\",\n      value: function update(t, e, i) {\n        var n = this;\n        n.maxWidth = t, n.maxHeight = e, n._margins = i, n.setDimensions(), n.buildLabels(), n.fit();\n      }\n    }, {\n      key: \"setDimensions\",\n      value: function setDimensions() {\n        var t = this;\n        t.isHorizontal() ? (t.width = t.maxWidth, t.left = t._margins.left, t.right = t.width) : (t.height = t.maxHeight, t.top = t._margins.top, t.bottom = t.height);\n      }\n    }, {\n      key: \"buildLabels\",\n      value: function buildLabels() {\n        var t = this,\n            e = t.options.labels || {};\n        var i = Q(e.generateLabels, [t.chart], t) || [];\n        e.filter && (i = i.filter(function (i) {\n          return e.filter(i, t.chart.data);\n        })), e.sort && (i = i.sort(function (i, n) {\n          return e.sort(i, n, t.chart.data);\n        })), t.options.reverse && i.reverse(), t.legendItems = i;\n      }\n    }, {\n      key: \"fit\",\n      value: function fit() {\n        var t = this,\n            e = t.options,\n            i = t.ctx;\n        if (!e.display) return void (t.width = t.height = 0);\n\n        var n = e.labels,\n            o = Be(n.font),\n            s = o.size,\n            a = t._computeTitleHeight(),\n            _ps = ps(n, s),\n            r = _ps.boxWidth,\n            l = _ps.itemHeight;\n\n        var c, h;\n        i.font = o.string, t.isHorizontal() ? (c = t.maxWidth, h = t._fitRows(a, s, r, l) + 10) : (h = t.maxHeight, c = t._fitCols(a, s, r, l) + 10), t.width = Math.min(c, e.maxWidth || t.maxWidth), t.height = Math.min(h, e.maxHeight || t.maxHeight);\n      }\n    }, {\n      key: \"_fitRows\",\n      value: function _fitRows(t, e, i, n) {\n        var o = this,\n            s = o.ctx,\n            a = o.maxWidth,\n            r = o.options.labels.padding,\n            l = o.legendHitBoxes = [],\n            c = o.lineWidths = [0],\n            h = n + r;\n        var d = t;\n        s.textAlign = \"left\", s.textBaseline = \"middle\";\n        var u = -1,\n            f = -h;\n        return o.legendItems.forEach(function (t, o) {\n          var g = i + e / 2 + s.measureText(t.text).width;\n          (0 === o || c[c.length - 1] + g + 2 * r > a) && (d += h, c[c.length - (o > 0 ? 0 : 1)] = 0, f += h, u++), l[o] = {\n            left: 0,\n            top: f,\n            row: u,\n            width: g,\n            height: n\n          }, c[c.length - 1] += g + r;\n        }), d;\n      }\n    }, {\n      key: \"_fitCols\",\n      value: function _fitCols(t, e, i, n) {\n        var o = this,\n            s = o.ctx,\n            a = o.maxHeight,\n            r = o.options.labels.padding,\n            l = o.legendHitBoxes = [],\n            c = o.columnSizes = [],\n            h = a - t;\n        var d = r,\n            u = 0,\n            f = 0,\n            g = 0,\n            p = 0;\n        return o.legendItems.forEach(function (t, o) {\n          var a = i + e / 2 + s.measureText(t.text).width;\n          o > 0 && f + n + 2 * r > h && (d += u + r, c.push({\n            width: u,\n            height: f\n          }), g += u + r, p++, u = f = 0), l[o] = {\n            left: g,\n            top: f,\n            col: p,\n            width: a,\n            height: n\n          }, u = Math.max(u, a), f += n + r;\n        }), d += u, c.push({\n          width: u,\n          height: f\n        }), d;\n      }\n    }, {\n      key: \"adjustHitBoxes\",\n      value: function adjustHitBoxes() {\n        var t = this;\n        if (!t.options.display) return;\n\n        var e = t._computeTitleHeight(),\n            i = t.legendHitBoxes,\n            _t$options2 = t.options,\n            n = _t$options2.align,\n            s = _t$options2.labels.padding,\n            a = _t$options2.rtl;\n\n        if (this.isHorizontal()) {\n          var _r17 = 0,\n              _l19 = o(n, t.left + s, t.right - t.lineWidths[_r17]);\n\n          var _iterator23 = _createForOfIteratorHelper(i),\n              _step23;\n\n          try {\n            for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n              var _a21 = _step23.value;\n              _r17 !== _a21.row && (_r17 = _a21.row, _l19 = o(n, t.left + s, t.right - t.lineWidths[_r17])), _a21.top += t.top + e + s, _a21.left = _l19, _l19 += _a21.width + s;\n            }\n          } catch (err) {\n            _iterator23.e(err);\n          } finally {\n            _iterator23.f();\n          }\n\n          if (a) {\n            var _e50 = i.reduce(function (t, e) {\n              return t[e.row] = t[e.row] || [], t[e.row].push(e), t;\n            }, {}),\n                _n40 = [];\n\n            Object.keys(_e50).forEach(function (t) {\n              _e50[t].reverse(), _n40.push.apply(_n40, _toConsumableArray(_e50[t]));\n            }), t.legendHitBoxes = _n40;\n          }\n        } else {\n          var _a22 = 0,\n              _r18 = o(n, t.top + e + s, t.bottom - t.columnSizes[_a22].height);\n\n          var _iterator24 = _createForOfIteratorHelper(i),\n              _step24;\n\n          try {\n            for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n              var _l20 = _step24.value;\n              _l20.col !== _a22 && (_a22 = _l20.col, _r18 = o(n, t.top + e + s, t.bottom - t.columnSizes[_a22].height)), _l20.top = _r18, _l20.left += t.left + s, _r18 += _l20.height + s;\n            }\n          } catch (err) {\n            _iterator24.e(err);\n          } finally {\n            _iterator24.f();\n          }\n        }\n      }\n    }, {\n      key: \"isHorizontal\",\n      value: function isHorizontal() {\n        return \"top\" === this.options.position || \"bottom\" === this.options.position;\n      }\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        var t = this;\n\n        if (t.options.display) {\n          var _e51 = t.ctx;\n          Zt(_e51, t), t._draw(), Qt(_e51);\n        }\n      }\n    }, {\n      key: \"_draw\",\n      value: function _draw() {\n        var t = this,\n            e = t.options,\n            i = t.columnSizes,\n            n = t.lineWidths,\n            a = t.ctx,\n            r = e.align,\n            l = e.labels,\n            c = xt.color,\n            h = _n(e.rtl, t.left, t.width),\n            d = Be(l.font),\n            u = l.color,\n            f = l.padding,\n            g = d.size,\n            p = g / 2;\n\n        var m;\n        t.drawTitle(), a.textAlign = h.textAlign(\"left\"), a.textBaseline = \"middle\", a.lineWidth = .5, a.font = d.string;\n\n        var _ps2 = ps(l, g),\n            x = _ps2.boxWidth,\n            b = _ps2.boxHeight,\n            _ = _ps2.itemHeight,\n            y = t.isHorizontal(),\n            v = this._computeTitleHeight();\n\n        m = y ? {\n          x: o(r, t.left + f, t.right - n[0]),\n          y: t.top + f + v,\n          line: 0\n        } : {\n          x: t.left + f,\n          y: o(r, t.top + v + f, t.bottom - i[0].height),\n          line: 0\n        }, yn(t.ctx, e.textDirection);\n        var w = _ + f;\n        t.legendItems.forEach(function (M, k) {\n          a.strokeStyle = M.fontColor || u, a.fillStyle = M.fontColor || u;\n          var S = a.measureText(M.text).width,\n              P = h.textAlign(M.textAlign || (M.textAlign = l.textAlign)),\n              D = x + p + S;\n          var C = m.x,\n              O = m.y;\n          h.setWidth(t.width), y ? k > 0 && C + D + f > t.right && (O = m.y += w, m.line++, C = m.x = o(r, t.left + f, t.right - n[m.line])) : k > 0 && O + w > t.bottom && (C = m.x = C + i[m.line].width + f, m.line++, O = m.y = o(r, t.top + v + f, t.bottom - i[m.line].height));\n          !function (t, e, i) {\n            if (isNaN(x) || x <= 0 || isNaN(b) || b < 0) return;\n            a.save();\n            var n = K(i.lineWidth, 1);\n\n            if (a.fillStyle = K(i.fillStyle, c), a.lineCap = K(i.lineCap, \"butt\"), a.lineDashOffset = K(i.lineDashOffset, 0), a.lineJoin = K(i.lineJoin, \"miter\"), a.lineWidth = n, a.strokeStyle = K(i.strokeStyle, c), a.setLineDash(K(i.lineDash, [])), l.usePointStyle) {\n              var _o31 = {\n                radius: x * Math.SQRT2 / 2,\n                pointStyle: i.pointStyle,\n                rotation: i.rotation,\n                borderWidth: n\n              },\n                  _s21 = h.xPlus(t, x / 2);\n\n              Kt(a, _o31, _s21, e + p);\n            } else {\n              var _o32 = e + Math.max((g - b) / 2, 0),\n                  _s22 = h.leftForLtr(t, x),\n                  _r19 = Ie(i.borderRadius);\n\n              a.beginPath(), Object.values(_r19).some(function (t) {\n                return 0 !== t;\n              }) ? ne(a, {\n                x: _s22,\n                y: _o32,\n                w: x,\n                h: b,\n                radius: _r19\n              }) : a.rect(_s22, _o32, x, b), a.fill(), 0 !== n && a.stroke();\n            }\n\n            a.restore();\n          }(h.x(C), O, M), C = s(P, C + x + p, y ? C + D : t.right, e.rtl), function (t, e, i) {\n            ee(a, i.text, t, e + _ / 2, d, {\n              strikethrough: i.hidden,\n              textAlign: h.textAlign(i.textAlign)\n            });\n          }(h.x(C), O, M), y ? m.x += D + f : m.y += w;\n        }), vn(t.ctx, e.textDirection);\n      }\n    }, {\n      key: \"drawTitle\",\n      value: function drawTitle() {\n        var t = this,\n            e = t.options,\n            i = e.title,\n            s = Be(i.font),\n            a = Fe(i.padding);\n        if (!i.display) return;\n\n        var r = _n(e.rtl, t.left, t.width),\n            l = t.ctx,\n            c = i.position,\n            h = s.size / 2,\n            d = a.top + h;\n\n        var u,\n            f = t.left,\n            g = t.width;\n        if (this.isHorizontal()) g = Math.max.apply(Math, _toConsumableArray(t.lineWidths)), u = t.top + d, f = o(e.align, f, t.right - g);else {\n          var _i55 = t.columnSizes.reduce(function (t, e) {\n            return Math.max(t, e.height);\n          }, 0);\n\n          u = d + o(e.align, t.top, t.bottom - _i55 - e.labels.padding - t._computeTitleHeight());\n        }\n        var p = o(c, f, f + g);\n        l.textAlign = r.textAlign(n(c)), l.textBaseline = \"middle\", l.strokeStyle = i.color, l.fillStyle = i.color, l.font = s.string, ee(l, i.text, p, u, s);\n      }\n    }, {\n      key: \"_computeTitleHeight\",\n      value: function _computeTitleHeight() {\n        var t = this.options.title,\n            e = Be(t.font),\n            i = Fe(t.padding);\n        return t.display ? e.lineHeight + i.height : 0;\n      }\n    }, {\n      key: \"_getLegendItemAt\",\n      value: function _getLegendItemAt(t, e) {\n        var i = this;\n        var n, o, s;\n        if (t >= i.left && t <= i.right && e >= i.top && e <= i.bottom) for (s = i.legendHitBoxes, n = 0; n < s.length; ++n) {\n          if (o = s[n], t >= o.left && t <= o.left + o.width && e >= o.top && e <= o.top + o.height) return i.legendItems[n];\n        }\n        return null;\n      }\n    }, {\n      key: \"handleEvent\",\n      value: function handleEvent(t) {\n        var e = this,\n            i = e.options;\n        if (!function (t, e) {\n          if (\"mousemove\" === t && (e.onHover || e.onLeave)) return !0;\n          if (e.onClick && (\"click\" === t || \"mouseup\" === t)) return !0;\n          return !1;\n        }(t.type, i)) return;\n\n        var n = e._getLegendItemAt(t.x, t.y);\n\n        if (\"mousemove\" === t.type) {\n          var _a23 = e._hoveredItem,\n              _r20 = (s = n, null !== (o = _a23) && null !== s && o.datasetIndex === s.datasetIndex && o.index === s.index);\n\n          _a23 && !_r20 && Q(i.onLeave, [t, _a23, e], e), e._hoveredItem = n, n && !_r20 && Q(i.onHover, [t, n, e], e);\n        } else n && Q(i.onClick, [t, n, e], e);\n\n        var o, s;\n      }\n    }]);\n\n    return ms;\n  }(zi);\n\n  var xs = {\n    id: \"legend\",\n    _element: ms,\n    start: function start(t, e, i) {\n      var n = t.legend = new ms({\n        ctx: t.ctx,\n        options: i,\n        chart: t\n      });\n      Ze.configure(t, n, i), Ze.addBox(t, n);\n    },\n    stop: function stop(t) {\n      Ze.removeBox(t, t.legend), delete t.legend;\n    },\n    beforeUpdate: function beforeUpdate(t, e, i) {\n      var n = t.legend;\n      Ze.configure(t, n, i), n.options = i;\n    },\n    afterUpdate: function afterUpdate(t) {\n      var e = t.legend;\n      e.buildLabels(), e.adjustHitBoxes();\n    },\n    afterEvent: function afterEvent(t, e) {\n      e.replay || t.legend.handleEvent(e.event);\n    },\n    defaults: {\n      display: !0,\n      position: \"top\",\n      align: \"center\",\n      fullSize: !0,\n      reverse: !1,\n      weight: 1e3,\n      onClick: function onClick(t, e, i) {\n        var n = e.datasetIndex,\n            o = i.chart;\n        o.isDatasetVisible(n) ? (o.hide(n), e.hidden = !0) : (o.show(n), e.hidden = !1);\n      },\n      onHover: null,\n      onLeave: null,\n      labels: {\n        color: function color(t) {\n          return t.chart.options.color;\n        },\n        boxWidth: 40,\n        padding: 10,\n        generateLabels: function generateLabels(t) {\n          var e = t.data.datasets,\n              _t$legend$options$lab = t.legend.options.labels,\n              i = _t$legend$options$lab.usePointStyle,\n              n = _t$legend$options$lab.pointStyle,\n              o = _t$legend$options$lab.textAlign,\n              s = _t$legend$options$lab.color;\n          return t._getSortedDatasetMetas().map(function (t) {\n            var a = t.controller.getStyle(i ? 0 : void 0),\n                r = Fe(a.borderWidth);\n            return {\n              text: e[t.index].label,\n              fillStyle: a.backgroundColor,\n              fontColor: s,\n              hidden: !t.visible,\n              lineCap: a.borderCapStyle,\n              lineDash: a.borderDash,\n              lineDashOffset: a.borderDashOffset,\n              lineJoin: a.borderJoinStyle,\n              lineWidth: (r.width + r.height) / 4,\n              strokeStyle: a.borderColor,\n              pointStyle: n || a.pointStyle,\n              rotation: a.rotation,\n              textAlign: o || a.textAlign,\n              borderRadius: 0,\n              datasetIndex: t.index\n            };\n          }, this);\n        }\n      },\n      title: {\n        color: function color(t) {\n          return t.chart.options.color;\n        },\n        display: !1,\n        position: \"center\",\n        text: \"\"\n      }\n    },\n    descriptors: {\n      _scriptable: function _scriptable(t) {\n        return !t.startsWith(\"on\");\n      },\n      labels: {\n        _scriptable: function _scriptable(t) {\n          return ![\"generateLabels\", \"filter\", \"sort\"].includes(t);\n        }\n      }\n    }\n  };\n\n  var bs = /*#__PURE__*/function (_zi7) {\n    _inherits(bs, _zi7);\n\n    var _super17 = _createSuper(bs);\n\n    function bs(t) {\n      var _this12;\n\n      _classCallCheck(this, bs);\n\n      _this12 = _super17.call(this), _this12.chart = t.chart, _this12.options = t.options, _this12.ctx = t.ctx, _this12._padding = void 0, _this12.top = void 0, _this12.bottom = void 0, _this12.left = void 0, _this12.right = void 0, _this12.width = void 0, _this12.height = void 0, _this12.position = void 0, _this12.weight = void 0, _this12.fullSize = void 0;\n      return _this12;\n    }\n\n    _createClass(bs, [{\n      key: \"update\",\n      value: function update(t, e) {\n        var i = this,\n            n = i.options;\n        if (i.left = 0, i.top = 0, !n.display) return void (i.width = i.height = i.right = i.bottom = 0);\n        i.width = i.right = t, i.height = i.bottom = e;\n        var o = Y(n.text) ? n.text.length : 1;\n        i._padding = Fe(n.padding);\n\n        var s = o * Be(n.font).lineHeight + i._padding.height;\n\n        i.isHorizontal() ? i.height = s : i.width = s;\n      }\n    }, {\n      key: \"isHorizontal\",\n      value: function isHorizontal() {\n        var t = this.options.position;\n        return \"top\" === t || \"bottom\" === t;\n      }\n    }, {\n      key: \"_drawArgs\",\n      value: function _drawArgs(t) {\n        var e = this.top,\n            i = this.left,\n            n = this.bottom,\n            s = this.right,\n            a = this.options,\n            r = a.align;\n        var l,\n            c,\n            h,\n            d = 0;\n        return this.isHorizontal() ? (c = o(r, i, s), h = e + t, l = s - i) : (\"left\" === a.position ? (c = i + t, h = o(r, n, e), d = -.5 * bt) : (c = s - t, h = o(r, e, n), d = .5 * bt), l = n - e), {\n          titleX: c,\n          titleY: h,\n          maxWidth: l,\n          rotation: d\n        };\n      }\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        var t = this,\n            e = t.ctx,\n            i = t.options;\n        if (!i.display) return;\n\n        var o = Be(i.font),\n            s = o.lineHeight / 2 + t._padding.top,\n            _t$_drawArgs = t._drawArgs(s),\n            a = _t$_drawArgs.titleX,\n            r = _t$_drawArgs.titleY,\n            l = _t$_drawArgs.maxWidth,\n            c = _t$_drawArgs.rotation;\n\n        ee(e, i.text, 0, 0, o, {\n          color: i.color,\n          maxWidth: l,\n          rotation: c,\n          textAlign: n(i.align),\n          textBaseline: \"middle\",\n          translation: [a, r]\n        });\n      }\n    }]);\n\n    return bs;\n  }(zi);\n\n  var _s = {\n    id: \"title\",\n    _element: bs,\n    start: function start(t, e, i) {\n      !function (t, e) {\n        var i = new bs({\n          ctx: t.ctx,\n          options: e,\n          chart: t\n        });\n        Ze.configure(t, i, e), Ze.addBox(t, i), t.titleBlock = i;\n      }(t, i);\n    },\n    stop: function stop(t) {\n      var e = t.titleBlock;\n      Ze.removeBox(t, e), delete t.titleBlock;\n    },\n    beforeUpdate: function beforeUpdate(t, e, i) {\n      var n = t.titleBlock;\n      Ze.configure(t, n, i), n.options = i;\n    },\n    defaults: {\n      align: \"center\",\n      display: !1,\n      font: {\n        weight: \"bold\"\n      },\n      fullSize: !0,\n      padding: 10,\n      position: \"top\",\n      text: \"\",\n      weight: 2e3\n    },\n    defaultRoutes: {\n      color: \"color\"\n    },\n    descriptors: {\n      _scriptable: !0,\n      _indexable: !1\n    }\n  };\n  var ys = new WeakMap();\n  var vs = {\n    id: \"subtitle\",\n    start: function start(t, e, i) {\n      var n = new bs({\n        ctx: t.ctx,\n        options: i,\n        chart: t\n      });\n      Ze.configure(t, n, i), Ze.addBox(t, n), ys.set(t, n);\n    },\n    stop: function stop(t) {\n      Ze.removeBox(t, ys.get(t)), ys[\"delete\"](t);\n    },\n    beforeUpdate: function beforeUpdate(t, e, i) {\n      var n = ys.get(t);\n      Ze.configure(t, n, i), n.options = i;\n    },\n    defaults: {\n      align: \"center\",\n      display: !1,\n      font: {\n        weight: \"normal\"\n      },\n      fullSize: !0,\n      padding: 0,\n      position: \"top\",\n      text: \"\",\n      weight: 1500\n    },\n    defaultRoutes: {\n      color: \"color\"\n    },\n    descriptors: {\n      _scriptable: !0,\n      _indexable: !1\n    }\n  };\n  var ws = {\n    average: function average(t) {\n      if (!t.length) return !1;\n      var e,\n          i,\n          n = 0,\n          o = 0,\n          s = 0;\n\n      for (e = 0, i = t.length; e < i; ++e) {\n        var _i56 = t[e].element;\n\n        if (_i56 && _i56.hasValue()) {\n          var _t50 = _i56.tooltipPosition();\n\n          n += _t50.x, o += _t50.y, ++s;\n        }\n      }\n\n      return {\n        x: n / s,\n        y: o / s\n      };\n    },\n    nearest: function nearest(t, e) {\n      if (!t.length) return !1;\n      var i,\n          n,\n          o,\n          s = e.x,\n          a = e.y,\n          r = Number.POSITIVE_INFINITY;\n\n      for (i = 0, n = t.length; i < n; ++i) {\n        var _n41 = t[i].element;\n\n        if (_n41 && _n41.hasValue()) {\n          var _t51 = Bt(e, _n41.getCenterPoint());\n\n          _t51 < r && (r = _t51, o = _n41);\n        }\n      }\n\n      if (o) {\n        var _t52 = o.tooltipPosition();\n\n        s = _t52.x, a = _t52.y;\n      }\n\n      return {\n        x: s,\n        y: a\n      };\n    }\n  };\n\n  function Ms(t, e) {\n    return e && (Y(e) ? Array.prototype.push.apply(t, e) : t.push(e)), t;\n  }\n\n  function ks(t) {\n    return (\"string\" == typeof t || t instanceof String) && t.indexOf(\"\\n\") > -1 ? t.split(\"\\n\") : t;\n  }\n\n  function Ss(t, e) {\n    var i = e.element,\n        n = e.datasetIndex,\n        o = e.index,\n        s = t.getDatasetMeta(n).controller,\n        _s$getLabelAndValue = s.getLabelAndValue(o),\n        a = _s$getLabelAndValue.label,\n        r = _s$getLabelAndValue.value;\n\n    return {\n      chart: t,\n      label: a,\n      parsed: s.getParsed(o),\n      raw: t.data.datasets[n].data[o],\n      formattedValue: r,\n      dataset: s.getDataset(),\n      dataIndex: o,\n      datasetIndex: n,\n      element: i\n    };\n  }\n\n  function Ps(t, e) {\n    var i = t._chart.ctx,\n        n = t.body,\n        o = t.footer,\n        s = t.title,\n        a = e.boxWidth,\n        r = e.boxHeight,\n        l = Be(e.bodyFont),\n        c = Be(e.titleFont),\n        h = Be(e.footerFont),\n        d = s.length,\n        u = o.length,\n        f = n.length,\n        g = Fe(e.padding);\n    var p = g.height,\n        m = 0,\n        x = n.reduce(function (t, e) {\n      return t + e.before.length + e.lines.length + e.after.length;\n    }, 0);\n\n    if (x += t.beforeBody.length + t.afterBody.length, d && (p += d * c.lineHeight + (d - 1) * e.titleSpacing + e.titleMarginBottom), x) {\n      p += f * (e.displayColors ? Math.max(r, l.lineHeight) : l.lineHeight) + (x - f) * l.lineHeight + (x - 1) * e.bodySpacing;\n    }\n\n    u && (p += e.footerMarginTop + u * h.lineHeight + (u - 1) * e.footerSpacing);\n    var b = 0;\n\n    var _ = function _(t) {\n      m = Math.max(m, i.measureText(t).width + b);\n    };\n\n    return i.save(), i.font = c.string, J(t.title, _), i.font = l.string, J(t.beforeBody.concat(t.afterBody), _), b = e.displayColors ? a + 2 : 0, J(n, function (t) {\n      J(t.before, _), J(t.lines, _), J(t.after, _);\n    }), b = 0, i.font = h.string, J(t.footer, _), i.restore(), m += g.width, {\n      width: m,\n      height: p\n    };\n  }\n\n  function Ds(t, e, i, n) {\n    var o = i.x,\n        s = i.width,\n        a = t.width,\n        _t$chartArea = t.chartArea,\n        r = _t$chartArea.left,\n        l = _t$chartArea.right;\n    var c = \"center\";\n    return \"center\" === n ? c = o <= (r + l) / 2 ? \"left\" : \"right\" : o <= s / 2 ? c = \"left\" : o >= a - s / 2 && (c = \"right\"), function (t, e, i, n) {\n      var o = n.x,\n          s = n.width,\n          a = i.caretSize + i.caretPadding;\n      return \"left\" === t && o + s + a > e.width || \"right\" === t && o - s - a < 0 || void 0;\n    }(c, t, e, i) && (c = \"center\"), c;\n  }\n\n  function Cs(t, e, i) {\n    var n = e.yAlign || function (t, e) {\n      var i = e.y,\n          n = e.height;\n      return i < n / 2 ? \"top\" : i > t.height - n / 2 ? \"bottom\" : \"center\";\n    }(t, i);\n\n    return {\n      xAlign: e.xAlign || Ds(t, e, i, n),\n      yAlign: n\n    };\n  }\n\n  function Os(t, e, i, n) {\n    var o = t.caretSize,\n        s = t.caretPadding,\n        a = t.cornerRadius,\n        r = i.xAlign,\n        l = i.yAlign,\n        c = o + s,\n        h = a + s;\n\n    var d = function (t, e) {\n      var i = t.x,\n          n = t.width;\n      return \"right\" === e ? i -= n : \"center\" === e && (i -= n / 2), i;\n    }(e, r);\n\n    var u = function (t, e, i) {\n      var n = t.y,\n          o = t.height;\n      return \"top\" === e ? n += i : n -= \"bottom\" === e ? o + i : o / 2, n;\n    }(e, l, c);\n\n    return \"center\" === l ? \"left\" === r ? d += c : \"right\" === r && (d -= c) : \"left\" === r ? d -= h : \"right\" === r && (d += h), {\n      x: Ht(d, 0, n.width - e.width),\n      y: Ht(u, 0, n.height - e.height)\n    };\n  }\n\n  function Ts(t, e, i) {\n    var n = Fe(i.padding);\n    return \"center\" === e ? t.x + t.width / 2 : \"right\" === e ? t.x + t.width - n.right : t.x + n.left;\n  }\n\n  function As(t) {\n    return Ms([], ks(t));\n  }\n\n  function Ls(t, e) {\n    var i = e && e.dataset && e.dataset.tooltip && e.dataset.tooltip.callbacks;\n    return i ? t.override(i) : t;\n  }\n\n  var Rs = /*#__PURE__*/function (_zi8) {\n    _inherits(Rs, _zi8);\n\n    var _super18 = _createSuper(Rs);\n\n    function Rs(t) {\n      var _this13;\n\n      _classCallCheck(this, Rs);\n\n      _this13 = _super18.call(this), _this13.opacity = 0, _this13._active = [], _this13._chart = t._chart, _this13._eventPosition = void 0, _this13._size = void 0, _this13._cachedAnimations = void 0, _this13._tooltipItems = [], _this13.$animations = void 0, _this13.$context = void 0, _this13.options = t.options, _this13.dataPoints = void 0, _this13.title = void 0, _this13.beforeBody = void 0, _this13.body = void 0, _this13.afterBody = void 0, _this13.footer = void 0, _this13.xAlign = void 0, _this13.yAlign = void 0, _this13.x = void 0, _this13.y = void 0, _this13.height = void 0, _this13.width = void 0, _this13.caretX = void 0, _this13.caretY = void 0, _this13.labelColors = void 0, _this13.labelPointStyles = void 0, _this13.labelTextColors = void 0;\n      return _this13;\n    }\n\n    _createClass(Rs, [{\n      key: \"initialize\",\n      value: function initialize(t) {\n        this.options = t, this._cachedAnimations = void 0, this.$context = void 0;\n      }\n    }, {\n      key: \"_resolveAnimations\",\n      value: function _resolveAnimations() {\n        var t = this,\n            e = t._cachedAnimations;\n        if (e) return e;\n        var i = t._chart,\n            n = t.options.setContext(t.getContext()),\n            o = n.enabled && i.options.animation && n.animations,\n            s = new wi(t._chart, o);\n        return o._cacheable && (t._cachedAnimations = Object.freeze(s)), s;\n      }\n    }, {\n      key: \"getContext\",\n      value: function getContext() {\n        var t = this;\n        return t.$context || (t.$context = (e = t._chart.getContext(), i = t, n = t._tooltipItems, Object.assign(Object.create(e), {\n          tooltip: i,\n          tooltipItems: n,\n          type: \"tooltip\"\n        })));\n        var e, i, n;\n      }\n    }, {\n      key: \"getTitle\",\n      value: function getTitle(t, e) {\n        var i = this,\n            n = e.callbacks,\n            o = n.beforeTitle.apply(i, [t]),\n            s = n.title.apply(i, [t]),\n            a = n.afterTitle.apply(i, [t]);\n        var r = [];\n        return r = Ms(r, ks(o)), r = Ms(r, ks(s)), r = Ms(r, ks(a)), r;\n      }\n    }, {\n      key: \"getBeforeBody\",\n      value: function getBeforeBody(t, e) {\n        return As(e.callbacks.beforeBody.apply(this, [t]));\n      }\n    }, {\n      key: \"getBody\",\n      value: function getBody(t, e) {\n        var i = this,\n            n = e.callbacks,\n            o = [];\n        return J(t, function (t) {\n          var e = {\n            before: [],\n            lines: [],\n            after: []\n          },\n              s = Ls(n, t);\n          Ms(e.before, ks(s.beforeLabel.call(i, t))), Ms(e.lines, s.label.call(i, t)), Ms(e.after, ks(s.afterLabel.call(i, t))), o.push(e);\n        }), o;\n      }\n    }, {\n      key: \"getAfterBody\",\n      value: function getAfterBody(t, e) {\n        return As(e.callbacks.afterBody.apply(this, [t]));\n      }\n    }, {\n      key: \"getFooter\",\n      value: function getFooter(t, e) {\n        var i = this,\n            n = e.callbacks,\n            o = n.beforeFooter.apply(i, [t]),\n            s = n.footer.apply(i, [t]),\n            a = n.afterFooter.apply(i, [t]);\n        var r = [];\n        return r = Ms(r, ks(o)), r = Ms(r, ks(s)), r = Ms(r, ks(a)), r;\n      }\n    }, {\n      key: \"_createItems\",\n      value: function _createItems(t) {\n        var e = this,\n            i = e._active,\n            n = e._chart.data,\n            o = [],\n            s = [],\n            a = [];\n        var r,\n            l,\n            c = [];\n\n        for (r = 0, l = i.length; r < l; ++r) {\n          c.push(Ss(e._chart, i[r]));\n        }\n\n        return t.filter && (c = c.filter(function (e, i, o) {\n          return t.filter(e, i, o, n);\n        })), t.itemSort && (c = c.sort(function (e, i) {\n          return t.itemSort(e, i, n);\n        })), J(c, function (i) {\n          var n = Ls(t.callbacks, i);\n          o.push(n.labelColor.call(e, i)), s.push(n.labelPointStyle.call(e, i)), a.push(n.labelTextColor.call(e, i));\n        }), e.labelColors = o, e.labelPointStyles = s, e.labelTextColors = a, e.dataPoints = c, c;\n      }\n    }, {\n      key: \"update\",\n      value: function update(t, e) {\n        var i = this,\n            n = i.options.setContext(i.getContext()),\n            o = i._active;\n        var s,\n            a = [];\n\n        if (o.length) {\n          var _t53 = ws[n.position].call(i, o, i._eventPosition);\n\n          a = i._createItems(n), i.title = i.getTitle(a, n), i.beforeBody = i.getBeforeBody(a, n), i.body = i.getBody(a, n), i.afterBody = i.getAfterBody(a, n), i.footer = i.getFooter(a, n);\n\n          var _e52 = i._size = Ps(i, n),\n              _r21 = Object.assign({}, _t53, _e52),\n              _l21 = Cs(i._chart, n, _r21),\n              _c20 = Os(n, _r21, _l21, i._chart);\n\n          i.xAlign = _l21.xAlign, i.yAlign = _l21.yAlign, s = {\n            opacity: 1,\n            x: _c20.x,\n            y: _c20.y,\n            width: _e52.width,\n            height: _e52.height,\n            caretX: _t53.x,\n            caretY: _t53.y\n          };\n        } else 0 !== i.opacity && (s = {\n          opacity: 0\n        });\n\n        i._tooltipItems = a, i.$context = void 0, s && i._resolveAnimations().update(i, s), t && n.external && n.external.call(i, {\n          chart: i._chart,\n          tooltip: i,\n          replay: e\n        });\n      }\n    }, {\n      key: \"drawCaret\",\n      value: function drawCaret(t, e, i, n) {\n        var o = this.getCaretPosition(t, i, n);\n        e.lineTo(o.x1, o.y1), e.lineTo(o.x2, o.y2), e.lineTo(o.x3, o.y3);\n      }\n    }, {\n      key: \"getCaretPosition\",\n      value: function getCaretPosition(t, e, i) {\n        var n = this.xAlign,\n            o = this.yAlign,\n            s = i.cornerRadius,\n            a = i.caretSize,\n            r = t.x,\n            l = t.y,\n            c = e.width,\n            h = e.height;\n        var d, u, f, g, p, m;\n        return \"center\" === o ? (p = l + h / 2, \"left\" === n ? (d = r, u = d - a, g = p + a, m = p - a) : (d = r + c, u = d + a, g = p - a, m = p + a), f = d) : (u = \"left\" === n ? r + s + a : \"right\" === n ? r + c - s - a : this.caretX, \"top\" === o ? (g = l, p = g - a, d = u - a, f = u + a) : (g = l + h, p = g + a, d = u + a, f = u - a), m = g), {\n          x1: d,\n          x2: u,\n          x3: f,\n          y1: g,\n          y2: p,\n          y3: m\n        };\n      }\n    }, {\n      key: \"drawTitle\",\n      value: function drawTitle(t, e, i) {\n        var n = this,\n            o = n.title,\n            s = o.length;\n        var a, r, l;\n\n        if (s) {\n          var _c21 = _n(i.rtl, n.x, n.width);\n\n          for (t.x = Ts(n, i.titleAlign, i), e.textAlign = _c21.textAlign(i.titleAlign), e.textBaseline = \"middle\", a = Be(i.titleFont), r = i.titleSpacing, e.fillStyle = i.titleColor, e.font = a.string, l = 0; l < s; ++l) {\n            e.fillText(o[l], _c21.x(t.x), t.y + a.lineHeight / 2), t.y += a.lineHeight + r, l + 1 === s && (t.y += i.titleMarginBottom - r);\n          }\n        }\n      }\n    }, {\n      key: \"_drawColorBox\",\n      value: function _drawColorBox(t, e, i, n, o) {\n        var s = this,\n            a = s.labelColors[i],\n            r = s.labelPointStyles[i],\n            l = o.boxHeight,\n            c = o.boxWidth,\n            h = Be(o.bodyFont),\n            d = Ts(s, \"left\", o),\n            u = n.x(d),\n            f = l < h.lineHeight ? (h.lineHeight - l) / 2 : 0,\n            g = e.y + f;\n\n        if (o.usePointStyle) {\n          var _e53 = {\n            radius: Math.min(c, l) / 2,\n            pointStyle: r.pointStyle,\n            rotation: r.rotation,\n            borderWidth: 1\n          },\n              _i57 = n.leftForLtr(u, c) + c / 2,\n              _s23 = g + l / 2;\n\n          t.strokeStyle = o.multiKeyBackground, t.fillStyle = o.multiKeyBackground, Kt(t, _e53, _i57, _s23), t.strokeStyle = a.borderColor, t.fillStyle = a.backgroundColor, Kt(t, _e53, _i57, _s23);\n        } else {\n          t.lineWidth = a.borderWidth || 1, t.strokeStyle = a.borderColor, t.setLineDash(a.borderDash || []), t.lineDashOffset = a.borderDashOffset || 0;\n\n          var _e54 = n.leftForLtr(u, c),\n              _i58 = n.leftForLtr(n.xPlus(u, 1), c - 2),\n              _s24 = Ie(a.borderRadius);\n\n          Object.values(_s24).some(function (t) {\n            return 0 !== t;\n          }) ? (t.beginPath(), t.fillStyle = o.multiKeyBackground, ne(t, {\n            x: _e54,\n            y: g,\n            w: c,\n            h: l,\n            radius: _s24\n          }), t.fill(), t.stroke(), t.fillStyle = a.backgroundColor, t.beginPath(), ne(t, {\n            x: _i58,\n            y: g + 1,\n            w: c - 2,\n            h: l - 2,\n            radius: _s24\n          }), t.fill()) : (t.fillStyle = o.multiKeyBackground, t.fillRect(_e54, g, c, l), t.strokeRect(_e54, g, c, l), t.fillStyle = a.backgroundColor, t.fillRect(_i58, g + 1, c - 2, l - 2));\n        }\n\n        t.fillStyle = s.labelTextColors[i];\n      }\n    }, {\n      key: \"drawBody\",\n      value: function drawBody(t, e, i) {\n        var n = this,\n            o = n.body,\n            s = i.bodySpacing,\n            a = i.bodyAlign,\n            r = i.displayColors,\n            l = i.boxHeight,\n            c = i.boxWidth,\n            h = Be(i.bodyFont);\n        var d = h.lineHeight,\n            u = 0;\n\n        var f = _n(i.rtl, n.x, n.width),\n            g = function g(i) {\n          e.fillText(i, f.x(t.x + u), t.y + d / 2), t.y += d + s;\n        },\n            p = f.textAlign(a);\n\n        var m, x, b, _, y, v, w;\n\n        for (e.textAlign = a, e.textBaseline = \"middle\", e.font = h.string, t.x = Ts(n, p, i), e.fillStyle = i.bodyColor, J(n.beforeBody, g), u = r && \"right\" !== p ? \"center\" === a ? c / 2 + 1 : c + 2 : 0, _ = 0, v = o.length; _ < v; ++_) {\n          for (m = o[_], x = n.labelTextColors[_], e.fillStyle = x, J(m.before, g), b = m.lines, r && b.length && (n._drawColorBox(e, t, _, f, i), d = Math.max(h.lineHeight, l)), y = 0, w = b.length; y < w; ++y) {\n            g(b[y]), d = h.lineHeight;\n          }\n\n          J(m.after, g);\n        }\n\n        u = 0, d = h.lineHeight, J(n.afterBody, g), t.y -= s;\n      }\n    }, {\n      key: \"drawFooter\",\n      value: function drawFooter(t, e, i) {\n        var n = this,\n            o = n.footer,\n            s = o.length;\n        var a, r;\n\n        if (s) {\n          var _l22 = _n(i.rtl, n.x, n.width);\n\n          for (t.x = Ts(n, i.footerAlign, i), t.y += i.footerMarginTop, e.textAlign = _l22.textAlign(i.footerAlign), e.textBaseline = \"middle\", a = Be(i.footerFont), e.fillStyle = i.footerColor, e.font = a.string, r = 0; r < s; ++r) {\n            e.fillText(o[r], _l22.x(t.x), t.y + a.lineHeight / 2), t.y += a.lineHeight + i.footerSpacing;\n          }\n        }\n      }\n    }, {\n      key: \"drawBackground\",\n      value: function drawBackground(t, e, i, n) {\n        var o = this.xAlign,\n            s = this.yAlign,\n            a = t.x,\n            r = t.y,\n            l = i.width,\n            c = i.height,\n            h = n.cornerRadius;\n        e.fillStyle = n.backgroundColor, e.strokeStyle = n.borderColor, e.lineWidth = n.borderWidth, e.beginPath(), e.moveTo(a + h, r), \"top\" === s && this.drawCaret(t, e, i, n), e.lineTo(a + l - h, r), e.quadraticCurveTo(a + l, r, a + l, r + h), \"center\" === s && \"right\" === o && this.drawCaret(t, e, i, n), e.lineTo(a + l, r + c - h), e.quadraticCurveTo(a + l, r + c, a + l - h, r + c), \"bottom\" === s && this.drawCaret(t, e, i, n), e.lineTo(a + h, r + c), e.quadraticCurveTo(a, r + c, a, r + c - h), \"center\" === s && \"left\" === o && this.drawCaret(t, e, i, n), e.lineTo(a, r + h), e.quadraticCurveTo(a, r, a + h, r), e.closePath(), e.fill(), n.borderWidth > 0 && e.stroke();\n      }\n    }, {\n      key: \"_updateAnimationTarget\",\n      value: function _updateAnimationTarget(t) {\n        var e = this,\n            i = e._chart,\n            n = e.$animations,\n            o = n && n.x,\n            s = n && n.y;\n\n        if (o || s) {\n          var _n42 = ws[t.position].call(e, e._active, e._eventPosition);\n\n          if (!_n42) return;\n\n          var _a24 = e._size = Ps(e, t),\n              _r22 = Object.assign({}, _n42, e._size),\n              _l23 = Cs(i, t, _r22),\n              _c22 = Os(t, _r22, _l23, i);\n\n          o._to === _c22.x && s._to === _c22.y || (e.xAlign = _l23.xAlign, e.yAlign = _l23.yAlign, e.width = _a24.width, e.height = _a24.height, e.caretX = _n42.x, e.caretY = _n42.y, e._resolveAnimations().update(e, _c22));\n        }\n      }\n    }, {\n      key: \"draw\",\n      value: function draw(t) {\n        var e = this,\n            i = e.options.setContext(e.getContext());\n        var n = e.opacity;\n        if (!n) return;\n\n        e._updateAnimationTarget(i);\n\n        var o = {\n          width: e.width,\n          height: e.height\n        },\n            s = {\n          x: e.x,\n          y: e.y\n        };\n        n = Math.abs(n) < .001 ? 0 : n;\n        var a = Fe(i.padding),\n            r = e.title.length || e.beforeBody.length || e.body.length || e.afterBody.length || e.footer.length;\n        i.enabled && r && (t.save(), t.globalAlpha = n, e.drawBackground(s, t, o, i), yn(t, i.textDirection), s.y += a.top, e.drawTitle(s, t, i), e.drawBody(s, t, i), e.drawFooter(s, t, i), vn(t, i.textDirection), t.restore());\n      }\n    }, {\n      key: \"getActiveElements\",\n      value: function getActiveElements() {\n        return this._active || [];\n      }\n    }, {\n      key: \"setActiveElements\",\n      value: function setActiveElements(t, e) {\n        var i = this,\n            n = i._active,\n            o = t.map(function (_ref17) {\n          var t = _ref17.datasetIndex,\n              e = _ref17.index;\n\n          var n = i._chart.getDatasetMeta(t);\n\n          if (!n) throw new Error(\"Cannot find a dataset at index \" + t);\n          return {\n            datasetIndex: t,\n            element: n.data[e],\n            index: e\n          };\n        }),\n            s = !tt(n, o),\n            a = i._positionChanged(o, e);\n\n        (s || a) && (i._active = o, i._eventPosition = e, i.update(!0));\n      }\n    }, {\n      key: \"handleEvent\",\n      value: function handleEvent(t, e) {\n        var i = this,\n            n = i.options,\n            o = i._active || [];\n        var s = !1,\n            a = [];\n        \"mouseout\" !== t.type && (a = i._chart.getElementsAtEventForMode(t, n.mode, n, e), n.reverse && a.reverse());\n\n        var r = i._positionChanged(a, t);\n\n        return s = e || !tt(a, o) || r, s && (i._active = a, (n.enabled || n.external) && (i._eventPosition = {\n          x: t.x,\n          y: t.y\n        }, i.update(!0, e))), s;\n      }\n    }, {\n      key: \"_positionChanged\",\n      value: function _positionChanged(t, e) {\n        var i = this.caretX,\n            n = this.caretY,\n            o = this.options,\n            s = ws[o.position].call(this, t, e);\n        return !1 !== s && (i !== s.x || n !== s.y);\n      }\n    }]);\n\n    return Rs;\n  }(zi);\n\n  Rs.positioners = ws;\n  var Es = {\n    id: \"tooltip\",\n    _element: Rs,\n    positioners: ws,\n    afterInit: function afterInit(t, e, i) {\n      i && (t.tooltip = new Rs({\n        _chart: t,\n        options: i\n      }));\n    },\n    beforeUpdate: function beforeUpdate(t, e, i) {\n      t.tooltip && t.tooltip.initialize(i);\n    },\n    reset: function reset(t, e, i) {\n      t.tooltip && t.tooltip.initialize(i);\n    },\n    afterDraw: function afterDraw(t) {\n      var e = t.tooltip,\n          i = {\n        tooltip: e\n      };\n      !1 !== t.notifyPlugins(\"beforeTooltipDraw\", i) && (e && e.draw(t.ctx), t.notifyPlugins(\"afterTooltipDraw\", i));\n    },\n    afterEvent: function afterEvent(t, e) {\n      if (t.tooltip) {\n        var _i59 = e.replay;\n        t.tooltip.handleEvent(e.event, _i59) && (e.changed = !0);\n      }\n    },\n    defaults: {\n      enabled: !0,\n      external: null,\n      position: \"average\",\n      backgroundColor: \"rgba(0,0,0,0.8)\",\n      titleColor: \"#fff\",\n      titleFont: {\n        weight: \"bold\"\n      },\n      titleSpacing: 2,\n      titleMarginBottom: 6,\n      titleAlign: \"left\",\n      bodyColor: \"#fff\",\n      bodySpacing: 2,\n      bodyFont: {},\n      bodyAlign: \"left\",\n      footerColor: \"#fff\",\n      footerSpacing: 2,\n      footerMarginTop: 6,\n      footerFont: {\n        weight: \"bold\"\n      },\n      footerAlign: \"left\",\n      padding: 6,\n      caretPadding: 2,\n      caretSize: 5,\n      cornerRadius: 6,\n      boxHeight: function boxHeight(t, e) {\n        return e.bodyFont.size;\n      },\n      boxWidth: function boxWidth(t, e) {\n        return e.bodyFont.size;\n      },\n      multiKeyBackground: \"#fff\",\n      displayColors: !0,\n      borderColor: \"rgba(0,0,0,0)\",\n      borderWidth: 0,\n      animation: {\n        duration: 400,\n        easing: \"easeOutQuart\"\n      },\n      animations: {\n        numbers: {\n          type: \"number\",\n          properties: [\"x\", \"y\", \"width\", \"height\", \"caretX\", \"caretY\"]\n        },\n        opacity: {\n          easing: \"linear\",\n          duration: 200\n        }\n      },\n      callbacks: {\n        beforeTitle: H,\n        title: function title(t) {\n          if (t.length > 0) {\n            var _e55 = t[0],\n                _i60 = _e55.chart.data.labels,\n                _n43 = _i60 ? _i60.length : 0;\n\n            if (this && this.options && \"dataset\" === this.options.mode) return _e55.dataset.label || \"\";\n            if (_e55.label) return _e55.label;\n            if (_n43 > 0 && _e55.dataIndex < _n43) return _i60[_e55.dataIndex];\n          }\n\n          return \"\";\n        },\n        afterTitle: H,\n        beforeBody: H,\n        beforeLabel: H,\n        label: function label(t) {\n          if (this && this.options && \"dataset\" === this.options.mode) return t.label + \": \" + t.formattedValue || t.formattedValue;\n          var e = t.dataset.label || \"\";\n          e && (e += \": \");\n          var i = t.formattedValue;\n          return $(i) || (e += i), e;\n        },\n        labelColor: function labelColor(t) {\n          var e = t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);\n          return {\n            borderColor: e.borderColor,\n            backgroundColor: e.backgroundColor,\n            borderWidth: e.borderWidth,\n            borderDash: e.borderDash,\n            borderDashOffset: e.borderDashOffset,\n            borderRadius: 0\n          };\n        },\n        labelTextColor: function labelTextColor() {\n          return this.options.bodyColor;\n        },\n        labelPointStyle: function labelPointStyle(t) {\n          var e = t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);\n          return {\n            pointStyle: e.pointStyle,\n            rotation: e.rotation\n          };\n        },\n        afterLabel: H,\n        afterBody: H,\n        beforeFooter: H,\n        footer: H,\n        afterFooter: H\n      }\n    },\n    defaultRoutes: {\n      bodyFont: \"font\",\n      footerFont: \"font\",\n      titleFont: \"font\"\n    },\n    descriptors: {\n      _scriptable: function _scriptable(t) {\n        return \"filter\" !== t && \"itemSort\" !== t && \"external\" !== t;\n      },\n      _indexable: !1,\n      callbacks: {\n        _scriptable: !1,\n        _indexable: !1\n      },\n      animation: {\n        _fallback: !1\n      },\n      animations: {\n        _fallback: \"animation\"\n      }\n    },\n    additionalOptionScopes: [\"interaction\"]\n  },\n      zs = Object.freeze({\n    __proto__: null,\n    Decimation: Go,\n    Filler: gs,\n    Legend: xs,\n    SubTitle: vs,\n    Title: _s,\n    Tooltip: Es\n  });\n\n  function Is(t, e, i) {\n    var n = t.indexOf(e);\n    if (-1 === n) return function (t, e, i) {\n      return \"string\" == typeof e ? t.push(e) - 1 : isNaN(e) ? null : i;\n    }(t, e, i);\n    return n !== t.lastIndexOf(e) ? i : n;\n  }\n\n  var Fs = /*#__PURE__*/function (_qi) {\n    _inherits(Fs, _qi);\n\n    var _super19 = _createSuper(Fs);\n\n    function Fs(t) {\n      var _this14;\n\n      _classCallCheck(this, Fs);\n\n      _this14 = _super19.call(this, t), _this14._startValue = void 0, _this14._valueRange = 0;\n      return _this14;\n    }\n\n    _createClass(Fs, [{\n      key: \"parse\",\n      value: function parse(t, e) {\n        if ($(t)) return null;\n        var i = this.getLabels();\n        return function (t, e) {\n          return null === t ? null : Ht(Math.round(t), 0, e);\n        }(e = isFinite(e) && i[e] === t ? e : Is(i, t, K(e, t)), i.length - 1);\n      }\n    }, {\n      key: \"determineDataLimits\",\n      value: function determineDataLimits() {\n        var t = this,\n            _t$getUserBounds2 = t.getUserBounds(),\n            e = _t$getUserBounds2.minDefined,\n            i = _t$getUserBounds2.maxDefined;\n\n        var _t$getMinMax = t.getMinMax(!0),\n            n = _t$getMinMax.min,\n            o = _t$getMinMax.max;\n\n        \"ticks\" === t.options.bounds && (e || (n = 0), i || (o = t.getLabels().length - 1)), t.min = n, t.max = o;\n      }\n    }, {\n      key: \"buildTicks\",\n      value: function buildTicks() {\n        var t = this,\n            e = t.min,\n            i = t.max,\n            n = t.options.offset,\n            o = [];\n        var s = t.getLabels();\n        s = 0 === e && i === s.length - 1 ? s : s.slice(e, i + 1), t._valueRange = Math.max(s.length - (n ? 0 : 1), 1), t._startValue = t.min - (n ? .5 : 0);\n\n        for (var _t54 = e; _t54 <= i; _t54++) {\n          o.push({\n            value: _t54\n          });\n        }\n\n        return o;\n      }\n    }, {\n      key: \"getLabelForValue\",\n      value: function getLabelForValue(t) {\n        var e = this.getLabels();\n        return t >= 0 && t < e.length ? e[t] : t;\n      }\n    }, {\n      key: \"configure\",\n      value: function configure() {\n        var t = this;\n        _get2(_getPrototypeOf(Fs.prototype), \"configure\", this).call(this), t.isHorizontal() || (t._reversePixels = !t._reversePixels);\n      }\n    }, {\n      key: \"getPixelForValue\",\n      value: function getPixelForValue(t) {\n        var e = this;\n        return \"number\" != typeof t && (t = e.parse(t)), null === t ? NaN : e.getPixelForDecimal((t - e._startValue) / e._valueRange);\n      }\n    }, {\n      key: \"getPixelForTick\",\n      value: function getPixelForTick(t) {\n        var e = this.ticks;\n        return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t].value);\n      }\n    }, {\n      key: \"getValueForPixel\",\n      value: function getValueForPixel(t) {\n        var e = this;\n        return Math.round(e._startValue + e.getDecimalForPixel(t) * e._valueRange);\n      }\n    }, {\n      key: \"getBasePixel\",\n      value: function getBasePixel() {\n        return this.bottom;\n      }\n    }]);\n\n    return Fs;\n  }(qi);\n\n  function Bs(t, e, _ref18) {\n    var i = _ref18.horizontal,\n        n = _ref18.minRotation;\n    var o = Et(n),\n        s = (i ? Math.sin(o) : Math.cos(o)) || .001,\n        a = .75 * e * (\"\" + t).length;\n    return Math.min(e / s, a);\n  }\n\n  Fs.id = \"category\", Fs.defaults = {\n    ticks: {\n      callback: Fs.prototype.getLabelForValue\n    }\n  };\n\n  var Vs = /*#__PURE__*/function (_qi2) {\n    _inherits(Vs, _qi2);\n\n    var _super20 = _createSuper(Vs);\n\n    function Vs(t) {\n      var _this15;\n\n      _classCallCheck(this, Vs);\n\n      _this15 = _super20.call(this, t), _this15.start = void 0, _this15.end = void 0, _this15._startValue = void 0, _this15._endValue = void 0, _this15._valueRange = 0;\n      return _this15;\n    }\n\n    _createClass(Vs, [{\n      key: \"parse\",\n      value: function parse(t, e) {\n        return $(t) || (\"number\" == typeof t || t instanceof Number) && !isFinite(+t) ? null : +t;\n      }\n    }, {\n      key: \"handleTickRangeOptions\",\n      value: function handleTickRangeOptions() {\n        var t = this,\n            e = t.options.beginAtZero,\n            _t$getUserBounds3 = t.getUserBounds(),\n            i = _t$getUserBounds3.minDefined,\n            n = _t$getUserBounds3.maxDefined;\n\n        var o = t.min,\n            s = t.max;\n\n        var a = function a(t) {\n          return o = i ? o : t;\n        },\n            r = function r(t) {\n          return s = n ? s : t;\n        };\n\n        if (e) {\n          var _t55 = Dt(o),\n              _e56 = Dt(s);\n\n          _t55 < 0 && _e56 < 0 ? r(0) : _t55 > 0 && _e56 > 0 && a(0);\n        }\n\n        o === s && (r(s + 1), e || a(o - 1)), t.min = o, t.max = s;\n      }\n    }, {\n      key: \"getTickLimit\",\n      value: function getTickLimit() {\n        var t = this,\n            e = t.options.ticks;\n        var i,\n            n = e.maxTicksLimit,\n            o = e.stepSize;\n        return o ? i = Math.ceil(t.max / o) - Math.floor(t.min / o) + 1 : (i = t.computeTickLimit(), n = n || 11), n && (i = Math.min(n, i)), i;\n      }\n    }, {\n      key: \"computeTickLimit\",\n      value: function computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n      }\n    }, {\n      key: \"buildTicks\",\n      value: function buildTicks() {\n        var t = this,\n            e = t.options,\n            i = e.ticks;\n        var n = t.getTickLimit();\n        n = Math.max(2, n);\n\n        var o = function (t, e) {\n          var i = [],\n              n = t.bounds,\n              o = t.step,\n              s = t.min,\n              a = t.max,\n              r = t.precision,\n              l = t.count,\n              c = t.maxTicks,\n              h = t.maxDigits,\n              d = t.includeBounds,\n              u = o || 1,\n              f = c - 1,\n              g = e.min,\n              p = e.max,\n              m = !$(s),\n              x = !$(a),\n              b = !$(l),\n              _ = (p - g) / (h + 1);\n\n          var y,\n              v,\n              w,\n              M,\n              k = Ct((p - g) / f / u) * u;\n          if (k < 1e-14 && !m && !x) return [{\n            value: g\n          }, {\n            value: p\n          }];\n          M = Math.ceil(p / k) - Math.floor(g / k), M > f && (k = Ct(M * k / f / u) * u), $(r) || (y = Math.pow(10, r), k = Math.ceil(k * y) / y), \"ticks\" === n ? (v = Math.floor(g / k) * k, w = Math.ceil(p / k) * k) : (v = g, w = p), m && x && o && Lt((a - s) / o, k / 1e3) ? (M = Math.round(Math.min((a - s) / k, c)), k = (a - s) / M, v = s, w = a) : b ? (v = m ? s : v, w = x ? a : w, M = l - 1, k = (w - v) / M) : (M = (w - v) / k, M = At(M, Math.round(M), k / 1e3) ? Math.round(M) : Math.ceil(M));\n          var S = Math.max(It(k), It(v));\n          y = Math.pow(10, $(r) ? S : r), v = Math.round(v * y) / y, w = Math.round(w * y) / y;\n          var P = 0;\n\n          for (m && (d && v !== s ? (i.push({\n            value: s\n          }), v < s && P++, At(Math.round((v + P * k) * y) / y, s, Bs(s, _, t)) && P++) : v < s && P++); P < M; ++P) {\n            i.push({\n              value: Math.round((v + P * k) * y) / y\n            });\n          }\n\n          return x && d && w !== a ? At(i[i.length - 1].value, a, Bs(a, _, t)) ? i[i.length - 1].value = a : i.push({\n            value: a\n          }) : x && w !== a || i.push({\n            value: w\n          }), i;\n        }({\n          maxTicks: n,\n          bounds: e.bounds,\n          min: e.min,\n          max: e.max,\n          precision: i.precision,\n          step: i.stepSize,\n          count: i.count,\n          maxDigits: t._maxDigits(),\n          horizontal: t.isHorizontal(),\n          minRotation: i.minRotation || 0,\n          includeBounds: !1 !== i.includeBounds\n        }, t._range || t);\n\n        return \"ticks\" === e.bounds && Rt(o, t, \"value\"), e.reverse ? (o.reverse(), t.start = t.max, t.end = t.min) : (t.start = t.min, t.end = t.max), o;\n      }\n    }, {\n      key: \"configure\",\n      value: function configure() {\n        var t = this,\n            e = t.ticks;\n        var i = t.min,\n            n = t.max;\n\n        if (_get2(_getPrototypeOf(Vs.prototype), \"configure\", this).call(this), t.options.offset && e.length) {\n          var _t56 = (n - i) / Math.max(e.length - 1, 1) / 2;\n\n          i -= _t56, n += _t56;\n        }\n\n        t._startValue = i, t._endValue = n, t._valueRange = n - i;\n      }\n    }, {\n      key: \"getLabelForValue\",\n      value: function getLabelForValue(t) {\n        return Fi(t, this.chart.options.locale);\n      }\n    }]);\n\n    return Vs;\n  }(qi);\n\n  var Ws = /*#__PURE__*/function (_Vs) {\n    _inherits(Ws, _Vs);\n\n    var _super21 = _createSuper(Ws);\n\n    function Ws() {\n      _classCallCheck(this, Ws);\n\n      return _super21.apply(this, arguments);\n    }\n\n    _createClass(Ws, [{\n      key: \"determineDataLimits\",\n      value: function determineDataLimits() {\n        var t = this,\n            _t$getMinMax2 = t.getMinMax(!0),\n            e = _t$getMinMax2.min,\n            i = _t$getMinMax2.max;\n\n        t.min = X(e) ? e : 0, t.max = X(i) ? i : 1, t.handleTickRangeOptions();\n      }\n    }, {\n      key: \"computeTickLimit\",\n      value: function computeTickLimit() {\n        var t = this,\n            e = t.isHorizontal(),\n            i = e ? t.width : t.height,\n            n = Et(t.options.ticks.minRotation),\n            o = (e ? Math.sin(n) : Math.cos(n)) || .001,\n            s = t._resolveTickFontOptions(0);\n\n        return Math.ceil(i / Math.min(40, s.lineHeight / o));\n      }\n    }, {\n      key: \"getPixelForValue\",\n      value: function getPixelForValue(t) {\n        return null === t ? NaN : this.getPixelForDecimal((t - this._startValue) / this._valueRange);\n      }\n    }, {\n      key: \"getValueForPixel\",\n      value: function getValueForPixel(t) {\n        return this._startValue + this.getDecimalForPixel(t) * this._valueRange;\n      }\n    }]);\n\n    return Ws;\n  }(Vs);\n\n  function Ns(t) {\n    return 1 === t / Math.pow(10, Math.floor(Pt(t)));\n  }\n\n  Ws.id = \"linear\", Ws.defaults = {\n    ticks: {\n      callback: Vi.formatters.numeric\n    }\n  };\n\n  var Hs = /*#__PURE__*/function (_qi3) {\n    _inherits(Hs, _qi3);\n\n    var _super22 = _createSuper(Hs);\n\n    function Hs(t) {\n      var _this16;\n\n      _classCallCheck(this, Hs);\n\n      _this16 = _super22.call(this, t), _this16.start = void 0, _this16.end = void 0, _this16._startValue = void 0, _this16._valueRange = 0;\n      return _this16;\n    }\n\n    _createClass(Hs, [{\n      key: \"parse\",\n      value: function parse(t, e) {\n        var i = Vs.prototype.parse.apply(this, [t, e]);\n        if (0 !== i) return X(i) && i > 0 ? i : null;\n        this._zero = !0;\n      }\n    }, {\n      key: \"determineDataLimits\",\n      value: function determineDataLimits() {\n        var t = this,\n            _t$getMinMax3 = t.getMinMax(!0),\n            e = _t$getMinMax3.min,\n            i = _t$getMinMax3.max;\n\n        t.min = X(e) ? Math.max(0, e) : null, t.max = X(i) ? Math.max(0, i) : null, t.options.beginAtZero && (t._zero = !0), t.handleTickRangeOptions();\n      }\n    }, {\n      key: \"handleTickRangeOptions\",\n      value: function handleTickRangeOptions() {\n        var t = this,\n            _t$getUserBounds4 = t.getUserBounds(),\n            e = _t$getUserBounds4.minDefined,\n            i = _t$getUserBounds4.maxDefined;\n\n        var n = t.min,\n            o = t.max;\n\n        var s = function s(t) {\n          return n = e ? n : t;\n        },\n            a = function a(t) {\n          return o = i ? o : t;\n        },\n            r = function r(t, e) {\n          return Math.pow(10, Math.floor(Pt(t)) + e);\n        };\n\n        n === o && (n <= 0 ? (s(1), a(10)) : (s(r(n, -1)), a(r(o, 1)))), n <= 0 && s(r(o, -1)), o <= 0 && a(r(n, 1)), t._zero && t.min !== t._suggestedMin && n === r(t.min, 0) && s(r(n, -1)), t.min = n, t.max = o;\n      }\n    }, {\n      key: \"buildTicks\",\n      value: function buildTicks() {\n        var t = this,\n            e = t.options,\n            i = function (t, e) {\n          var i = Math.floor(Pt(e.max)),\n              n = Math.ceil(e.max / Math.pow(10, i)),\n              o = [];\n          var s = q(t.min, Math.pow(10, Math.floor(Pt(e.min)))),\n              a = Math.floor(Pt(s)),\n              r = Math.floor(s / Math.pow(10, a)),\n              l = a < 0 ? Math.pow(10, Math.abs(a)) : 1;\n\n          do {\n            o.push({\n              value: s,\n              major: Ns(s)\n            }), ++r, 10 === r && (r = 1, ++a, l = a >= 0 ? 1 : l), s = Math.round(r * Math.pow(10, a) * l) / l;\n          } while (a < i || a === i && r < n);\n\n          var c = q(t.max, s);\n          return o.push({\n            value: c,\n            major: Ns(s)\n          }), o;\n        }({\n          min: t._userMin,\n          max: t._userMax\n        }, t);\n\n        return \"ticks\" === e.bounds && Rt(i, t, \"value\"), e.reverse ? (i.reverse(), t.start = t.max, t.end = t.min) : (t.start = t.min, t.end = t.max), i;\n      }\n    }, {\n      key: \"getLabelForValue\",\n      value: function getLabelForValue(t) {\n        return void 0 === t ? \"0\" : Fi(t, this.chart.options.locale);\n      }\n    }, {\n      key: \"configure\",\n      value: function configure() {\n        var t = this,\n            e = t.min;\n        _get2(_getPrototypeOf(Hs.prototype), \"configure\", this).call(this), t._startValue = Pt(e), t._valueRange = Pt(t.max) - Pt(e);\n      }\n    }, {\n      key: \"getPixelForValue\",\n      value: function getPixelForValue(t) {\n        var e = this;\n        return void 0 !== t && 0 !== t || (t = e.min), null === t || isNaN(t) ? NaN : e.getPixelForDecimal(t === e.min ? 0 : (Pt(t) - e._startValue) / e._valueRange);\n      }\n    }, {\n      key: \"getValueForPixel\",\n      value: function getValueForPixel(t) {\n        var e = this,\n            i = e.getDecimalForPixel(t);\n        return Math.pow(10, e._startValue + i * e._valueRange);\n      }\n    }]);\n\n    return Hs;\n  }(qi);\n\n  function js(t) {\n    var e = t.ticks;\n\n    if (e.display && t.display) {\n      var _t57 = Fe(e.backdropPadding);\n\n      return K(e.font && e.font.size, xt.font.size) + _t57.height;\n    }\n\n    return 0;\n  }\n\n  function $s(t, e, i, n, o) {\n    return t === n || t === o ? {\n      start: e - i / 2,\n      end: e + i / 2\n    } : t < n || t > o ? {\n      start: e - i,\n      end: e\n    } : {\n      start: e,\n      end: e + i\n    };\n  }\n\n  function Ys(t) {\n    var e = {\n      l: 0,\n      r: t.width,\n      t: 0,\n      b: t.height - t.paddingTop\n    },\n        i = {},\n        n = [],\n        o = [],\n        s = t.getLabels().length;\n\n    for (var _c23 = 0; _c23 < s; _c23++) {\n      var _s25 = t.options.pointLabels.setContext(t.getContext(_c23));\n\n      o[_c23] = _s25.padding;\n\n      var _h18 = t.getPointPosition(_c23, t.drawingArea + o[_c23]),\n          _d9 = Be(_s25.font),\n          _u9 = (a = t.ctx, r = _d9, l = Y(l = t._pointLabels[_c23]) ? l : [l], {\n        w: Ut(a, r.string, l),\n        h: l.length * r.lineHeight\n      });\n\n      n[_c23] = _u9;\n\n      var _f7 = t.getIndexAngle(_c23),\n          _g6 = zt(_f7),\n          _p3 = $s(_g6, _h18.x, _u9.w, 0, 180),\n          _m4 = $s(_g6, _h18.y, _u9.h, 90, 270);\n\n      _p3.start < e.l && (e.l = _p3.start, i.l = _f7), _p3.end > e.r && (e.r = _p3.end, i.r = _f7), _m4.start < e.t && (e.t = _m4.start, i.t = _f7), _m4.end > e.b && (e.b = _m4.end, i.b = _f7);\n    }\n\n    var a, r, l;\n    t._setReductions(t.drawingArea, e, i), t._pointLabelItems = function (t, e, i) {\n      var n = [],\n          o = t.getLabels().length,\n          s = t.options,\n          a = js(s),\n          r = t.getDistanceFromCenterForValue(s.ticks.reverse ? t.min : t.max);\n\n      for (var _s26 = 0; _s26 < o; _s26++) {\n        var _o33 = 0 === _s26 ? a / 2 : 0,\n            _l24 = t.getPointPosition(_s26, r + _o33 + i[_s26]),\n            _c24 = zt(t.getIndexAngle(_s26)),\n            _h19 = e[_s26],\n            _d10 = qs(_l24.y, _h19.h, _c24),\n            _u10 = Us(_c24),\n            _f8 = Xs(_l24.x, _h19.w, _u10);\n\n        n.push({\n          x: _l24.x,\n          y: _d10,\n          textAlign: _u10,\n          left: _f8,\n          top: _d10,\n          right: _f8 + _h19.w,\n          bottom: _d10 + _h19.h\n        });\n      }\n\n      return n;\n    }(t, n, o);\n  }\n\n  function Us(t) {\n    return 0 === t || 180 === t ? \"center\" : t < 180 ? \"left\" : \"right\";\n  }\n\n  function Xs(t, e, i) {\n    return \"right\" === i ? t -= e : \"center\" === i && (t -= e / 2), t;\n  }\n\n  function qs(t, e, i) {\n    return 90 === i || 270 === i ? t -= e / 2 : (i > 270 || i < 90) && (t -= e), t;\n  }\n\n  function Ks(t, e, i, n) {\n    var o = t.ctx;\n    if (i) o.arc(t.xCenter, t.yCenter, e, 0, _t);else {\n      var _i61 = t.getPointPosition(0, e);\n\n      o.moveTo(_i61.x, _i61.y);\n\n      for (var _s27 = 1; _s27 < n; _s27++) {\n        _i61 = t.getPointPosition(_s27, e), o.lineTo(_i61.x, _i61.y);\n      }\n    }\n  }\n\n  function Gs(t) {\n    return Tt(t) ? t : 0;\n  }\n\n  Hs.id = \"logarithmic\", Hs.defaults = {\n    ticks: {\n      callback: Vi.formatters.logarithmic,\n      major: {\n        enabled: !0\n      }\n    }\n  };\n\n  var Zs = /*#__PURE__*/function (_Vs2) {\n    _inherits(Zs, _Vs2);\n\n    var _super23 = _createSuper(Zs);\n\n    function Zs(t) {\n      var _this17;\n\n      _classCallCheck(this, Zs);\n\n      _this17 = _super23.call(this, t), _this17.xCenter = void 0, _this17.yCenter = void 0, _this17.drawingArea = void 0, _this17._pointLabels = [], _this17._pointLabelItems = [];\n      return _this17;\n    }\n\n    _createClass(Zs, [{\n      key: \"setDimensions\",\n      value: function setDimensions() {\n        var t = this;\n        t.width = t.maxWidth, t.height = t.maxHeight, t.paddingTop = js(t.options) / 2, t.xCenter = Math.floor(t.width / 2), t.yCenter = Math.floor((t.height - t.paddingTop) / 2), t.drawingArea = Math.min(t.height - t.paddingTop, t.width) / 2;\n      }\n    }, {\n      key: \"determineDataLimits\",\n      value: function determineDataLimits() {\n        var t = this,\n            _t$getMinMax4 = t.getMinMax(!1),\n            e = _t$getMinMax4.min,\n            i = _t$getMinMax4.max;\n\n        t.min = X(e) && !isNaN(e) ? e : 0, t.max = X(i) && !isNaN(i) ? i : 0, t.handleTickRangeOptions();\n      }\n    }, {\n      key: \"computeTickLimit\",\n      value: function computeTickLimit() {\n        return Math.ceil(this.drawingArea / js(this.options));\n      }\n    }, {\n      key: \"generateTickLabels\",\n      value: function generateTickLabels(t) {\n        var e = this;\n        Vs.prototype.generateTickLabels.call(e, t), e._pointLabels = e.getLabels().map(function (t, i) {\n          var n = Q(e.options.pointLabels.callback, [t, i], e);\n          return n || 0 === n ? n : \"\";\n        });\n      }\n    }, {\n      key: \"fit\",\n      value: function fit() {\n        var t = this,\n            e = t.options;\n        e.display && e.pointLabels.display ? Ys(t) : t.setCenterPoint(0, 0, 0, 0);\n      }\n    }, {\n      key: \"_setReductions\",\n      value: function _setReductions(t, e, i) {\n        var n = this;\n        var o = e.l / Math.sin(i.l),\n            s = Math.max(e.r - n.width, 0) / Math.sin(i.r),\n            a = -e.t / Math.cos(i.t),\n            r = -Math.max(e.b - (n.height - n.paddingTop), 0) / Math.cos(i.b);\n        o = Gs(o), s = Gs(s), a = Gs(a), r = Gs(r), n.drawingArea = Math.max(t / 2, Math.min(Math.floor(t - (o + s) / 2), Math.floor(t - (a + r) / 2))), n.setCenterPoint(o, s, a, r);\n      }\n    }, {\n      key: \"setCenterPoint\",\n      value: function setCenterPoint(t, e, i, n) {\n        var o = this,\n            s = o.width - e - o.drawingArea,\n            a = t + o.drawingArea,\n            r = i + o.drawingArea,\n            l = o.height - o.paddingTop - n - o.drawingArea;\n        o.xCenter = Math.floor((a + s) / 2 + o.left), o.yCenter = Math.floor((r + l) / 2 + o.top + o.paddingTop);\n      }\n    }, {\n      key: \"getIndexAngle\",\n      value: function getIndexAngle(t) {\n        return Wt(t * (_t / this.getLabels().length) + Et(this.options.startAngle || 0));\n      }\n    }, {\n      key: \"getDistanceFromCenterForValue\",\n      value: function getDistanceFromCenterForValue(t) {\n        var e = this;\n        if ($(t)) return NaN;\n        var i = e.drawingArea / (e.max - e.min);\n        return e.options.reverse ? (e.max - t) * i : (t - e.min) * i;\n      }\n    }, {\n      key: \"getValueForDistanceFromCenter\",\n      value: function getValueForDistanceFromCenter(t) {\n        if ($(t)) return NaN;\n        var e = this,\n            i = t / (e.drawingArea / (e.max - e.min));\n        return e.options.reverse ? e.max - i : e.min + i;\n      }\n    }, {\n      key: \"getPointPosition\",\n      value: function getPointPosition(t, e) {\n        var i = this,\n            n = i.getIndexAngle(t) - Mt;\n        return {\n          x: Math.cos(n) * e + i.xCenter,\n          y: Math.sin(n) * e + i.yCenter,\n          angle: n\n        };\n      }\n    }, {\n      key: \"getPointPositionForValue\",\n      value: function getPointPositionForValue(t, e) {\n        return this.getPointPosition(t, this.getDistanceFromCenterForValue(e));\n      }\n    }, {\n      key: \"getBasePosition\",\n      value: function getBasePosition(t) {\n        return this.getPointPositionForValue(t || 0, this.getBaseValue());\n      }\n    }, {\n      key: \"getPointLabelPosition\",\n      value: function getPointLabelPosition(t) {\n        var _this$_pointLabelItem = this._pointLabelItems[t],\n            e = _this$_pointLabelItem.left,\n            i = _this$_pointLabelItem.top,\n            n = _this$_pointLabelItem.right,\n            o = _this$_pointLabelItem.bottom;\n        return {\n          left: e,\n          top: i,\n          right: n,\n          bottom: o\n        };\n      }\n    }, {\n      key: \"drawBackground\",\n      value: function drawBackground() {\n        var t = this,\n            _t$options3 = t.options,\n            e = _t$options3.backgroundColor,\n            i = _t$options3.grid.circular;\n\n        if (e) {\n          var _n44 = t.ctx;\n          _n44.save(), _n44.beginPath(), Ks(t, t.getDistanceFromCenterForValue(t._endValue), i, t.getLabels().length), _n44.closePath(), _n44.fillStyle = e, _n44.fill(), _n44.restore();\n        }\n      }\n    }, {\n      key: \"drawGrid\",\n      value: function drawGrid() {\n        var t = this,\n            e = t.ctx,\n            i = t.options,\n            n = i.angleLines,\n            o = i.grid,\n            s = t.getLabels().length;\n        var a, r, l;\n\n        if (i.pointLabels.display && function (t, e) {\n          var i = t.ctx,\n              n = t.options.pointLabels;\n\n          for (var _o34 = e - 1; _o34 >= 0; _o34--) {\n            var _e57 = n.setContext(t.getContext(_o34)),\n                _s28 = Be(_e57.font),\n                _t$_pointLabelItems$_ = t._pointLabelItems[_o34],\n                _a25 = _t$_pointLabelItems$_.x,\n                _r23 = _t$_pointLabelItems$_.y,\n                _l25 = _t$_pointLabelItems$_.textAlign,\n                _c25 = _t$_pointLabelItems$_.left,\n                _h20 = _t$_pointLabelItems$_.top,\n                _d11 = _t$_pointLabelItems$_.right,\n                _u11 = _t$_pointLabelItems$_.bottom,\n                _f9 = _e57.backdropColor;\n\n            if (!$(_f9)) {\n              var _t58 = Fe(_e57.backdropPadding);\n\n              i.fillStyle = _f9, i.fillRect(_c25 - _t58.left, _h20 - _t58.top, _d11 - _c25 + _t58.width, _u11 - _h20 + _t58.height);\n            }\n\n            ee(i, t._pointLabels[_o34], _a25, _r23 + _s28.lineHeight / 2, _s28, {\n              color: _e57.color,\n              textAlign: _l25,\n              textBaseline: \"middle\"\n            });\n          }\n        }(t, s), o.display && t.ticks.forEach(function (e, i) {\n          if (0 !== i) {\n            r = t.getDistanceFromCenterForValue(e.value);\n\n            var _n45 = o.setContext(t.getContext(i - 1));\n\n            !function (t, e, i, n) {\n              var o = t.ctx,\n                  s = e.circular,\n                  a = e.color,\n                  r = e.lineWidth;\n              !s && !n || !a || !r || i < 0 || (o.save(), o.strokeStyle = a, o.lineWidth = r, o.setLineDash(e.borderDash), o.lineDashOffset = e.borderDashOffset, o.beginPath(), Ks(t, i, s, n), o.closePath(), o.stroke(), o.restore());\n            }(t, _n45, r, s);\n          }\n        }), n.display) {\n          for (e.save(), a = t.getLabels().length - 1; a >= 0; a--) {\n            var _o35 = n.setContext(t.getContext(a)),\n                _s29 = _o35.color,\n                _c26 = _o35.lineWidth;\n\n            _c26 && _s29 && (e.lineWidth = _c26, e.strokeStyle = _s29, e.setLineDash(_o35.borderDash), e.lineDashOffset = _o35.borderDashOffset, r = t.getDistanceFromCenterForValue(i.ticks.reverse ? t.min : t.max), l = t.getPointPosition(a, r), e.beginPath(), e.moveTo(t.xCenter, t.yCenter), e.lineTo(l.x, l.y), e.stroke());\n          }\n\n          e.restore();\n        }\n      }\n    }, {\n      key: \"drawBorder\",\n      value: function drawBorder() {}\n    }, {\n      key: \"drawLabels\",\n      value: function drawLabels() {\n        var t = this,\n            e = t.ctx,\n            i = t.options,\n            n = i.ticks;\n        if (!n.display) return;\n        var o = t.getIndexAngle(0);\n        var s, a;\n        e.save(), e.translate(t.xCenter, t.yCenter), e.rotate(o), e.textAlign = \"center\", e.textBaseline = \"middle\", t.ticks.forEach(function (o, r) {\n          if (0 === r && !i.reverse) return;\n          var l = n.setContext(t.getContext(r)),\n              c = Be(l.font);\n\n          if (s = t.getDistanceFromCenterForValue(t.ticks[r].value), l.showLabelBackdrop) {\n            e.font = c.string, a = e.measureText(o.label).width, e.fillStyle = l.backdropColor;\n\n            var _t59 = Fe(l.backdropPadding);\n\n            e.fillRect(-a / 2 - _t59.left, -s - c.size / 2 - _t59.top, a + _t59.width, c.size + _t59.height);\n          }\n\n          ee(e, o.label, 0, -s, c, {\n            color: l.color\n          });\n        }), e.restore();\n      }\n    }, {\n      key: \"drawTitle\",\n      value: function drawTitle() {}\n    }]);\n\n    return Zs;\n  }(Vs);\n\n  Zs.id = \"radialLinear\", Zs.defaults = {\n    display: !0,\n    animate: !0,\n    position: \"chartArea\",\n    angleLines: {\n      display: !0,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0\n    },\n    grid: {\n      circular: !1\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: !0,\n      callback: Vi.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: void 0,\n      backdropPadding: 2,\n      display: !0,\n      font: {\n        size: 10\n      },\n      callback: function callback(t) {\n        return t;\n      },\n      padding: 5\n    }\n  }, Zs.defaultRoutes = {\n    \"angleLines.color\": \"borderColor\",\n    \"pointLabels.color\": \"color\",\n    \"ticks.color\": \"color\"\n  }, Zs.descriptors = {\n    angleLines: {\n      _fallback: \"grid\"\n    }\n  };\n  var Qs = {\n    millisecond: {\n      common: !0,\n      size: 1,\n      steps: 1e3\n    },\n    second: {\n      common: !0,\n      size: 1e3,\n      steps: 60\n    },\n    minute: {\n      common: !0,\n      size: 6e4,\n      steps: 60\n    },\n    hour: {\n      common: !0,\n      size: 36e5,\n      steps: 24\n    },\n    day: {\n      common: !0,\n      size: 864e5,\n      steps: 30\n    },\n    week: {\n      common: !1,\n      size: 6048e5,\n      steps: 4\n    },\n    month: {\n      common: !0,\n      size: 2628e6,\n      steps: 12\n    },\n    quarter: {\n      common: !1,\n      size: 7884e6,\n      steps: 4\n    },\n    year: {\n      common: !0,\n      size: 3154e7\n    }\n  },\n      Js = Object.keys(Qs);\n\n  function ta(t, e) {\n    return t - e;\n  }\n\n  function ea(t, e) {\n    if ($(e)) return null;\n    var i = t._adapter,\n        _t$_parseOpts = t._parseOpts,\n        n = _t$_parseOpts.parser,\n        o = _t$_parseOpts.round,\n        s = _t$_parseOpts.isoWeekday;\n    var a = e;\n    return \"function\" == typeof n && (a = n(a)), X(a) || (a = \"string\" == typeof n ? i.parse(a, n) : i.parse(a)), null === a ? null : (o && (a = \"week\" !== o || !Tt(s) && !0 !== s ? i.startOf(a, o) : i.startOf(a, \"isoWeek\", s)), +a);\n  }\n\n  function ia(t, e, i, n) {\n    var o = Js.length;\n\n    for (var _s30 = Js.indexOf(t); _s30 < o - 1; ++_s30) {\n      var _t60 = Qs[Js[_s30]],\n          _o36 = _t60.steps ? _t60.steps : Number.MAX_SAFE_INTEGER;\n\n      if (_t60.common && Math.ceil((i - e) / (_o36 * _t60.size)) <= n) return Js[_s30];\n    }\n\n    return Js[o - 1];\n  }\n\n  function na(t, e, i) {\n    if (i) {\n      if (i.length) {\n        var _oe = oe(i, e),\n            _n46 = _oe.lo,\n            _o37 = _oe.hi;\n\n        t[i[_n46] >= e ? i[_n46] : i[_o37]] = !0;\n      }\n    } else t[e] = !0;\n  }\n\n  function oa(t, e, i) {\n    var n = [],\n        o = {},\n        s = e.length;\n    var a, r;\n\n    for (a = 0; a < s; ++a) {\n      r = e[a], o[r] = a, n.push({\n        value: r,\n        major: !1\n      });\n    }\n\n    return 0 !== s && i ? function (t, e, i, n) {\n      var o = t._adapter,\n          s = +o.startOf(e[0].value, n),\n          a = e[e.length - 1].value;\n      var r, l;\n\n      for (r = s; r <= a; r = +o.add(r, 1, n)) {\n        l = i[r], l >= 0 && (e[l].major = !0);\n      }\n\n      return e;\n    }(t, n, o, i) : n;\n  }\n\n  var sa = /*#__PURE__*/function (_qi4) {\n    _inherits(sa, _qi4);\n\n    var _super24 = _createSuper(sa);\n\n    function sa(t) {\n      var _this18;\n\n      _classCallCheck(this, sa);\n\n      _this18 = _super24.call(this, t), _this18._cache = {\n        data: [],\n        labels: [],\n        all: []\n      }, _this18._unit = \"day\", _this18._majorUnit = void 0, _this18._offsets = {}, _this18._normalized = !1, _this18._parseOpts = void 0;\n      return _this18;\n    }\n\n    _createClass(sa, [{\n      key: \"init\",\n      value: function init(t, e) {\n        var i = t.time || (t.time = {}),\n            n = this._adapter = new ao._date(t.adapters.date);\n        st(i.displayFormats, n.formats()), this._parseOpts = {\n          parser: i.parser,\n          round: i.round,\n          isoWeekday: i.isoWeekday\n        }, _get2(_getPrototypeOf(sa.prototype), \"init\", this).call(this, t), this._normalized = e.normalized;\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(t, e) {\n        return void 0 === t ? null : ea(this, t);\n      }\n    }, {\n      key: \"beforeLayout\",\n      value: function beforeLayout() {\n        _get2(_getPrototypeOf(sa.prototype), \"beforeLayout\", this).call(this), this._cache = {\n          data: [],\n          labels: [],\n          all: []\n        };\n      }\n    }, {\n      key: \"determineDataLimits\",\n      value: function determineDataLimits() {\n        var t = this,\n            e = t.options,\n            i = t._adapter,\n            n = e.time.unit || \"day\";\n\n        var _t$getUserBounds5 = t.getUserBounds(),\n            o = _t$getUserBounds5.min,\n            s = _t$getUserBounds5.max,\n            a = _t$getUserBounds5.minDefined,\n            r = _t$getUserBounds5.maxDefined;\n\n        function l(t) {\n          a || isNaN(t.min) || (o = Math.min(o, t.min)), r || isNaN(t.max) || (s = Math.max(s, t.max));\n        }\n\n        a && r || (l(t._getLabelBounds()), \"ticks\" === e.bounds && \"labels\" === e.ticks.source || l(t.getMinMax(!1))), o = X(o) && !isNaN(o) ? o : +i.startOf(Date.now(), n), s = X(s) && !isNaN(s) ? s : +i.endOf(Date.now(), n) + 1, t.min = Math.min(o, s - 1), t.max = Math.max(o + 1, s);\n      }\n    }, {\n      key: \"_getLabelBounds\",\n      value: function _getLabelBounds() {\n        var t = this.getLabelTimestamps();\n        var e = Number.POSITIVE_INFINITY,\n            i = Number.NEGATIVE_INFINITY;\n        return t.length && (e = t[0], i = t[t.length - 1]), {\n          min: e,\n          max: i\n        };\n      }\n    }, {\n      key: \"buildTicks\",\n      value: function buildTicks() {\n        var t = this,\n            e = t.options,\n            i = e.time,\n            n = e.ticks,\n            o = \"labels\" === n.source ? t.getLabelTimestamps() : t._generate();\n        \"ticks\" === e.bounds && o.length && (t.min = t._userMin || o[0], t.max = t._userMax || o[o.length - 1]);\n        var s = t.min,\n            a = re(o, s, t.max);\n        return t._unit = i.unit || (n.autoSkip ? ia(i.minUnit, t.min, t.max, t._getLabelCapacity(s)) : function (t, e, i, n, o) {\n          for (var _s31 = Js.length - 1; _s31 >= Js.indexOf(i); _s31--) {\n            var _i62 = Js[_s31];\n            if (Qs[_i62].common && t._adapter.diff(o, n, _i62) >= e - 1) return _i62;\n          }\n\n          return Js[i ? Js.indexOf(i) : 0];\n        }(t, a.length, i.minUnit, t.min, t.max)), t._majorUnit = n.major.enabled && \"year\" !== t._unit ? function (t) {\n          for (var _e58 = Js.indexOf(t) + 1, _i63 = Js.length; _e58 < _i63; ++_e58) {\n            if (Qs[Js[_e58]].common) return Js[_e58];\n          }\n        }(t._unit) : void 0, t.initOffsets(o), e.reverse && a.reverse(), oa(t, a, t._majorUnit);\n      }\n    }, {\n      key: \"initOffsets\",\n      value: function initOffsets(t) {\n        var e = this;\n        var i,\n            n,\n            o = 0,\n            s = 0;\n        e.options.offset && t.length && (i = e.getDecimalForValue(t[0]), o = 1 === t.length ? 1 - i : (e.getDecimalForValue(t[1]) - i) / 2, n = e.getDecimalForValue(t[t.length - 1]), s = 1 === t.length ? n : (n - e.getDecimalForValue(t[t.length - 2])) / 2);\n        var a = t.length < 3 ? .5 : .25;\n        o = Ht(o, 0, a), s = Ht(s, 0, a), e._offsets = {\n          start: o,\n          end: s,\n          factor: 1 / (o + 1 + s)\n        };\n      }\n    }, {\n      key: \"_generate\",\n      value: function _generate() {\n        var t = this,\n            e = t._adapter,\n            i = t.min,\n            n = t.max,\n            o = t.options,\n            s = o.time,\n            a = s.unit || ia(s.minUnit, i, n, t._getLabelCapacity(i)),\n            r = K(s.stepSize, 1),\n            l = \"week\" === a && s.isoWeekday,\n            c = Tt(l) || !0 === l,\n            h = {};\n        var d,\n            u,\n            f = i;\n        if (c && (f = +e.startOf(f, \"isoWeek\", l)), f = +e.startOf(f, c ? \"day\" : a), e.diff(n, i, a) > 1e5 * r) throw new Error(i + \" and \" + n + \" are too far apart with stepSize of \" + r + \" \" + a);\n        var g = \"data\" === o.ticks.source && t.getDataTimestamps();\n\n        for (d = f, u = 0; d < n; d = +e.add(d, r, a), u++) {\n          na(h, d, g);\n        }\n\n        return d !== n && \"ticks\" !== o.bounds && 1 !== u || na(h, d, g), Object.keys(h).sort(function (t, e) {\n          return t - e;\n        }).map(function (t) {\n          return +t;\n        });\n      }\n    }, {\n      key: \"getLabelForValue\",\n      value: function getLabelForValue(t) {\n        var e = this._adapter,\n            i = this.options.time;\n        return i.tooltipFormat ? e.format(t, i.tooltipFormat) : e.format(t, i.displayFormats.datetime);\n      }\n    }, {\n      key: \"_tickFormatFunction\",\n      value: function _tickFormatFunction(t, e, i, n) {\n        var o = this,\n            s = o.options,\n            a = s.time.displayFormats,\n            r = o._unit,\n            l = o._majorUnit,\n            c = r && a[r],\n            h = l && a[l],\n            d = i[e],\n            u = l && h && d && d.major,\n            f = o._adapter.format(t, n || (u ? h : c)),\n            g = s.ticks.callback;\n\n        return g ? Q(g, [f, e, i], o) : f;\n      }\n    }, {\n      key: \"generateTickLabels\",\n      value: function generateTickLabels(t) {\n        var e, i, n;\n\n        for (e = 0, i = t.length; e < i; ++e) {\n          n = t[e], n.label = this._tickFormatFunction(n.value, e, t);\n        }\n      }\n    }, {\n      key: \"getDecimalForValue\",\n      value: function getDecimalForValue(t) {\n        var e = this;\n        return null === t ? NaN : (t - e.min) / (e.max - e.min);\n      }\n    }, {\n      key: \"getPixelForValue\",\n      value: function getPixelForValue(t) {\n        var e = this,\n            i = e._offsets,\n            n = e.getDecimalForValue(t);\n        return e.getPixelForDecimal((i.start + n) * i.factor);\n      }\n    }, {\n      key: \"getValueForPixel\",\n      value: function getValueForPixel(t) {\n        var e = this,\n            i = e._offsets,\n            n = e.getDecimalForPixel(t) / i.factor - i.end;\n        return e.min + n * (e.max - e.min);\n      }\n    }, {\n      key: \"_getLabelSize\",\n      value: function _getLabelSize(t) {\n        var e = this,\n            i = e.options.ticks,\n            n = e.ctx.measureText(t).width,\n            o = Et(e.isHorizontal() ? i.maxRotation : i.minRotation),\n            s = Math.cos(o),\n            a = Math.sin(o),\n            r = e._resolveTickFontOptions(0).size;\n\n        return {\n          w: n * s + r * a,\n          h: n * a + r * s\n        };\n      }\n    }, {\n      key: \"_getLabelCapacity\",\n      value: function _getLabelCapacity(t) {\n        var e = this,\n            i = e.options.time,\n            n = i.displayFormats,\n            o = n[i.unit] || n.millisecond,\n            s = e._tickFormatFunction(t, 0, oa(e, [t], e._majorUnit), o),\n            a = e._getLabelSize(s),\n            r = Math.floor(e.isHorizontal() ? e.width / a.w : e.height / a.h) - 1;\n\n        return r > 0 ? r : 1;\n      }\n    }, {\n      key: \"getDataTimestamps\",\n      value: function getDataTimestamps() {\n        var t = this;\n        var e,\n            i,\n            n = t._cache.data || [];\n        if (n.length) return n;\n        var o = t.getMatchingVisibleMetas();\n        if (t._normalized && o.length) return t._cache.data = o[0].controller.getAllParsedValues(t);\n\n        for (e = 0, i = o.length; e < i; ++e) {\n          n = n.concat(o[e].controller.getAllParsedValues(t));\n        }\n\n        return t._cache.data = t.normalize(n);\n      }\n    }, {\n      key: \"getLabelTimestamps\",\n      value: function getLabelTimestamps() {\n        var t = this,\n            e = t._cache.labels || [];\n        var i, n;\n        if (e.length) return e;\n        var o = t.getLabels();\n\n        for (i = 0, n = o.length; i < n; ++i) {\n          e.push(ea(t, o[i]));\n        }\n\n        return t._cache.labels = t._normalized ? e : t.normalize(e);\n      }\n    }, {\n      key: \"normalize\",\n      value: function normalize(t) {\n        return de(t.sort(ta));\n      }\n    }]);\n\n    return sa;\n  }(qi);\n\n  function aa(t, e, i) {\n    var _se, _t$r, _t$l, _se2, _t$r2, _t$l2;\n\n    var n,\n        o,\n        s,\n        a,\n        r = 0,\n        l = t.length - 1;\n    i ? (e >= t[r].pos && e <= t[l].pos && (_se = se(t, \"pos\", e), r = _se.lo, l = _se.hi, _se), (_t$r = t[r], n = _t$r.pos, s = _t$r.time, _t$r), (_t$l = t[l], o = _t$l.pos, a = _t$l.time, _t$l)) : (e >= t[r].time && e <= t[l].time && (_se2 = se(t, \"time\", e), r = _se2.lo, l = _se2.hi, _se2), (_t$r2 = t[r], n = _t$r2.time, s = _t$r2.pos, _t$r2), (_t$l2 = t[l], o = _t$l2.time, a = _t$l2.pos, _t$l2));\n    var c = o - n;\n    return c ? s + (a - s) * (e - n) / c : s;\n  }\n\n  sa.id = \"time\", sa.defaults = {\n    bounds: \"data\",\n    adapters: {},\n    time: {\n      parser: !1,\n      unit: !1,\n      round: !1,\n      isoWeekday: !1,\n      minUnit: \"millisecond\",\n      displayFormats: {}\n    },\n    ticks: {\n      source: \"auto\",\n      major: {\n        enabled: !1\n      }\n    }\n  };\n\n  var ra = /*#__PURE__*/function (_sa) {\n    _inherits(ra, _sa);\n\n    var _super25 = _createSuper(ra);\n\n    function ra(t) {\n      var _this19;\n\n      _classCallCheck(this, ra);\n\n      _this19 = _super25.call(this, t), _this19._table = [], _this19._minPos = void 0, _this19._tableRange = void 0;\n      return _this19;\n    }\n\n    _createClass(ra, [{\n      key: \"initOffsets\",\n      value: function initOffsets() {\n        var t = this,\n            e = t._getTimestampsForTable(),\n            i = t._table = t.buildLookupTable(e);\n\n        t._minPos = aa(i, t.min), t._tableRange = aa(i, t.max) - t._minPos, _get2(_getPrototypeOf(ra.prototype), \"initOffsets\", this).call(this, e);\n      }\n    }, {\n      key: \"buildLookupTable\",\n      value: function buildLookupTable(t) {\n        var e = this.min,\n            i = this.max,\n            n = [],\n            o = [];\n        var s, a, r, l, c;\n\n        for (s = 0, a = t.length; s < a; ++s) {\n          l = t[s], l >= e && l <= i && n.push(l);\n        }\n\n        if (n.length < 2) return [{\n          time: e,\n          pos: 0\n        }, {\n          time: i,\n          pos: 1\n        }];\n\n        for (s = 0, a = n.length; s < a; ++s) {\n          c = n[s + 1], r = n[s - 1], l = n[s], Math.round((c + r) / 2) !== l && o.push({\n            time: l,\n            pos: s / (a - 1)\n          });\n        }\n\n        return o;\n      }\n    }, {\n      key: \"_getTimestampsForTable\",\n      value: function _getTimestampsForTable() {\n        var t = this;\n        var e = t._cache.all || [];\n        if (e.length) return e;\n        var i = t.getDataTimestamps(),\n            n = t.getLabelTimestamps();\n        return e = i.length && n.length ? t.normalize(i.concat(n)) : i.length ? i : n, e = t._cache.all = e, e;\n      }\n    }, {\n      key: \"getDecimalForValue\",\n      value: function getDecimalForValue(t) {\n        return (aa(this._table, t) - this._minPos) / this._tableRange;\n      }\n    }, {\n      key: \"getValueForPixel\",\n      value: function getValueForPixel(t) {\n        var e = this,\n            i = e._offsets,\n            n = e.getDecimalForPixel(t) / i.factor - i.end;\n        return aa(e._table, n * e._tableRange + e._minPos, !0);\n      }\n    }]);\n\n    return ra;\n  }(sa);\n\n  ra.id = \"timeseries\", ra.defaults = sa.defaults;\n  var la = Object.freeze({\n    __proto__: null,\n    CategoryScale: Fs,\n    LinearScale: Ws,\n    LogarithmicScale: Hs,\n    RadialLinearScale: Zs,\n    TimeScale: sa,\n    TimeSeriesScale: ra\n  });\n  return eo.register(yo, la, Xo, zs), eo.helpers = _objectSpread({}, Tn), eo._adapters = ao, eo.Animation = yi, eo.Animations = wi, eo.animator = a, eo.controllers = Ln.controllers.items, eo.DatasetController = Ei, eo.Element = zi, eo.elements = Xo, eo.Interaction = Te, eo.layouts = Ze, eo.platforms = fi, eo.Scale = qi, eo.Ticks = Vi, Object.assign(eo, yo, la, Xo, zs, fi), eo.Chart = eo, \"undefined\" != typeof window && (window.Chart = eo), eo;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY2hhcnQubWluLmpzPzAwN2YiXSwibmFtZXMiOlsidCIsImUiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaSIsIm4iLCJvIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJzIiwiYSIsImFwcGx5IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsIl9yZXF1ZXN0IiwiX2NoYXJ0cyIsIk1hcCIsIl9ydW5uaW5nIiwiX2xhc3REYXRlIiwibGlzdGVuZXJzIiwiZHVyYXRpb24iLCJmb3JFYWNoIiwiY2hhcnQiLCJpbml0aWFsIiwibnVtU3RlcHMiLCJjdXJyZW50U3RlcCIsIk1hdGgiLCJtaW4iLCJzdGFydCIsIl91cGRhdGUiLCJfcmVmcmVzaCIsIkRhdGUiLCJub3ciLCJydW5uaW5nIiwiaXRlbXMiLCJsZW5ndGgiLCJyIiwibCIsIl9hY3RpdmUiLCJfdG90YWwiLCJ0aWNrIiwicG9wIiwiZHJhdyIsIl9ub3RpZnkiLCJnZXQiLCJjb21wbGV0ZSIsInByb2dyZXNzIiwic2V0IiwiX2dldEFuaW1zIiwicHVzaCIsInJlZHVjZSIsIm1heCIsIl9kdXJhdGlvbiIsImNhbmNlbCIsIkEiLCJCIiwiQyIsIkQiLCJFIiwiRiIsImIiLCJjIiwiZCIsImYiLCJoIiwidSIsImciLCJwIiwibSIsIngiLCJfIiwieSIsInYiLCJ3IiwiTSIsImsiLCJTIiwiaXNBcnJheSIsIm1hcCIsIlAiLCJleGVjIiwiTyIsIloiLCJZIiwiWCIsIlciLCJWIiwiVSIsIlQiLCJSIiwiUSIsIk4iLCJMIiwiSyIsIkciLCJIIiwiSSIsIkoiLCJPaWNlWGUiLCJhbnRpcXVld0V0ZSIsImFxdWEiLCJhcXVhbWFyUmUiLCJhenVZIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5LZWRPbW9uZCIsIlhlIiwiWGV2aVRldCIsImJQd24iLCJidXJseXdvb2QiLCJjYU10WGUiLCJLYXJ0WXVzZSIsIktvY1RhdGUiLCJjU08iLCJjU25mbG93ZXJYZSIsImNTbnNpbGsiLCJjcmltc29uIiwiY3lhbiIsInhYZSIsInhjeWFuIiwieGdUTW5QZCIsInhXYXkiLCJ4Z1lGIiwieGdZeSIsInhraGFraSIsInhtYWdGdGEiLCJ4VGl2ZWdZRiIsInhTYW5nZSIsInhTY0VkIiwieFlkIiwieHNPbW9uIiwieHNIZ1lGIiwieFVYZSIsInhVV2F5IiwieFVnWXkiLCJ4UWUiLCJ4dmlUZXQiLCJkQXBwUmsiLCJkQXBza3lYZSIsImRpbVdheSIsImRpbWdZeSIsImRvZGdlclhlIiwiZmlZYnJpY2siLCJmbFNPd0V0ZSIsImZvWXN0V0FuIiwiZnVLc2lhIiwiZ2FSc2JTbyIsImdob3N0d0V0ZSIsImdUZCIsImdUTW5QZCIsIldheSIsImdZRiIsImdZRkx3IiwiZ1l5IiwiaG9uZXlNdyIsImhvdHBSayIsIlJkaWFuWWQiLCJSZGlnbyIsIml2U3kiLCJraGFraSIsImxhdkZNciIsImxhdkZNclhzaCIsImxhd25nWUYiLCJObW9uY0VmZm9uIiwiWlhlIiwiWmNTTyIsIlpjeWFuIiwiWmdUTW5QZEx3IiwiWldheSIsIlpnWUYiLCJaZ1l5IiwiWnBSayIsIlpzT21vbiIsIlpzSGdZRiIsIlpza3lYZSIsIlpVV2F5IiwiWlVnWXkiLCJac3RBbFhlIiwiWkx3IiwibGltZSIsImxpbWVnWUYiLCJsUkYiLCJtYWdGdGEiLCJtYVBvbiIsIlZhcXVhbWFyUmUiLCJWWGUiLCJWU2NFZCIsIlZwdXJwTiIsIlZzSGdZRiIsIlZVWGUiLCJWc3ByUmdnWUYiLCJWUWUiLCJWdmlUZXRZZCIsIm1pZG5pZ2h0WGUiLCJtUnRjWWFtIiwibWlzdHlQc2UiLCJtb2NjYXNSIiwibmF2YWpvd0V0ZSIsIm5hdnkiLCJUZGxhY2UiLCJUaXZlIiwiVGl2ZWRCYiIsIlNhbmdlIiwiU2FuZ2VZZCIsIlNjRWQiLCJwT2VnVE1uUGQiLCJwT2VnWUYiLCJwT2VRZSIsInBPZXZpVGV0WWQiLCJwYXBheWF3RXAiLCJwSEtwdWZmIiwicGVydSIsInBSayIsInBsdW0iLCJwb3dNclhlIiwicHVycE4iLCJZYmVjY2FwdXJwTiIsIllkIiwiUHN5YnJvd24iLCJQeU9YZSIsInNhZGROYlB3biIsInNPbW9uIiwic2FuZHliUHduIiwic0hnWUYiLCJzSHNoZWxsIiwic2lGbmEiLCJzaWx2ZXIiLCJza3lYZSIsIlVYZSIsIlVXYXkiLCJVZ1l5Iiwic25vdyIsInNwclJnZ1lGIiwic3RBbFhlIiwidGFuIiwidGVPIiwidEVzdE4iLCJ0b21hdG8iLCJRZSIsInZpVGV0IiwiSkh0Iiwid0V0ZSIsIndFdGVzbW9rZSIsIkx3IiwiTHdnWUYiLCJPYmplY3QiLCJrZXlzIiwicmVwbGFjZSIsInBhcnNlSW50IiwidHJhbnNwYXJlbnQiLCJ0b0xvd2VyQ2FzZSIsImFzc2lnbiIsInoiLCJjaGFyQXQiLCJfcmdiIiwiX3ZhbGlkIiwicmdiIiwiQ2FudmFzR3JhZGllbnQiLCJDYW52YXNQYXR0ZXJuIiwic2F0dXJhdGUiLCJkYXJrZW4iLCJoZXhTdHJpbmciLCJqIiwiJCIsInRvU3RyaW5nIiwic3Vic3RyIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJxIiwiZW5kc1dpdGgiLCJwYXJzZUZsb2F0IiwidHQiLCJkYXRhc2V0SW5kZXgiLCJpbmRleCIsImV0IiwiY3JlYXRlIiwiaXQiLCJpbmRleE9mIiwibnQiLCJvdCIsIm1lcmdlciIsInN0IiwiYXQiLCJoYXNPd25Qcm9wZXJ0eSIsInJ0IiwibHQiLCJjdCIsInRvVXBwZXJDYXNlIiwiaHQiLCJkdCIsInV0Iiwic2l6ZSIsImhhcyIsImZ0IiwiZ3QiLCJwdCIsInNwbGl0IiwibXQiLCJ4dCIsImFuaW1hdGlvbiIsImJhY2tncm91bmRDb2xvciIsImJvcmRlckNvbG9yIiwiY29sb3IiLCJkYXRhc2V0cyIsImRldmljZVBpeGVsUmF0aW8iLCJwbGF0Zm9ybSIsImdldERldmljZVBpeGVsUmF0aW8iLCJlbGVtZW50cyIsImV2ZW50cyIsImZvbnQiLCJmYW1pbHkiLCJzdHlsZSIsImxpbmVIZWlnaHQiLCJ3ZWlnaHQiLCJob3ZlciIsImhvdmVyQmFja2dyb3VuZENvbG9yIiwiaG92ZXJCb3JkZXJDb2xvciIsImhvdmVyQ29sb3IiLCJpbmRleEF4aXMiLCJpbnRlcmFjdGlvbiIsIm1vZGUiLCJpbnRlcnNlY3QiLCJtYWludGFpbkFzcGVjdFJhdGlvIiwib25Ib3ZlciIsIm9uQ2xpY2siLCJwYXJzaW5nIiwicGx1Z2lucyIsInJlc3BvbnNpdmUiLCJzY2FsZSIsInNjYWxlcyIsInNob3dMaW5lIiwiZGVzY3JpYmUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidmFsdWUiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiLCJfc2NyaXB0YWJsZSIsInN0YXJ0c1dpdGgiLCJfaW5kZXhhYmxlIiwiX2ZhbGxiYWNrIiwiYnQiLCJQSSIsIl90IiwieXQiLCJ2dCIsIlBPU0lUSVZFX0lORklOSVRZIiwid3QiLCJNdCIsImt0IiwiU3QiLCJQdCIsImxvZzEwIiwiRHQiLCJzaWduIiwiQ3QiLCJyb3VuZCIsIkF0IiwicG93IiwiZmxvb3IiLCJPdCIsInNxcnQiLCJzb3J0IiwiVHQiLCJpc05hTiIsImFicyIsIkx0IiwiUnQiLCJFdCIsInp0IiwiSXQiLCJGdCIsImF0YW4yIiwiYW5nbGUiLCJkaXN0YW5jZSIsIkJ0IiwiVnQiLCJXdCIsIk50IiwiSHQiLCJqdCIsIiR0IiwiWXQiLCJtZWFzdXJlVGV4dCIsIndpZHRoIiwiVXQiLCJkYXRhIiwiZ2FyYmFnZUNvbGxlY3QiLCJzYXZlIiwicmVzdG9yZSIsInNwbGljZSIsIlh0IiwiY3VycmVudERldmljZVBpeGVsUmF0aW8iLCJxdCIsImdldENvbnRleHQiLCJyZXNldFRyYW5zZm9ybSIsImNsZWFyUmVjdCIsImhlaWdodCIsIkt0IiwicG9pbnRTdHlsZSIsInJvdGF0aW9uIiwicmFkaXVzIiwidHJhbnNsYXRlIiwicm90YXRlIiwiZHJhd0ltYWdlIiwiYmVnaW5QYXRoIiwiYXJjIiwiY2xvc2VQYXRoIiwibW92ZVRvIiwic2luIiwiY29zIiwibGluZVRvIiwiU1FSVDFfMiIsInJlY3QiLCJmaWxsIiwiYm9yZGVyV2lkdGgiLCJzdHJva2UiLCJHdCIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsIlp0IiwiY2xpcCIsIlF0IiwiSnQiLCJ0ZSIsImJlemllckN1cnZlVG8iLCJjcDF4IiwiY3AyeCIsImNwMXkiLCJjcDJ5IiwiZWUiLCJzdHJva2VXaWR0aCIsInN0cm9rZUNvbG9yIiwic3RyaW5nIiwidHJhbnNsYXRpb24iLCJmaWxsU3R5bGUiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QmFzZWxpbmUiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsInN0cm9rZVRleHQiLCJtYXhXaWR0aCIsImZpbGxUZXh0IiwiaWUiLCJzdHJpa2V0aHJvdWdoIiwidW5kZXJsaW5lIiwiYWN0dWFsQm91bmRpbmdCb3hMZWZ0IiwiYWN0dWFsQm91bmRpbmdCb3hSaWdodCIsImFjdHVhbEJvdW5kaW5nQm94QXNjZW50IiwiYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50IiwiZGVjb3JhdGlvbldpZHRoIiwibmUiLCJ0b3BMZWZ0IiwiYm90dG9tTGVmdCIsImJvdHRvbVJpZ2h0IiwidG9wUmlnaHQiLCJvZSIsImxvIiwiaGkiLCJzZSIsImFlIiwicmUiLCJsZSIsImNlIiwiX2NoYXJ0anMiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImhlIiwiZGUiLCJTZXQiLCJhZGQiLCJmcm9tIiwidWUiLCJwYXJlbnROb2RlIiwiaG9zdCIsImZlIiwiZ2UiLCJnZXRDb21wdXRlZFN0eWxlIiwicGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwibWUiLCJ4ZSIsImJlIiwiY2FudmFzIiwiYm94U2l6aW5nIiwidG91Y2hlcyIsIm9mZnNldFgiLCJvZmZzZXRZIiwic2hhZG93Um9vdCIsInRhcmdldCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFgiLCJjbGllbnRZIiwiYm94IiwiX2UiLCJ5ZSIsIm1heEhlaWdodCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwidmUiLCJjdHgiLCJzZXRUcmFuc2Zvcm0iLCJ3ZSIsInBhc3NpdmUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIk1lIiwibWF0Y2giLCJrZSIsIlNlIiwiY29udHJvbGxlciIsIl9zb3J0ZWQiLCJfY2FjaGVkTWV0YSIsImlTY2FsZSIsImF4aXMiLCJfcmV2ZXJzZVBpeGVscyIsIl9zaGFyZWRPcHRpb25zIiwiZ2V0UmFuZ2UiLCJQZSIsImdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMiLCJza2lwIiwiRGUiLCJjaGFydEFyZWEiLCJfbWluUGFkZGluZyIsImluUmFuZ2UiLCJlbGVtZW50IiwiQ2UiLCJnZXRDZW50ZXJQb2ludCIsIk9lIiwiVGUiLCJtb2RlcyIsImRhdGFzZXQiLCJnZXREYXRhc2V0TWV0YSIsInBvaW50IiwibmVhcmVzdCIsIkFlIiwiUmVnRXhwIiwiTGUiLCJSZSIsIkVlIiwiemUiLCJJZSIsIkZlIiwiQmUiLCJjb25zb2xlIiwid2FybiIsIlZlIiwiY2FjaGVhYmxlIiwiV2UiLCJOZSIsIkhlIiwiZmlsdGVyIiwicG9zIiwiamUiLCIkZSIsIlllIiwiVWUiLCJtYXhQYWRkaW5nIiwiaG9yaXpvbnRhbCIsImdldFBhZGRpbmciLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJzYW1lIiwib3RoZXIiLCJxZSIsIktlIiwidXBkYXRlIiwiZnVsbFNpemUiLCJHZSIsInBhZGRpbmciLCJaZSIsImFkZEJveCIsImJveGVzIiwicG9zaXRpb24iLCJfbGF5ZXJzIiwicmVtb3ZlQm94IiwiY29uZmlndXJlIiwib3B0aW9ucyIsImxheW91dCIsImlzSG9yaXpvbnRhbCIsImxlZnRBbmRUb3AiLCJjb25jYXQiLCJyaWdodEFuZEJvdHRvbSIsInZlcnRpY2FsIiwiYmVmb3JlTGF5b3V0IiwiZGlzcGxheSIsImZyZWV6ZSIsImF2YWlsYWJsZVdpZHRoIiwiYXZhaWxhYmxlSGVpZ2h0IiwidkJveE1heFdpZHRoIiwiaEJveE1heEhlaWdodCIsIkplIiwidGkiLCJ0b3VjaHN0YXJ0IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVyZG93biIsInBvaW50ZXJtb3ZlIiwicG9pbnRlcnVwIiwicG9pbnRlcmxlYXZlIiwicG9pbnRlcm91dCIsImVpIiwiaWkiLCJuaSIsIm9pIiwiTXV0YXRpb25PYnNlcnZlciIsImFkZGVkTm9kZXMiLCJvYnNlcnZlIiwiZG9jdW1lbnQiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwic2kiLCJyZW1vdmVkTm9kZXMiLCJhaSIsInJpIiwibGkiLCJjaSIsIlJlc2l6ZU9ic2VydmVyIiwiY29udGVudFJlY3QiLCJkaXNjb25uZWN0IiwiZGkiLCJ0eXBlIiwidWkiLCJnZXRBdHRyaWJ1dGUiLCIkY2hhcnRqcyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIiRwcm94aWVzIiwiYXR0YWNoIiwiZGV0YWNoIiwicmVzaXplIiwiZmkiLCJfX3Byb3RvX18iLCJCYXNlUGxhdGZvcm0iLCJCYXNpY1BsYXRmb3JtIiwiRG9tUGxhdGZvcm0iLCJnaSIsInBpIiwibWkiLCJ4aSIsImxpbmVhciIsImVhc2VJblF1YWQiLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlYXNlSW5PdXRRdWFydCIsImVhc2VJblF1aW50IiwiZWFzZU91dFF1aW50IiwiZWFzZUluT3V0UXVpbnQiLCJlYXNlSW5TaW5lIiwiZWFzZU91dFNpbmUiLCJlYXNlSW5PdXRTaW5lIiwiZWFzZUluRXhwbyIsImVhc2VPdXRFeHBvIiwiZWFzZUluT3V0RXhwbyIsImVhc2VJbkNpcmMiLCJlYXNlT3V0Q2lyYyIsImVhc2VJbk91dENpcmMiLCJlYXNlSW5FbGFzdGljIiwiZWFzZU91dEVsYXN0aWMiLCJlYXNlSW5PdXRFbGFzdGljIiwiZWFzZUluQmFjayIsImVhc2VPdXRCYWNrIiwiZWFzZUluT3V0QmFjayIsImVhc2VJbkJvdW5jZSIsImVhc2VPdXRCb3VuY2UiLCJlYXNlSW5PdXRCb3VuY2UiLCJiaSIsIl9pIiwidmFsaWQiLCJtaXgiLCJudW1iZXIiLCJ5aSIsInRvIiwiX2ZuIiwiZm4iLCJfZWFzaW5nIiwiZWFzaW5nIiwiX3N0YXJ0IiwiZGVsYXkiLCJfbG9vcCIsImxvb3AiLCJfdGFyZ2V0IiwiX3Byb3AiLCJfZnJvbSIsIl90byIsIl9wcm9taXNlcyIsIlByb21pc2UiLCJyZXMiLCJyZWoiLCJ2aSIsImNvbG9ycyIsInByb3BlcnRpZXMiLCJudW1iZXJzIiwiYWN0aXZlIiwic2hvdyIsImFuaW1hdGlvbnMiLCJ2aXNpYmxlIiwiaGlkZSIsIndpIiwiX2NoYXJ0IiwiX3Byb3BlcnRpZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJHNoYXJlZCIsIiRhbmltYXRpb25zIiwiX2NyZWF0ZUFuaW1hdGlvbnMiLCJ3YWl0IiwiYWxsIiwidGhlbiIsIl9hbmltYXRlT3B0aW9ucyIsIk1pIiwicmV2ZXJzZSIsImVuZCIsImtpIiwiX2dldFNvcnRlZERhdGFzZXRNZXRhcyIsIlNpIiwidmFsdWVzIiwiUGkiLCJzdGFja2VkIiwic3RhY2siLCJEaSIsIkNpIiwiZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMiLCJPaSIsIl9zdGFja3MiLCJ2U2NhbGUiLCJpZCIsIl90b3AiLCJfYm90dG9tIiwiVGkiLCJzaGlmdCIsIkFpIiwiX3BhcnNlZCIsIkxpIiwiUmkiLCJFaSIsIl9jdHgiLCJfY2FjaGVkRGF0YU9wdHMiLCJnZXRNZXRhIiwiX3R5cGUiLCJfcGFyc2luZyIsIl9kYXRhIiwiX29iamVjdERhdGEiLCJfZHJhd1N0YXJ0IiwiX2RyYXdDb3VudCIsImVuYWJsZU9wdGlvblNoYXJpbmciLCIkY29udGV4dCIsIl9zeW5jTGlzdCIsImluaXRpYWxpemUiLCJsaW5rU2NhbGVzIiwiX3N0YWNrZWQiLCJhZGRFbGVtZW50cyIsImdldERhdGFzZXQiLCJ4QXhpc0lEIiwieUF4aXNJRCIsInJBeGlzSUQiLCJpQXhpc0lEIiwidkF4aXNJRCIsInhTY2FsZSIsImdldFNjYWxlRm9ySWQiLCJ5U2NhbGUiLCJyU2NhbGUiLCJpc0V4dGVuc2libGUiLCJfZGF0YUNoZWNrIiwiZGF0YXNldEVsZW1lbnRUeXBlIiwiX3Jlc3luY0VsZW1lbnRzIiwiY29uZmlnIiwiZGF0YXNldFNjb3BlS2V5cyIsImdldE9wdGlvblNjb3BlcyIsImNyZWF0ZVJlc29sdmVyIiwicGFyc2VBcnJheURhdGEiLCJwYXJzZU9iamVjdERhdGEiLCJwYXJzZVByaW1pdGl2ZURhdGEiLCJnZXRMYWJlbHMiLCJwYXJzZSIsInhBeGlzS2V5IiwieUF4aXNLZXkiLCJOYU4iLCJfZ2V0T3RoZXJTY2FsZSIsIk5FR0FUSVZFX0lORklOSVRZIiwiZ2V0VXNlckJvdW5kcyIsIm1pbkRlZmluZWQiLCJtYXhEZWZpbmVkIiwidXBkYXRlUmFuZ2VGcm9tUGFyc2VkIiwiZ2V0UGFyc2VkIiwibGFiZWwiLCJnZXRMYWJlbEZvclZhbHVlIiwiX2NsaXAiLCJkaXNhYmxlZCIsImdldE1heE92ZXJmbG93IiwicmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyIsInJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMiLCJkYXRhSW5kZXgiLCJwYXJzZWQiLCJyYXciLCJfcmVzb2x2ZUVsZW1lbnRPcHRpb25zIiwiZGF0YUVsZW1lbnRUeXBlIiwiZGF0YXNldEVsZW1lbnRTY29wZUtleXMiLCJyZXNvbHZlTmFtZWRPcHRpb25zIiwiZGF0YXNldEFuaW1hdGlvblNjb3BlS2V5cyIsIl9jYWNoZWFibGUiLCJfYW5pbWF0aW9uc0Rpc2FibGVkIiwiX3Jlc29sdmVBbmltYXRpb25zIiwiZ2V0U3R5bGUiLCJnZXRTaGFyZWRPcHRpb25zIiwiX3NldFN0eWxlIiwiX2luc2VydEVsZW1lbnRzIiwiX3JlbW92ZUVsZW1lbnRzIiwidXBkYXRlRWxlbWVudHMiLCJhcmd1bWVudHMiLCJkZWZhdWx0cyIsInppIiwiZ2V0UHJvcHMiLCJkZWZhdWx0Um91dGVzIiwiSWkiLCJGaSIsIkpTT04iLCJzdHJpbmdpZnkiLCJJbnRsIiwiTnVtYmVyRm9ybWF0IiwiZm9ybWF0IiwiQmkiLCJudW1lcmljIiwibG9jYWxlIiwibm90YXRpb24iLCJtaW5pbXVtRnJhY3Rpb25EaWdpdHMiLCJtYXhpbXVtRnJhY3Rpb25EaWdpdHMiLCJ0aWNrcyIsImxvZ2FyaXRobWljIiwiVmkiLCJmb3JtYXR0ZXJzIiwiV2kiLCJtYXhUaWNrc0xpbWl0Iiwib2Zmc2V0IiwiX3RpY2tTaXplIiwiX2xlbmd0aCIsIl9tYXhMZW5ndGgiLCJtYWpvciIsImVuYWJsZWQiLCJjZWlsIiwiTmkiLCJiZWdpbkF0WmVybyIsImJvdW5kcyIsImdyYWNlIiwiZ3JpZCIsImRyYXdCb3JkZXIiLCJkcmF3T25DaGFydEFyZWEiLCJkcmF3VGlja3MiLCJ0aWNrTGVuZ3RoIiwidGlja1dpZHRoIiwidGlja0NvbG9yIiwiYm9yZGVyRGFzaCIsImJvcmRlckRhc2hPZmZzZXQiLCJ0aXRsZSIsInRleHQiLCJtaW5Sb3RhdGlvbiIsIm1heFJvdGF0aW9uIiwibWlycm9yIiwidGV4dFN0cm9rZVdpZHRoIiwidGV4dFN0cm9rZUNvbG9yIiwiYXV0b1NraXAiLCJhdXRvU2tpcFBhZGRpbmciLCJsYWJlbE9mZnNldCIsImNhbGxiYWNrIiwibWlub3IiLCJhbGlnbiIsImNyb3NzQWxpZ24iLCJzaG93TGFiZWxCYWNrZHJvcCIsImJhY2tkcm9wQ29sb3IiLCJiYWNrZHJvcFBhZGRpbmciLCJyb3V0ZSIsIkhpIiwiamkiLCIkaSIsIl9zdGFydFBpeGVsIiwiX2VuZFBpeGVsIiwiZ2V0UGl4ZWxGb3JUaWNrIiwiWWkiLCJVaSIsIlhpIiwicWkiLCJfbWFyZ2lucyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJsYWJlbFJvdGF0aW9uIiwiX3JhbmdlIiwiX2dyaWRMaW5lSXRlbXMiLCJfbGFiZWxJdGVtcyIsIl9sYWJlbFNpemVzIiwiX2xvbmdlc3RUZXh0Q2FjaGUiLCJfdXNlck1heCIsIl91c2VyTWluIiwiX3N1Z2dlc3RlZE1heCIsIl9zdWdnZXN0ZWRNaW4iLCJfdGlja3NMZW5ndGgiLCJfYm9yZGVyVmFsdWUiLCJfY2FjaGUiLCJfZGF0YUxpbWl0c0NhY2hlZCIsInNldENvbnRleHQiLCJzdWdnZXN0ZWRNaW4iLCJzdWdnZXN0ZWRNYXgiLCJnZXRNaW5NYXgiLCJsYWJlbHMiLCJ4TGFiZWxzIiwieUxhYmVscyIsImJlZm9yZVVwZGF0ZSIsInNhbXBsZVNpemUiLCJiZWZvcmVTZXREaW1lbnNpb25zIiwic2V0RGltZW5zaW9ucyIsImFmdGVyU2V0RGltZW5zaW9ucyIsImJlZm9yZURhdGFMaW1pdHMiLCJkZXRlcm1pbmVEYXRhTGltaXRzIiwiYWZ0ZXJEYXRhTGltaXRzIiwiYmVmb3JlQnVpbGRUaWNrcyIsImJ1aWxkVGlja3MiLCJhZnRlckJ1aWxkVGlja3MiLCJfY29udmVydFRpY2tzVG9MYWJlbHMiLCJiZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwiY2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsInNvdXJjZSIsImJlZm9yZUZpdCIsImZpdCIsImFmdGVyRml0IiwiYWZ0ZXJVcGRhdGUiLCJfYWxpZ25Ub1BpeGVscyIsImFsaWduVG9QaXhlbHMiLCJub3RpZnlQbHVnaW5zIiwiX2NhbGxIb29rcyIsImJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbiIsImFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uIiwiX2lzVmlzaWJsZSIsIl9nZXRMYWJlbFNpemVzIiwid2lkZXN0IiwiaGlnaGVzdCIsImFzaW4iLCJmaXJzdCIsImxhc3QiLCJfY2FsY3VsYXRlUGFkZGluZyIsIl9oYW5kbGVNYXJnaW5zIiwiZ2VuZXJhdGVUaWNrTGFiZWxzIiwiX2NvbXB1dGVMYWJlbFNpemVzIiwiX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMiLCJnYyIsIndpZHRocyIsImhlaWdodHMiLCJnZXRQaXhlbEZvclZhbHVlIiwiZ2V0QmFzZVZhbHVlIiwidGlja0JvcmRlckRhc2giLCJ0aWNrQm9yZGVyRGFzaE9mZnNldCIsInR4MSIsInR5MSIsInR4MiIsInR5MiIsIngxIiwieTEiLCJ4MiIsInkyIiwiX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQiLCJfZ2V0WUF4aXNMYWJlbEFsaWdubWVudCIsInRleHRPZmZzZXQiLCJiYWNrZHJvcCIsImZpbGxSZWN0IiwiZmluZEluZGV4IiwiX2NvbXB1dGVHcmlkTGluZUl0ZW1zIiwic2V0TGluZURhc2giLCJsaW5lRGFzaE9mZnNldCIsIl9jb21wdXRlTGFiZWxBcmVhIiwiX2NvbXB1dGVMYWJlbEl0ZW1zIiwidGl0bGVYIiwidGl0bGVZIiwiZHJhd0JhY2tncm91bmQiLCJkcmF3R3JpZCIsImRyYXdUaXRsZSIsImRyYXdMYWJlbHMiLCJLaSIsInJuIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJQcm94eSIsImRlbGV0ZVByb3BlcnR5IiwiX2tleXMiLCJ0biIsIlFpIiwiSmkiLCJzbiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJfc2NvcGVzIiwiZ2V0UHJvdG90eXBlT2YiLCJsbiIsImluY2x1ZGVzIiwib3duS2V5cyIsIl9zdG9yYWdlIiwiR2kiLCJfcHJveHkiLCJfY29udGV4dCIsIl9zdWJQcm94eSIsIl9zdGFjayIsIl9kZXNjcmlwdG9ycyIsIlppIiwib3ZlcnJpZGUiLCJpc1NjcmlwdGFibGUiLCJFcnJvciIsImpvaW4iLCJpc0luZGV4YWJsZSIsImFsbEtleXMiLCJzY3JpcHRhYmxlIiwiaW5kZXhhYmxlIiwiX2FsbEtleXMiLCJlbiIsIm5uIiwib24iLCJfcm9vdFNjb3BlcyIsImFuIiwiX2dldFRhcmdldCIsImNuIiwiRVBTSUxPTiIsImhuIiwiZG4iLCJ1biIsInByZXZpb3VzIiwibmV4dCIsImduIiwicG4iLCJzcGFuR2FwcyIsImN1YmljSW50ZXJwb2xhdGlvbk1vZGUiLCJ0ZW5zaW9uIiwiY2FwQmV6aWVyUG9pbnRzIiwibW4iLCJ4biIsImJuIiwiX24iLCJzZXRXaWR0aCIsInhQbHVzIiwibGVmdEZvckx0ciIsInluIiwiZ2V0UHJvcGVydHlQcmlvcml0eSIsInNldFByb3BlcnR5IiwicHJldlRleHREaXJlY3Rpb24iLCJ2biIsInduIiwiYmV0d2VlbiIsImNvbXBhcmUiLCJub3JtYWxpemUiLCJNbiIsImNvdW50Iiwia24iLCJwcm9wZXJ0eSIsIlNuIiwic2VnbWVudHMiLCJwb2ludHMiLCJQbiIsIkRuIiwic3RvcCIsIl9mdWxsTG9vcCIsIkNuIiwicDAiLCJwMSIsIk9uIiwiYm9yZGVyQ2FwU3R5bGUiLCJib3JkZXJKb2luU3R5bGUiLCJUbiIsImVhc2luZ0VmZmVjdHMiLCJnZXRIb3ZlckNvbG9yIiwibm9vcCIsInVpZCIsImlzTnVsbE9yVW5kZWYiLCJpc09iamVjdCIsImZpbml0ZU9yRGVmYXVsdCIsInZhbHVlT3JEZWZhdWx0IiwidG9QZXJjZW50YWdlIiwidG9EaW1lbnNpb24iLCJlYWNoIiwiX2VsZW1lbnRzRXF1YWwiLCJjbG9uZSIsIl9tZXJnZXIiLCJtZXJnZSIsIm1lcmdlSWYiLCJfbWVyZ2VySWYiLCJfZGVwcmVjYXRlZCIsInJlc29sdmVPYmplY3RLZXkiLCJfY2FwaXRhbGl6ZSIsImRlZmluZWQiLCJpc0Z1bmN0aW9uIiwic2V0c0VxdWFsIiwidG9Gb250U3RyaW5nIiwiX21lYXN1cmVUZXh0IiwiX2xvbmdlc3RUZXh0IiwiX2FsaWduUGl4ZWwiLCJjbGVhckNhbnZhcyIsImRyYXdQb2ludCIsIl9pc1BvaW50SW5BcmVhIiwiY2xpcEFyZWEiLCJ1bmNsaXBBcmVhIiwiX3N0ZXBwZWRMaW5lVG8iLCJfYmV6aWVyQ3VydmVUbyIsInJlbmRlclRleHQiLCJhZGRSb3VuZGVkUmVjdFBhdGgiLCJfbG9va3VwIiwiX2xvb2t1cEJ5S2V5IiwiX3Jsb29rdXBCeUtleSIsIl9maWx0ZXJCZXR3ZWVuIiwibGlzdGVuQXJyYXlFdmVudHMiLCJ1bmxpc3RlbkFycmF5RXZlbnRzIiwiX2FycmF5VW5pcXVlIiwiX2NyZWF0ZVJlc29sdmVyIiwiX2F0dGFjaENvbnRleHQiLCJzcGxpbmVDdXJ2ZSIsInNwbGluZUN1cnZlTW9ub3RvbmUiLCJfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyIsIl9nZXRQYXJlbnROb2RlIiwiZ2V0UmVsYXRpdmVQb3NpdGlvbiIsImdldE1heGltdW1TaXplIiwicmV0aW5hU2NhbGUiLCJzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zIiwicmVhZFVzZWRTaXplIiwiZm9udFN0cmluZyIsInJlcXVlc3RBbmltRnJhbWUiLCJ0aHJvdHRsZWQiLCJkZWJvdW5jZSIsIl90b0xlZnRSaWdodENlbnRlciIsIl9hbGlnblN0YXJ0RW5kIiwiX3RleHRYIiwiX3BvaW50SW5MaW5lIiwiX3N0ZXBwZWRJbnRlcnBvbGF0aW9uIiwiX2JlemllckludGVycG9sYXRpb24iLCJmb3JtYXROdW1iZXIiLCJ0b0xpbmVIZWlnaHQiLCJfcmVhZFZhbHVlVG9Qcm9wcyIsInRvVFJCTCIsInRvVFJCTENvcm5lcnMiLCJ0b1BhZGRpbmciLCJ0b0ZvbnQiLCJyZXNvbHZlIiwiX2FkZEdyYWNlIiwiVEFVIiwiUElUQVUiLCJJTkZJTklUWSIsIlJBRF9QRVJfREVHIiwiSEFMRl9QSSIsIlFVQVJURVJfUEkiLCJUV09fVEhJUkRTX1BJIiwibmljZU51bSIsIl9mYWN0b3JpemUiLCJpc051bWJlciIsImFsbW9zdEVxdWFscyIsImFsbW9zdFdob2xlIiwiX3NldE1pbkFuZE1heEJ5S2V5IiwidG9SYWRpYW5zIiwidG9EZWdyZWVzIiwiX2RlY2ltYWxQbGFjZXMiLCJnZXRBbmdsZUZyb21Qb2ludCIsImRpc3RhbmNlQmV0d2VlblBvaW50cyIsIl9hbmdsZURpZmYiLCJfbm9ybWFsaXplQW5nbGUiLCJfYW5nbGVCZXR3ZWVuIiwiX2xpbWl0VmFsdWUiLCJfaW50MTZSYW5nZSIsImdldFJ0bEFkYXB0ZXIiLCJvdmVycmlkZVRleHREaXJlY3Rpb24iLCJyZXN0b3JlVGV4dERpcmVjdGlvbiIsIl9ib3VuZFNlZ21lbnQiLCJfYm91bmRTZWdtZW50cyIsIl9jb21wdXRlU2VnbWVudHMiLCJBbiIsInNjb3BlIiwiaXNQcm90b3R5cGVPZiIsInJlZ2lzdGVyIiwiZGVzY3JpcHRvcnMiLCJvdmVycmlkZXMiLCJMbiIsImNvbnRyb2xsZXJzIiwiX3R5cGVkUmVnaXN0cmllcyIsIl9lYWNoIiwiX2dldCIsIl9nZXRSZWdpc3RyeUZvclR5cGUiLCJpc0ZvclR5cGUiLCJfZXhlYyIsIlJuIiwiX2luaXQiLCJfY3JlYXRlRGVzY3JpcHRvcnMiLCJwbHVnaW4iLCJjYW5jZWxhYmxlIiwiX29sZENhY2hlIiwiX25vdGlmeVN0YXRlQ2hhbmdlcyIsImdldFBsdWdpbiIsIkVuIiwiem4iLCJzb21lIiwicGx1Z2luU2NvcGVLZXlzIiwiSW4iLCJGbiIsIkJuIiwiVm4iLCJXbiIsIk5uIiwiSG4iLCJqbiIsIiRuIiwiX2NvbmZpZyIsIl9zY29wZUNhY2hlIiwiX3Jlc29sdmVyQ2FjaGUiLCJjbGVhckNhY2hlIiwiY2xlYXIiLCJhZGRpdGlvbmFsT3B0aW9uU2NvcGVzIiwiX2NhY2hlZFNjb3BlcyIsIlluIiwicmVzb2x2ZXIiLCJzdWJQcmVmaXhlcyIsIlVuIiwiWG4iLCJxbiIsIktuIiwib25Db21wbGV0ZSIsIkduIiwib25Qcm9ncmVzcyIsIlpuIiwiUW4iLCJnZXRFbGVtZW50QnlJZCIsIkpuIiwiZW8iLCJjaGFydE9wdGlvblNjb3BlcyIsIl9pbml0aWFsaXplUGxhdGZvcm0iLCJhY3F1aXJlQ29udGV4dCIsImFzcGVjdFJhdGlvIiwiX29wdGlvbnMiLCJfYXNwZWN0UmF0aW8iLCJfbWV0YXNldHMiLCJfbGFzdEV2ZW50IiwiX2xpc3RlbmVycyIsIl9yZXNwb25zaXZlTGlzdGVuZXJzIiwiX3NvcnRlZE1ldGFzZXRzIiwiX3BsdWdpbnMiLCJfaGlkZGVuSW5kaWNlcyIsImF0dGFjaGVkIiwiX2RvUmVzaXplIiwicmVzaXplRGVsYXkiLCJsaXN0ZW4iLCJfaW5pdGlhbGl6ZSIsImVycm9yIiwiYmluZEV2ZW50cyIsIk9mZnNjcmVlbkNhbnZhcyIsIl9yZXNpemVCZWZvcmVEcmF3IiwiX3Jlc2l6ZSIsIm9uUmVzaXplIiwicmVuZGVyIiwiZHBvc2l0aW9uIiwiZHR5cGUiLCJnZXRTY2FsZSIsImluaXQiLCJfZGVzdHJveURhdGFzZXRNZXRhIiwiX2RhdGFzZXQiLCJfcmVtb3ZlVW5yZWZlcmVuY2VkTWV0YXNldHMiLCJvcmRlciIsImlzRGF0YXNldFZpc2libGUiLCJ1cGRhdGVJbmRleCIsImdldENvbnRyb2xsZXIiLCJnZXRFbGVtZW50IiwiX3VwZGF0ZU1ldGFzZXRzIiwicmVzZXQiLCJfcmVzZXRFbGVtZW50cyIsImVuc3VyZVNjYWxlc0hhdmVJRHMiLCJidWlsZE9yVXBkYXRlU2NhbGVzIiwidW5iaW5kRXZlbnRzIiwiaW52YWxpZGF0ZSIsImJ1aWxkT3JVcGRhdGVDb250cm9sbGVycyIsImJ1aWxkT3JVcGRhdGVFbGVtZW50cyIsIl91cGRhdGVMYXlvdXQiLCJfdXBkYXRlRGF0YXNldHMiLCJfZXZlbnRIYW5kbGVyIiwiX2lkeCIsIl91cGRhdGVEYXRhc2V0IiwibWV0YSIsIl9kcmF3RGF0YXNldHMiLCJfZHJhd0RhdGFzZXQiLCJoaWRkZW4iLCJzZXREYXRhc2V0VmlzaWJpbGl0eSIsIl91cGRhdGVEYXRhc2V0VmlzaWJpbGl0eSIsIl9kZXN0cm95IiwicmVtb3ZlIiwicmVsZWFzZUNvbnRleHQiLCJ0b0RhdGFVUkwiLCJiaW5kVXNlckV2ZW50cyIsImJpbmRSZXNwb25zaXZlRXZlbnRzIiwiaXNBdHRhY2hlZCIsIl91cGRhdGVIb3ZlclN0eWxlcyIsIm5vdGlmeSIsInVwZGF0ZUhvdmVyU3R5bGUiLCJldmVudCIsInJlcGxheSIsIl9oYW5kbGVFdmVudCIsImNoYW5nZWQiLCJnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlIiwiaW8iLCJpbnN0YW5jZXMiLCJubyIsIm9vIiwicmVnaXN0cnkiLCJ2ZXJzaW9uIiwiZ2V0Q2hhcnQiLCJ1bnJlZ2lzdGVyIiwic28iLCJhbyIsIl9kYXRlIiwicm8iLCIkYmFyIiwiZ2V0QWxsUGFyc2VkVmFsdWVzIiwiX2N1c3RvbSIsImJhclN0YXJ0IiwiYmFyRW5kIiwiY28iLCJobyIsInVvIiwiZ2V0QmFzZVBpeGVsIiwiX2dldFJ1bGVyIiwiaW5jbHVkZU9wdGlvbnMiLCJ1cGRhdGVTaGFyZWRPcHRpb25zIiwiYmFzZSIsImhlYWQiLCJfY2FsY3VsYXRlQmFyVmFsdWVQaXhlbHMiLCJfY2FsY3VsYXRlQmFySW5kZXhQaXhlbHMiLCJlbmFibGVCb3JkZXJSYWRpdXMiLCJjZW50ZXIiLCJ1cGRhdGVFbGVtZW50IiwiZ3JvdXBlZCIsIl9nZXRTdGFja3MiLCJiYXJUaGlja25lc3MiLCJwaXhlbHMiLCJzdGFja0NvdW50IiwiX2dldFN0YWNrQ291bnQiLCJyYXRpbyIsImNhdGVnb3J5UGVyY2VudGFnZSIsImJhclBlcmNlbnRhZ2UiLCJtaW5CYXJMZW5ndGgiLCJhcHBseVN0YWNrIiwiZ2V0RGF0YVZpc2liaWxpdHkiLCJnZXRMaW5lV2lkdGhGb3JWYWx1ZSIsInNraXBOdWxsIiwibWF4QmFyVGhpY2tuZXNzIiwiY2h1bmsiLCJfZ2V0U3RhY2tJbmRleCIsIl9pbmRleF8iLCJfdmFsdWVfIiwiZm8iLCJnZXRQaXhlbEZvckRlY2ltYWwiLCJ0b29sdGlwIiwiY2FsbGJhY2tzIiwiZ28iLCJpbm5lclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiY2lyY3VtZmVyZW5jZSIsIl9nZXRSb3RhdGlvbiIsIl9nZXRDaXJjdW1mZXJlbmNlIiwiZ2V0TWF4Qm9yZGVyV2lkdGgiLCJnZXRNYXhPZmZzZXQiLCJzcGFjaW5nIiwiY3V0b3V0IiwiX2dldFJpbmdXZWlnaHQiLCJfZ2V0Um90YXRpb25FeHRlbnRzIiwicmF0aW9YIiwicmF0aW9ZIiwiX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwiLCJ0b3RhbCIsImNhbGN1bGF0ZVRvdGFsIiwiX2dldFJpbmdXZWlnaHRPZmZzZXQiLCJhbmltYXRlUm90YXRlIiwiY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSIsImFuaW1hdGVTY2FsZSIsIl9jaXJjdW1mZXJlbmNlIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwiYm9yZGVyQWxpZ24iLCJob3ZlckJvcmRlcldpZHRoIiwiaG92ZXJPZmZzZXQiLCJsZWdlbmQiLCJnZW5lcmF0ZUxhYmVscyIsInRvZ2dsZURhdGFWaXNpYmlsaXR5IiwiZm9ybWF0dGVkVmFsdWUiLCJwbyIsIl9zY2FsZVJhbmdlcyIsInhtaW4iLCJ4bWF4IiwieW1pbiIsInltYXgiLCJfZGVjaW1hdGVkIiwic2VnbWVudCIsImFuaW1hdGVkIiwidXBkYXRlQ29udHJvbFBvaW50cyIsIm1vIiwiX3VwZGF0ZVJhZGl1cyIsImN1dG91dFBlcmNlbnRhZ2UiLCJnZXRWaXNpYmxlRGF0YXNldENvdW50IiwieENlbnRlciIsInlDZW50ZXIiLCJnZXRJbmRleEFuZ2xlIiwiY291bnRWaXNpYmxlRWxlbWVudHMiLCJfY29tcHV0ZUFuZ2xlIiwiZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUiLCJhbmdsZUxpbmVzIiwiY2lyY3VsYXIiLCJwb2ludExhYmVscyIsInhvIiwiYm8iLCJnZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUiLCJsaW5lIiwiX28iLCJ5byIsIkJhckNvbnRyb2xsZXIiLCJCdWJibGVDb250cm9sbGVyIiwiRG91Z2hudXRDb250cm9sbGVyIiwiTGluZUNvbnRyb2xsZXIiLCJQb2xhckFyZWFDb250cm9sbGVyIiwiUGllQ29udHJvbGxlciIsIlJhZGFyQ29udHJvbGxlciIsIlNjYXR0ZXJDb250cm9sbGVyIiwidm8iLCJwaXhlbE1hcmdpbiIsIndvIiwiYm9yZGVyUmFkaXVzIiwib3V0ZXJTdGFydCIsIm91dGVyRW5kIiwiaW5uZXJTdGFydCIsImlubmVyRW5kIiwiTW8iLCJrbyIsIlNvIiwibGluZUpvaW4iLCJmdWxsQ2lyY2xlcyIsIlBvIiwiRG8iLCJsaW5lQ2FwIiwiQ28iLCJPbyIsImlsZW4iLCJUbyIsInN0ZXBwZWQiLCJtb3ZlIiwiQW8iLCJMbyIsIlJvIiwiUGF0aDJEIiwiRW8iLCJfcGF0aCIsInBhdGgiLCJ6byIsIl9wb2ludHMiLCJfc2VnbWVudHMiLCJfcG9pbnRzVXBkYXRlZCIsIklvIiwiaGl0UmFkaXVzIiwiRm8iLCJob3ZlclJhZGl1cyIsIkJvIiwiVm8iLCJib3JkZXJTa2lwcGVkIiwiV28iLCJObyIsIkhvIiwiam8iLCJvdXRlciIsImlubmVyIiwiJG8iLCJZbyIsIlVvIiwiWG8iLCJBcmNFbGVtZW50IiwiTGluZUVsZW1lbnQiLCJQb2ludEVsZW1lbnQiLCJCYXJFbGVtZW50IiwicW8iLCJLbyIsIkdvIiwiYWxnb3JpdGhtIiwiYmVmb3JlRWxlbWVudHNVcGRhdGUiLCJzYW1wbGVzIiwiZGVzdHJveSIsIlpvIiwiUW8iLCJKbyIsInRzIiwiZXMiLCJpcyIsInVuc2hpZnQiLCJzcyIsIm5zIiwib3MiLCJpbnRlcnBvbGF0ZSIsImFzIiwicnMiLCJscyIsImNzIiwiaHMiLCJkcyIsInVzIiwicGF0aFNlZ21lbnQiLCJmcyIsImFib3ZlIiwiYmVsb3ciLCJhcmVhIiwiZ3MiLCJhZnRlckRhdGFzZXRzVXBkYXRlIiwiJGZpbGxlciIsInByb3BhZ2F0ZSIsImJlZm9yZURyYXciLCJkcmF3VGltZSIsImJlZm9yZURhdGFzZXRzRHJhdyIsImJlZm9yZURhdGFzZXREcmF3IiwicHMiLCJib3hIZWlnaHQiLCJib3hXaWR0aCIsInVzZVBvaW50U3R5bGUiLCJpdGVtSGVpZ2h0IiwibXMiLCJfYWRkZWQiLCJsZWdlbmRIaXRCb3hlcyIsIl9ob3ZlcmVkSXRlbSIsImRvdWdobnV0TW9kZSIsImxlZ2VuZEl0ZW1zIiwiY29sdW1uU2l6ZXMiLCJsaW5lV2lkdGhzIiwiYnVpbGRMYWJlbHMiLCJfY29tcHV0ZVRpdGxlSGVpZ2h0IiwiX2ZpdFJvd3MiLCJfZml0Q29scyIsInJvdyIsImNvbCIsInJ0bCIsIl9kcmF3IiwidGV4dERpcmVjdGlvbiIsImZvbnRDb2xvciIsImxpbmVEYXNoIiwiU1FSVDIiLCJvbkxlYXZlIiwiX2dldExlZ2VuZEl0ZW1BdCIsInhzIiwiX2VsZW1lbnQiLCJhZGp1c3RIaXRCb3hlcyIsImFmdGVyRXZlbnQiLCJoYW5kbGVFdmVudCIsImJzIiwiX3BhZGRpbmciLCJfZHJhd0FyZ3MiLCJfcyIsInRpdGxlQmxvY2siLCJ5cyIsIldlYWtNYXAiLCJ2cyIsIndzIiwiYXZlcmFnZSIsImhhc1ZhbHVlIiwidG9vbHRpcFBvc2l0aW9uIiwiTXMiLCJrcyIsIlN0cmluZyIsIlNzIiwiZ2V0TGFiZWxBbmRWYWx1ZSIsIlBzIiwiYm9keSIsImZvb3RlciIsImJvZHlGb250IiwidGl0bGVGb250IiwiZm9vdGVyRm9udCIsImJlZm9yZSIsImxpbmVzIiwiYWZ0ZXIiLCJiZWZvcmVCb2R5IiwiYWZ0ZXJCb2R5IiwidGl0bGVTcGFjaW5nIiwidGl0bGVNYXJnaW5Cb3R0b20iLCJkaXNwbGF5Q29sb3JzIiwiYm9keVNwYWNpbmciLCJmb290ZXJNYXJnaW5Ub3AiLCJmb290ZXJTcGFjaW5nIiwiRHMiLCJjYXJldFNpemUiLCJjYXJldFBhZGRpbmciLCJDcyIsInlBbGlnbiIsInhBbGlnbiIsIk9zIiwiY29ybmVyUmFkaXVzIiwiVHMiLCJBcyIsIkxzIiwiUnMiLCJvcGFjaXR5IiwiX2V2ZW50UG9zaXRpb24iLCJfc2l6ZSIsIl9jYWNoZWRBbmltYXRpb25zIiwiX3Rvb2x0aXBJdGVtcyIsImRhdGFQb2ludHMiLCJjYXJldFgiLCJjYXJldFkiLCJsYWJlbENvbG9ycyIsImxhYmVsUG9pbnRTdHlsZXMiLCJsYWJlbFRleHRDb2xvcnMiLCJ0b29sdGlwSXRlbXMiLCJiZWZvcmVUaXRsZSIsImFmdGVyVGl0bGUiLCJiZWZvcmVMYWJlbCIsImFmdGVyTGFiZWwiLCJiZWZvcmVGb290ZXIiLCJhZnRlckZvb3RlciIsIml0ZW1Tb3J0IiwibGFiZWxDb2xvciIsImxhYmVsUG9pbnRTdHlsZSIsImxhYmVsVGV4dENvbG9yIiwiX2NyZWF0ZUl0ZW1zIiwiZ2V0VGl0bGUiLCJnZXRCZWZvcmVCb2R5IiwiZ2V0Qm9keSIsImdldEFmdGVyQm9keSIsImdldEZvb3RlciIsImV4dGVybmFsIiwiZ2V0Q2FyZXRQb3NpdGlvbiIsIngzIiwieTMiLCJ0aXRsZUFsaWduIiwidGl0bGVDb2xvciIsIm11bHRpS2V5QmFja2dyb3VuZCIsInN0cm9rZVJlY3QiLCJib2R5QWxpZ24iLCJib2R5Q29sb3IiLCJfZHJhd0NvbG9yQm94IiwiZm9vdGVyQWxpZ24iLCJmb290ZXJDb2xvciIsImRyYXdDYXJldCIsInF1YWRyYXRpY0N1cnZlVG8iLCJfdXBkYXRlQW5pbWF0aW9uVGFyZ2V0IiwiZ2xvYmFsQWxwaGEiLCJkcmF3Qm9keSIsImRyYXdGb290ZXIiLCJfcG9zaXRpb25DaGFuZ2VkIiwicG9zaXRpb25lcnMiLCJFcyIsImFmdGVySW5pdCIsImFmdGVyRHJhdyIsInpzIiwiRGVjaW1hdGlvbiIsIkZpbGxlciIsIkxlZ2VuZCIsIlN1YlRpdGxlIiwiVGl0bGUiLCJUb29sdGlwIiwiSXMiLCJsYXN0SW5kZXhPZiIsIkZzIiwiX3N0YXJ0VmFsdWUiLCJfdmFsdWVSYW5nZSIsImdldERlY2ltYWxGb3JQaXhlbCIsIkJzIiwiVnMiLCJfZW5kVmFsdWUiLCJzdGVwU2l6ZSIsImNvbXB1dGVUaWNrTGltaXQiLCJnZXRUaWNrTGltaXQiLCJzdGVwIiwicHJlY2lzaW9uIiwibWF4VGlja3MiLCJtYXhEaWdpdHMiLCJpbmNsdWRlQm91bmRzIiwiX21heERpZ2l0cyIsIldzIiwiaGFuZGxlVGlja1JhbmdlT3B0aW9ucyIsIk5zIiwiSHMiLCJfemVybyIsImpzIiwiJHMiLCJZcyIsImdldFBvaW50UG9zaXRpb24iLCJkcmF3aW5nQXJlYSIsIl9wb2ludExhYmVscyIsIl9zZXRSZWR1Y3Rpb25zIiwiX3BvaW50TGFiZWxJdGVtcyIsInFzIiwiVXMiLCJYcyIsIktzIiwiR3MiLCJacyIsInNldENlbnRlclBvaW50IiwiYW5pbWF0ZSIsIlFzIiwibWlsbGlzZWNvbmQiLCJjb21tb24iLCJzdGVwcyIsInNlY29uZCIsIm1pbnV0ZSIsImhvdXIiLCJkYXkiLCJ3ZWVrIiwibW9udGgiLCJxdWFydGVyIiwieWVhciIsIkpzIiwidGEiLCJlYSIsIl9hZGFwdGVyIiwiX3BhcnNlT3B0cyIsInBhcnNlciIsImlzb1dlZWtkYXkiLCJzdGFydE9mIiwiaWEiLCJNQVhfU0FGRV9JTlRFR0VSIiwibmEiLCJvYSIsInNhIiwiX3VuaXQiLCJfbWFqb3JVbml0IiwiX29mZnNldHMiLCJfbm9ybWFsaXplZCIsInRpbWUiLCJhZGFwdGVycyIsImRhdGUiLCJkaXNwbGF5Rm9ybWF0cyIsImZvcm1hdHMiLCJub3JtYWxpemVkIiwidW5pdCIsIl9nZXRMYWJlbEJvdW5kcyIsImVuZE9mIiwiZ2V0TGFiZWxUaW1lc3RhbXBzIiwiX2dlbmVyYXRlIiwibWluVW5pdCIsIl9nZXRMYWJlbENhcGFjaXR5IiwiZGlmZiIsImluaXRPZmZzZXRzIiwiZ2V0RGVjaW1hbEZvclZhbHVlIiwiZmFjdG9yIiwiZ2V0RGF0YVRpbWVzdGFtcHMiLCJ0b29sdGlwRm9ybWF0IiwiZGF0ZXRpbWUiLCJfdGlja0Zvcm1hdEZ1bmN0aW9uIiwiX2dldExhYmVsU2l6ZSIsImFhIiwicmEiLCJfdGFibGUiLCJfbWluUG9zIiwiX3RhYmxlUmFuZ2UiLCJfZ2V0VGltZXN0YW1wc0ZvclRhYmxlIiwiYnVpbGRMb29rdXBUYWJsZSIsImxhIiwiQ2F0ZWdvcnlTY2FsZSIsIkxpbmVhclNjYWxlIiwiTG9nYXJpdGhtaWNTY2FsZSIsIlJhZGlhbExpbmVhclNjYWxlIiwiVGltZVNjYWxlIiwiVGltZVNlcmllc1NjYWxlIiwiaGVscGVycyIsIl9hZGFwdGVycyIsIkFuaW1hdGlvbiIsIkFuaW1hdGlvbnMiLCJhbmltYXRvciIsIkRhdGFzZXRDb250cm9sbGVyIiwiRWxlbWVudCIsIkludGVyYWN0aW9uIiwibGF5b3V0cyIsInBsYXRmb3JtcyIsIlNjYWxlIiwiVGlja3MiLCJDaGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxVQUFTQSxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLG9DQUFpQkMsT0FBakIsTUFBMEIsZUFBYSxRQUF2QyxHQUFxREMsTUFBTSxDQUFDRCxPQUFQLEdBQWVELENBQUMsRUFBckUsR0FBd0Us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QUNNLE1BQVAsQ0FBY2s5QixFQUFkLEVBQWlCMEwsRUFBakIsRUFBb0IrVSxFQUFwQixFQUF1QnJSLEVBQXZCLEVBQTBCNkssRUFBMUIsRUFBNkJyL0IsRUFBN0IsQ0FBNVEsRUFBNlNvbEIsRUFBRSxDQUFDNGhCLEtBQUgsR0FBUzVoQixFQUF0VCxFQUF5VCxlQUFhLE9BQU85c0MsTUFBcEIsS0FBNkJBLE1BQU0sQ0FBQzB1RCxLQUFQLEdBQWE1aEIsRUFBMUMsQ0FBelQsRUFBdVdBLEVBQTlXO0FBQWlYLENBTjdsbUwsQ0FBRCIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9jaGFydC5taW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENoYXJ0LmpzIHYzLjQuMVxuICogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmdcbiAqIChjKSAyMDIxIENoYXJ0LmpzIENvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOih0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6dHx8c2VsZikuQ2hhcnQ9ZSgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2NvbnN0IHQ9XCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvdz9mdW5jdGlvbih0KXtyZXR1cm4gdCgpfTp3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lO2Z1bmN0aW9uIGUoZSxpLG4pe2NvbnN0IG89bnx8KHQ9PkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHQpKTtsZXQgcz0hMSxhPVtdO3JldHVybiBmdW5jdGlvbiguLi5uKXthPW8obiksc3x8KHM9ITAsdC5jYWxsKHdpbmRvdywoKCk9PntzPSExLGUuYXBwbHkoaSxhKX0pKSl9fWZ1bmN0aW9uIGkodCxlKXtsZXQgaTtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZT8oY2xlYXJUaW1lb3V0KGkpLGk9c2V0VGltZW91dCh0LGUpKTp0KCksZX19Y29uc3Qgbj10PT5cInN0YXJ0XCI9PT10P1wibGVmdFwiOlwiZW5kXCI9PT10P1wicmlnaHRcIjpcImNlbnRlclwiLG89KHQsZSxpKT0+XCJzdGFydFwiPT09dD9lOlwiZW5kXCI9PT10P2k6KGUraSkvMixzPSh0LGUsaSxuKT0+dD09PShuP1wibGVmdFwiOlwicmlnaHRcIik/aTpcImNlbnRlclwiPT09dD8oZStpKS8yOmU7dmFyIGE9bmV3IGNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5fcmVxdWVzdD1udWxsLHRoaXMuX2NoYXJ0cz1uZXcgTWFwLHRoaXMuX3J1bm5pbmc9ITEsdGhpcy5fbGFzdERhdGU9dm9pZCAwfV9ub3RpZnkodCxlLGksbil7Y29uc3Qgbz1lLmxpc3RlbmVyc1tuXSxzPWUuZHVyYXRpb247by5mb3JFYWNoKChuPT5uKHtjaGFydDp0LGluaXRpYWw6ZS5pbml0aWFsLG51bVN0ZXBzOnMsY3VycmVudFN0ZXA6TWF0aC5taW4oaS1lLnN0YXJ0LHMpfSkpKX1fcmVmcmVzaCgpe2NvbnN0IGU9dGhpcztlLl9yZXF1ZXN0fHwoZS5fcnVubmluZz0hMCxlLl9yZXF1ZXN0PXQuY2FsbCh3aW5kb3csKCgpPT57ZS5fdXBkYXRlKCksZS5fcmVxdWVzdD1udWxsLGUuX3J1bm5pbmcmJmUuX3JlZnJlc2goKX0pKSl9X3VwZGF0ZSh0PURhdGUubm93KCkpe2NvbnN0IGU9dGhpcztsZXQgaT0wO2UuX2NoYXJ0cy5mb3JFYWNoKCgobixvKT0+e2lmKCFuLnJ1bm5pbmd8fCFuLml0ZW1zLmxlbmd0aClyZXR1cm47Y29uc3Qgcz1uLml0ZW1zO2xldCBhLHI9cy5sZW5ndGgtMSxsPSExO2Zvcig7cj49MDstLXIpYT1zW3JdLGEuX2FjdGl2ZT8oYS5fdG90YWw+bi5kdXJhdGlvbiYmKG4uZHVyYXRpb249YS5fdG90YWwpLGEudGljayh0KSxsPSEwKTooc1tyXT1zW3MubGVuZ3RoLTFdLHMucG9wKCkpO2wmJihvLmRyYXcoKSxlLl9ub3RpZnkobyxuLHQsXCJwcm9ncmVzc1wiKSkscy5sZW5ndGh8fChuLnJ1bm5pbmc9ITEsZS5fbm90aWZ5KG8sbix0LFwiY29tcGxldGVcIiksbi5pbml0aWFsPSExKSxpKz1zLmxlbmd0aH0pKSxlLl9sYXN0RGF0ZT10LDA9PT1pJiYoZS5fcnVubmluZz0hMSl9X2dldEFuaW1zKHQpe2NvbnN0IGU9dGhpcy5fY2hhcnRzO2xldCBpPWUuZ2V0KHQpO3JldHVybiBpfHwoaT17cnVubmluZzohMSxpbml0aWFsOiEwLGl0ZW1zOltdLGxpc3RlbmVyczp7Y29tcGxldGU6W10scHJvZ3Jlc3M6W119fSxlLnNldCh0LGkpKSxpfWxpc3Rlbih0LGUsaSl7dGhpcy5fZ2V0QW5pbXModCkubGlzdGVuZXJzW2VdLnB1c2goaSl9YWRkKHQsZSl7ZSYmZS5sZW5ndGgmJnRoaXMuX2dldEFuaW1zKHQpLml0ZW1zLnB1c2goLi4uZSl9aGFzKHQpe3JldHVybiB0aGlzLl9nZXRBbmltcyh0KS5pdGVtcy5sZW5ndGg+MH1zdGFydCh0KXtjb25zdCBlPXRoaXMuX2NoYXJ0cy5nZXQodCk7ZSYmKGUucnVubmluZz0hMCxlLnN0YXJ0PURhdGUubm93KCksZS5kdXJhdGlvbj1lLml0ZW1zLnJlZHVjZSgoKHQsZSk9Pk1hdGgubWF4KHQsZS5fZHVyYXRpb24pKSwwKSx0aGlzLl9yZWZyZXNoKCkpfXJ1bm5pbmcodCl7aWYoIXRoaXMuX3J1bm5pbmcpcmV0dXJuITE7Y29uc3QgZT10aGlzLl9jaGFydHMuZ2V0KHQpO3JldHVybiEhKGUmJmUucnVubmluZyYmZS5pdGVtcy5sZW5ndGgpfXN0b3AodCl7Y29uc3QgZT10aGlzLl9jaGFydHMuZ2V0KHQpO2lmKCFlfHwhZS5pdGVtcy5sZW5ndGgpcmV0dXJuO2NvbnN0IGk9ZS5pdGVtcztsZXQgbj1pLmxlbmd0aC0xO2Zvcig7bj49MDstLW4paVtuXS5jYW5jZWwoKTtlLml0ZW1zPVtdLHRoaXMuX25vdGlmeSh0LGUsRGF0ZS5ub3coKSxcImNvbXBsZXRlXCIpfXJlbW92ZSh0KXtyZXR1cm4gdGhpcy5fY2hhcnRzLmRlbGV0ZSh0KX19O1xuLyohXG4gKiBAa3Vya2xlL2NvbG9yIHYwLjEuOVxuICogaHR0cHM6Ly9naXRodWIuY29tL2t1cmtsZS9jb2xvciNyZWFkbWVcbiAqIChjKSAyMDIwIEp1a2thIEt1cmtlbGFcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICovY29uc3Qgcj17MDowLDE6MSwyOjIsMzozLDQ6NCw1OjUsNjo2LDc6Nyw4OjgsOTo5LEE6MTAsQjoxMSxDOjEyLEQ6MTMsRToxNCxGOjE1LGE6MTAsYjoxMSxjOjEyLGQ6MTMsZToxNCxmOjE1fSxsPVwiMDEyMzQ1Njc4OUFCQ0RFRlwiLGM9dD0+bFsxNSZ0XSxoPXQ9PmxbKDI0MCZ0KT4+NF0rbFsxNSZ0XSxkPXQ9PigyNDAmdCk+PjQ9PSgxNSZ0KTtmdW5jdGlvbiB1KHQpe3ZhciBlPWZ1bmN0aW9uKHQpe3JldHVybiBkKHQucikmJmQodC5nKSYmZCh0LmIpJiZkKHQuYSl9KHQpP2M6aDtyZXR1cm4gdD9cIiNcIitlKHQucikrZSh0LmcpK2UodC5iKSsodC5hPDI1NT9lKHQuYSk6XCJcIik6dH1mdW5jdGlvbiBmKHQpe3JldHVybiB0Ky41fDB9Y29uc3QgZz0odCxlLGkpPT5NYXRoLm1heChNYXRoLm1pbih0LGkpLGUpO2Z1bmN0aW9uIHAodCl7cmV0dXJuIGcoZigyLjU1KnQpLDAsMjU1KX1mdW5jdGlvbiBtKHQpe3JldHVybiBnKGYoMjU1KnQpLDAsMjU1KX1mdW5jdGlvbiB4KHQpe3JldHVybiBnKGYodC8yLjU1KS8xMDAsMCwxKX1mdW5jdGlvbiBiKHQpe3JldHVybiBnKGYoMTAwKnQpLDAsMTAwKX1jb25zdCBfPS9ecmdiYT9cXChcXHMqKFstKy5cXGRdKykoJSk/W1xccyxdKyhbLSsuZVxcZF0rKSglKT9bXFxzLF0rKFstKy5lXFxkXSspKCUpPyg/OltcXHMsL10rKFstKy5lXFxkXSspKCUpPyk/XFxzKlxcKSQvO2NvbnN0IHk9L14oaHNsYT98aHdifGhzdilcXChcXHMqKFstKy5lXFxkXSspKD86ZGVnKT9bXFxzLF0rKFstKy5lXFxkXSspJVtcXHMsXSsoWy0rLmVcXGRdKyklKD86W1xccyxdKyhbLSsuZVxcZF0rKSglKT8pP1xccypcXCkkLztmdW5jdGlvbiB2KHQsZSxpKXtjb25zdCBuPWUqTWF0aC5taW4oaSwxLWkpLG89KGUsbz0oZSt0LzMwKSUxMik9PmktbipNYXRoLm1heChNYXRoLm1pbihvLTMsOS1vLDEpLC0xKTtyZXR1cm5bbygwKSxvKDgpLG8oNCldfWZ1bmN0aW9uIHcodCxlLGkpe2NvbnN0IG49KG4sbz0obit0LzYwKSU2KT0+aS1pKmUqTWF0aC5tYXgoTWF0aC5taW4obyw0LW8sMSksMCk7cmV0dXJuW24oNSksbigzKSxuKDEpXX1mdW5jdGlvbiBNKHQsZSxpKXtjb25zdCBuPXYodCwxLC41KTtsZXQgbztmb3IoZStpPjEmJihvPTEvKGUraSksZSo9byxpKj1vKSxvPTA7bzwzO28rKyluW29dKj0xLWUtaSxuW29dKz1lO3JldHVybiBufWZ1bmN0aW9uIGsodCl7Y29uc3QgZT10LnIvMjU1LGk9dC5nLzI1NSxuPXQuYi8yNTUsbz1NYXRoLm1heChlLGksbikscz1NYXRoLm1pbihlLGksbiksYT0obytzKS8yO2xldCByLGwsYztyZXR1cm4gbyE9PXMmJihjPW8tcyxsPWE+LjU/Yy8oMi1vLXMpOmMvKG8rcykscj1vPT09ZT8oaS1uKS9jKyhpPG4/NjowKTpvPT09aT8obi1lKS9jKzI6KGUtaSkvYys0LHI9NjAqcisuNSksWzB8cixsfHwwLGFdfWZ1bmN0aW9uIFModCxlLGksbil7cmV0dXJuKEFycmF5LmlzQXJyYXkoZSk/dChlWzBdLGVbMV0sZVsyXSk6dChlLGksbikpLm1hcChtKX1mdW5jdGlvbiBQKHQsZSxpKXtyZXR1cm4gUyh2LHQsZSxpKX1mdW5jdGlvbiBEKHQpe3JldHVybih0JTM2MCszNjApJTM2MH1mdW5jdGlvbiBDKHQpe2NvbnN0IGU9eS5leGVjKHQpO2xldCBpLG49MjU1O2lmKCFlKXJldHVybjtlWzVdIT09aSYmKG49ZVs2XT9wKCtlWzVdKTptKCtlWzVdKSk7Y29uc3Qgbz1EKCtlWzJdKSxzPStlWzNdLzEwMCxhPStlWzRdLzEwMDtyZXR1cm4gaT1cImh3YlwiPT09ZVsxXT9mdW5jdGlvbih0LGUsaSl7cmV0dXJuIFMoTSx0LGUsaSl9KG8scyxhKTpcImhzdlwiPT09ZVsxXT9mdW5jdGlvbih0LGUsaSl7cmV0dXJuIFModyx0LGUsaSl9KG8scyxhKTpQKG8scyxhKSx7cjppWzBdLGc6aVsxXSxiOmlbMl0sYTpufX1jb25zdCBPPXt4OlwiZGFya1wiLFo6XCJsaWdodFwiLFk6XCJyZVwiLFg6XCJibHVcIixXOlwiZ3JcIixWOlwibWVkaXVtXCIsVTpcInNsYXRlXCIsQTpcImVlXCIsVDpcIm9sXCIsUzpcIm9yXCIsQjpcInJhXCIsQzpcImxhdGVnXCIsRDpcImlnaHRzXCIsUjpcImluXCIsUTpcInR1cnF1b2lzXCIsRTpcImhpXCIsUDpcInJvXCIsTzpcImFsXCIsTjpcImxlXCIsTTpcImRlXCIsTDpcInllbGxvXCIsRjpcImVuXCIsSzpcImNoXCIsRzpcImFya3NcIixIOlwiZWFcIixJOlwiaWdodGdcIixKOlwid2hcIn0sVD17T2ljZVhlOlwiZjBmOGZmXCIsYW50aXF1ZXdFdGU6XCJmYWViZDdcIixhcXVhOlwiZmZmZlwiLGFxdWFtYXJSZTpcIjdmZmZkNFwiLGF6dVk6XCJmMGZmZmZcIixiZWlnZTpcImY1ZjVkY1wiLGJpc3F1ZTpcImZmZTRjNFwiLGJsYWNrOlwiMFwiLGJsYW5LZWRPbW9uZDpcImZmZWJjZFwiLFhlOlwiZmZcIixYZXZpVGV0OlwiOGEyYmUyXCIsYlB3bjpcImE1MmEyYVwiLGJ1cmx5d29vZDpcImRlYjg4N1wiLGNhTXRYZTpcIjVmOWVhMFwiLEthcnRZdXNlOlwiN2ZmZjAwXCIsS29jVGF0ZTpcImQyNjkxZVwiLGNTTzpcImZmN2Y1MFwiLGNTbmZsb3dlclhlOlwiNjQ5NWVkXCIsY1Nuc2lsazpcImZmZjhkY1wiLGNyaW1zb246XCJkYzE0M2NcIixjeWFuOlwiZmZmZlwiLHhYZTpcIjhiXCIseGN5YW46XCI4YjhiXCIseGdUTW5QZDpcImI4ODYwYlwiLHhXYXk6XCJhOWE5YTlcIix4Z1lGOlwiNjQwMFwiLHhnWXk6XCJhOWE5YTlcIix4a2hha2k6XCJiZGI3NmJcIix4bWFnRnRhOlwiOGIwMDhiXCIseFRpdmVnWUY6XCI1NTZiMmZcIix4U2FuZ2U6XCJmZjhjMDBcIix4U2NFZDpcIjk5MzJjY1wiLHhZZDpcIjhiMDAwMFwiLHhzT21vbjpcImU5OTY3YVwiLHhzSGdZRjpcIjhmYmM4ZlwiLHhVWGU6XCI0ODNkOGJcIix4VVdheTpcIjJmNGY0ZlwiLHhVZ1l5OlwiMmY0ZjRmXCIseFFlOlwiY2VkMVwiLHh2aVRldDpcIjk0MDBkM1wiLGRBcHBSazpcImZmMTQ5M1wiLGRBcHNreVhlOlwiYmZmZlwiLGRpbVdheTpcIjY5Njk2OVwiLGRpbWdZeTpcIjY5Njk2OVwiLGRvZGdlclhlOlwiMWU5MGZmXCIsZmlZYnJpY2s6XCJiMjIyMjJcIixmbFNPd0V0ZTpcImZmZmFmMFwiLGZvWXN0V0FuOlwiMjI4YjIyXCIsZnVLc2lhOlwiZmYwMGZmXCIsZ2FSc2JTbzpcImRjZGNkY1wiLGdob3N0d0V0ZTpcImY4ZjhmZlwiLGdUZDpcImZmZDcwMFwiLGdUTW5QZDpcImRhYTUyMFwiLFdheTpcIjgwODA4MFwiLGdZRjpcIjgwMDBcIixnWUZMdzpcImFkZmYyZlwiLGdZeTpcIjgwODA4MFwiLGhvbmV5TXc6XCJmMGZmZjBcIixob3RwUms6XCJmZjY5YjRcIixSZGlhbllkOlwiY2Q1YzVjXCIsUmRpZ286XCI0YjAwODJcIixpdlN5OlwiZmZmZmYwXCIsa2hha2k6XCJmMGU2OGNcIixsYXZGTXI6XCJlNmU2ZmFcIixsYXZGTXJYc2g6XCJmZmYwZjVcIixsYXduZ1lGOlwiN2NmYzAwXCIsTm1vbmNFZmZvbjpcImZmZmFjZFwiLFpYZTpcImFkZDhlNlwiLFpjU086XCJmMDgwODBcIixaY3lhbjpcImUwZmZmZlwiLFpnVE1uUGRMdzpcImZhZmFkMlwiLFpXYXk6XCJkM2QzZDNcIixaZ1lGOlwiOTBlZTkwXCIsWmdZeTpcImQzZDNkM1wiLFpwUms6XCJmZmI2YzFcIixac09tb246XCJmZmEwN2FcIixac0hnWUY6XCIyMGIyYWFcIixac2t5WGU6XCI4N2NlZmFcIixaVVdheTpcIjc3ODg5OVwiLFpVZ1l5OlwiNzc4ODk5XCIsWnN0QWxYZTpcImIwYzRkZVwiLFpMdzpcImZmZmZlMFwiLGxpbWU6XCJmZjAwXCIsbGltZWdZRjpcIjMyY2QzMlwiLGxSRjpcImZhZjBlNlwiLG1hZ0Z0YTpcImZmMDBmZlwiLG1hUG9uOlwiODAwMDAwXCIsVmFxdWFtYXJSZTpcIjY2Y2RhYVwiLFZYZTpcImNkXCIsVlNjRWQ6XCJiYTU1ZDNcIixWcHVycE46XCI5MzcwZGJcIixWc0hnWUY6XCIzY2IzNzFcIixWVVhlOlwiN2I2OGVlXCIsVnNwclJnZ1lGOlwiZmE5YVwiLFZRZTpcIjQ4ZDFjY1wiLFZ2aVRldFlkOlwiYzcxNTg1XCIsbWlkbmlnaHRYZTpcIjE5MTk3MFwiLG1SdGNZYW06XCJmNWZmZmFcIixtaXN0eVBzZTpcImZmZTRlMVwiLG1vY2Nhc1I6XCJmZmU0YjVcIixuYXZham93RXRlOlwiZmZkZWFkXCIsbmF2eTpcIjgwXCIsVGRsYWNlOlwiZmRmNWU2XCIsVGl2ZTpcIjgwODAwMFwiLFRpdmVkQmI6XCI2YjhlMjNcIixTYW5nZTpcImZmYTUwMFwiLFNhbmdlWWQ6XCJmZjQ1MDBcIixTY0VkOlwiZGE3MGQ2XCIscE9lZ1RNblBkOlwiZWVlOGFhXCIscE9lZ1lGOlwiOThmYjk4XCIscE9lUWU6XCJhZmVlZWVcIixwT2V2aVRldFlkOlwiZGI3MDkzXCIscGFwYXlhd0VwOlwiZmZlZmQ1XCIscEhLcHVmZjpcImZmZGFiOVwiLHBlcnU6XCJjZDg1M2ZcIixwUms6XCJmZmMwY2JcIixwbHVtOlwiZGRhMGRkXCIscG93TXJYZTpcImIwZTBlNlwiLHB1cnBOOlwiODAwMDgwXCIsWWJlY2NhcHVycE46XCI2NjMzOTlcIixZZDpcImZmMDAwMFwiLFBzeWJyb3duOlwiYmM4ZjhmXCIsUHlPWGU6XCI0MTY5ZTFcIixzYWRkTmJQd246XCI4YjQ1MTNcIixzT21vbjpcImZhODA3MlwiLHNhbmR5YlB3bjpcImY0YTQ2MFwiLHNIZ1lGOlwiMmU4YjU3XCIsc0hzaGVsbDpcImZmZjVlZVwiLHNpRm5hOlwiYTA1MjJkXCIsc2lsdmVyOlwiYzBjMGMwXCIsc2t5WGU6XCI4N2NlZWJcIixVWGU6XCI2YTVhY2RcIixVV2F5OlwiNzA4MDkwXCIsVWdZeTpcIjcwODA5MFwiLHNub3c6XCJmZmZhZmFcIixzcHJSZ2dZRjpcImZmN2ZcIixzdEFsWGU6XCI0NjgyYjRcIix0YW46XCJkMmI0OGNcIix0ZU86XCI4MDgwXCIsdEVzdE46XCJkOGJmZDhcIix0b21hdG86XCJmZjYzNDdcIixRZTpcIjQwZTBkMFwiLHZpVGV0OlwiZWU4MmVlXCIsSkh0OlwiZjVkZWIzXCIsd0V0ZTpcImZmZmZmZlwiLHdFdGVzbW9rZTpcImY1ZjVmNVwiLEx3OlwiZmZmZjAwXCIsTHdnWUY6XCI5YWNkMzJcIn07bGV0IEE7ZnVuY3Rpb24gTCh0KXtBfHwoQT1mdW5jdGlvbigpe2NvbnN0IHQ9e30sZT1PYmplY3Qua2V5cyhUKSxpPU9iamVjdC5rZXlzKE8pO2xldCBuLG8scyxhLHI7Zm9yKG49MDtuPGUubGVuZ3RoO24rKyl7Zm9yKGE9cj1lW25dLG89MDtvPGkubGVuZ3RoO28rKylzPWlbb10scj1yLnJlcGxhY2UocyxPW3NdKTtzPXBhcnNlSW50KFRbYV0sMTYpLHRbcl09W3M+PjE2JjI1NSxzPj44JjI1NSwyNTUmc119cmV0dXJuIHR9KCksQS50cmFuc3BhcmVudD1bMCwwLDAsMF0pO2NvbnN0IGU9QVt0LnRvTG93ZXJDYXNlKCldO3JldHVybiBlJiZ7cjplWzBdLGc6ZVsxXSxiOmVbMl0sYTo0PT09ZS5sZW5ndGg/ZVszXToyNTV9fWZ1bmN0aW9uIFIodCxlLGkpe2lmKHQpe2xldCBuPWsodCk7bltlXT1NYXRoLm1heCgwLE1hdGgubWluKG5bZV0rbltlXSppLDA9PT1lPzM2MDoxKSksbj1QKG4pLHQucj1uWzBdLHQuZz1uWzFdLHQuYj1uWzJdfX1mdW5jdGlvbiBFKHQsZSl7cmV0dXJuIHQ/T2JqZWN0LmFzc2lnbihlfHx7fSx0KTp0fWZ1bmN0aW9uIHoodCl7dmFyIGU9e3I6MCxnOjAsYjowLGE6MjU1fTtyZXR1cm4gQXJyYXkuaXNBcnJheSh0KT90Lmxlbmd0aD49MyYmKGU9e3I6dFswXSxnOnRbMV0sYjp0WzJdLGE6MjU1fSx0Lmxlbmd0aD4zJiYoZS5hPW0odFszXSkpKTooZT1FKHQse3I6MCxnOjAsYjowLGE6MX0pKS5hPW0oZS5hKSxlfWZ1bmN0aW9uIEkodCl7cmV0dXJuXCJyXCI9PT10LmNoYXJBdCgwKT9mdW5jdGlvbih0KXtjb25zdCBlPV8uZXhlYyh0KTtsZXQgaSxuLG8scz0yNTU7aWYoZSl7aWYoZVs3XSE9PWkpe2NvbnN0IHQ9K2VbN107cz0yNTUmKGVbOF0/cCh0KToyNTUqdCl9cmV0dXJuIGk9K2VbMV0sbj0rZVszXSxvPStlWzVdLGk9MjU1JihlWzJdP3AoaSk6aSksbj0yNTUmKGVbNF0/cChuKTpuKSxvPTI1NSYoZVs2XT9wKG8pOm8pLHtyOmksZzpuLGI6byxhOnN9fX0odCk6Qyh0KX1jbGFzcyBGe2NvbnN0cnVjdG9yKHQpe2lmKHQgaW5zdGFuY2VvZiBGKXJldHVybiB0O2NvbnN0IGU9dHlwZW9mIHQ7bGV0IGk7dmFyIG4sbyxzO1wib2JqZWN0XCI9PT1lP2k9eih0KTpcInN0cmluZ1wiPT09ZSYmKHM9KG49dCkubGVuZ3RoLFwiI1wiPT09blswXSYmKDQ9PT1zfHw1PT09cz9vPXtyOjI1NSYxNypyW25bMV1dLGc6MjU1JjE3KnJbblsyXV0sYjoyNTUmMTcqcltuWzNdXSxhOjU9PT1zPzE3KnJbbls0XV06MjU1fTo3IT09cyYmOSE9PXN8fChvPXtyOnJbblsxXV08PDR8cltuWzJdXSxnOnJbblszXV08PDR8cltuWzRdXSxiOnJbbls1XV08PDR8cltuWzZdXSxhOjk9PT1zP3Jbbls3XV08PDR8cltuWzhdXToyNTV9KSksaT1vfHxMKHQpfHxJKHQpKSx0aGlzLl9yZ2I9aSx0aGlzLl92YWxpZD0hIWl9Z2V0IHZhbGlkKCl7cmV0dXJuIHRoaXMuX3ZhbGlkfWdldCByZ2IoKXt2YXIgdD1FKHRoaXMuX3JnYik7cmV0dXJuIHQmJih0LmE9eCh0LmEpKSx0fXNldCByZ2IodCl7dGhpcy5fcmdiPXoodCl9cmdiU3RyaW5nKCl7cmV0dXJuIHRoaXMuX3ZhbGlkPyh0PXRoaXMuX3JnYikmJih0LmE8MjU1P2ByZ2JhKCR7dC5yfSwgJHt0Lmd9LCAke3QuYn0sICR7eCh0LmEpfSlgOmByZ2IoJHt0LnJ9LCAke3QuZ30sICR7dC5ifSlgKTp0aGlzLl9yZ2I7dmFyIHR9aGV4U3RyaW5nKCl7cmV0dXJuIHRoaXMuX3ZhbGlkP3UodGhpcy5fcmdiKTp0aGlzLl9yZ2J9aHNsU3RyaW5nKCl7cmV0dXJuIHRoaXMuX3ZhbGlkP2Z1bmN0aW9uKHQpe2lmKCF0KXJldHVybjtjb25zdCBlPWsodCksaT1lWzBdLG49YihlWzFdKSxvPWIoZVsyXSk7cmV0dXJuIHQuYTwyNTU/YGhzbGEoJHtpfSwgJHtufSUsICR7b30lLCAke3godC5hKX0pYDpgaHNsKCR7aX0sICR7bn0lLCAke299JSlgfSh0aGlzLl9yZ2IpOnRoaXMuX3JnYn1taXgodCxlKXtjb25zdCBpPXRoaXM7aWYodCl7Y29uc3Qgbj1pLnJnYixvPXQucmdiO2xldCBzO2NvbnN0IGE9ZT09PXM/LjU6ZSxyPTIqYS0xLGw9bi5hLW8uYSxjPSgocipsPT0tMT9yOihyK2wpLygxK3IqbCkpKzEpLzI7cz0xLWMsbi5yPTI1NSZjKm4ucitzKm8ucisuNSxuLmc9MjU1JmMqbi5nK3Mqby5nKy41LG4uYj0yNTUmYypuLmIrcypvLmIrLjUsbi5hPWEqbi5hKygxLWEpKm8uYSxpLnJnYj1ufXJldHVybiBpfWNsb25lKCl7cmV0dXJuIG5ldyBGKHRoaXMucmdiKX1hbHBoYSh0KXtyZXR1cm4gdGhpcy5fcmdiLmE9bSh0KSx0aGlzfWNsZWFyZXIodCl7cmV0dXJuIHRoaXMuX3JnYi5hKj0xLXQsdGhpc31ncmV5c2NhbGUoKXtjb25zdCB0PXRoaXMuX3JnYixlPWYoLjMqdC5yKy41OSp0LmcrLjExKnQuYik7cmV0dXJuIHQucj10Lmc9dC5iPWUsdGhpc31vcGFxdWVyKHQpe3JldHVybiB0aGlzLl9yZ2IuYSo9MSt0LHRoaXN9bmVnYXRlKCl7Y29uc3QgdD10aGlzLl9yZ2I7cmV0dXJuIHQucj0yNTUtdC5yLHQuZz0yNTUtdC5nLHQuYj0yNTUtdC5iLHRoaXN9bGlnaHRlbih0KXtyZXR1cm4gUih0aGlzLl9yZ2IsMix0KSx0aGlzfWRhcmtlbih0KXtyZXR1cm4gUih0aGlzLl9yZ2IsMiwtdCksdGhpc31zYXR1cmF0ZSh0KXtyZXR1cm4gUih0aGlzLl9yZ2IsMSx0KSx0aGlzfWRlc2F0dXJhdGUodCl7cmV0dXJuIFIodGhpcy5fcmdiLDEsLXQpLHRoaXN9cm90YXRlKHQpe3JldHVybiBmdW5jdGlvbih0LGUpe3ZhciBpPWsodCk7aVswXT1EKGlbMF0rZSksaT1QKGkpLHQucj1pWzBdLHQuZz1pWzFdLHQuYj1pWzJdfSh0aGlzLl9yZ2IsdCksdGhpc319ZnVuY3Rpb24gQih0KXtyZXR1cm4gbmV3IEYodCl9Y29uc3QgVj10PT50IGluc3RhbmNlb2YgQ2FudmFzR3JhZGllbnR8fHQgaW5zdGFuY2VvZiBDYW52YXNQYXR0ZXJuO2Z1bmN0aW9uIFcodCl7cmV0dXJuIFYodCk/dDpCKHQpfWZ1bmN0aW9uIE4odCl7cmV0dXJuIFYodCk/dDpCKHQpLnNhdHVyYXRlKC41KS5kYXJrZW4oLjEpLmhleFN0cmluZygpfWZ1bmN0aW9uIEgoKXt9Y29uc3Qgaj1mdW5jdGlvbigpe2xldCB0PTA7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQrK319KCk7ZnVuY3Rpb24gJCh0KXtyZXR1cm4gbnVsbD09dH1mdW5jdGlvbiBZKHQpe2lmKEFycmF5LmlzQXJyYXkmJkFycmF5LmlzQXJyYXkodCkpcmV0dXJuITA7Y29uc3QgZT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCk7cmV0dXJuXCJbb2JqZWN0XCI9PT1lLnN1YnN0cigwLDcpJiZcIkFycmF5XVwiPT09ZS5zdWJzdHIoLTYpfWZ1bmN0aW9uIFUodCl7cmV0dXJuIG51bGwhPT10JiZcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpfWNvbnN0IFg9dD0+KFwibnVtYmVyXCI9PXR5cGVvZiB0fHx0IGluc3RhbmNlb2YgTnVtYmVyKSYmaXNGaW5pdGUoK3QpO2Z1bmN0aW9uIHEodCxlKXtyZXR1cm4gWCh0KT90OmV9ZnVuY3Rpb24gSyh0LGUpe3JldHVybiB2b2lkIDA9PT10P2U6dH1jb25zdCBHPSh0LGUpPT5cInN0cmluZ1wiPT10eXBlb2YgdCYmdC5lbmRzV2l0aChcIiVcIik/cGFyc2VGbG9hdCh0KS8xMDA6dC9lLFo9KHQsZSk9Plwic3RyaW5nXCI9PXR5cGVvZiB0JiZ0LmVuZHNXaXRoKFwiJVwiKT9wYXJzZUZsb2F0KHQpLzEwMCplOit0O2Z1bmN0aW9uIFEodCxlLGkpe2lmKHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuY2FsbClyZXR1cm4gdC5hcHBseShpLGUpfWZ1bmN0aW9uIEoodCxlLGksbil7bGV0IG8scyxhO2lmKFkodCkpaWYocz10Lmxlbmd0aCxuKWZvcihvPXMtMTtvPj0wO28tLSllLmNhbGwoaSx0W29dLG8pO2Vsc2UgZm9yKG89MDtvPHM7bysrKWUuY2FsbChpLHRbb10sbyk7ZWxzZSBpZihVKHQpKWZvcihhPU9iamVjdC5rZXlzKHQpLHM9YS5sZW5ndGgsbz0wO288cztvKyspZS5jYWxsKGksdFthW29dXSxhW29dKX1mdW5jdGlvbiB0dCh0LGUpe2xldCBpLG4sbyxzO2lmKCF0fHwhZXx8dC5sZW5ndGghPT1lLmxlbmd0aClyZXR1cm4hMTtmb3IoaT0wLG49dC5sZW5ndGg7aTxuOysraSlpZihvPXRbaV0scz1lW2ldLG8uZGF0YXNldEluZGV4IT09cy5kYXRhc2V0SW5kZXh8fG8uaW5kZXghPT1zLmluZGV4KXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGV0KHQpe2lmKFkodCkpcmV0dXJuIHQubWFwKGV0KTtpZihVKHQpKXtjb25zdCBlPU9iamVjdC5jcmVhdGUobnVsbCksaT1PYmplY3Qua2V5cyh0KSxuPWkubGVuZ3RoO2xldCBvPTA7Zm9yKDtvPG47KytvKWVbaVtvXV09ZXQodFtpW29dXSk7cmV0dXJuIGV9cmV0dXJuIHR9ZnVuY3Rpb24gaXQodCl7cmV0dXJuLTE9PT1bXCJfX3Byb3RvX19cIixcInByb3RvdHlwZVwiLFwiY29uc3RydWN0b3JcIl0uaW5kZXhPZih0KX1mdW5jdGlvbiBudCh0LGUsaSxuKXtpZighaXQodCkpcmV0dXJuO2NvbnN0IG89ZVt0XSxzPWlbdF07VShvKSYmVShzKT9vdChvLHMsbik6ZVt0XT1ldChzKX1mdW5jdGlvbiBvdCh0LGUsaSl7Y29uc3Qgbj1ZKGUpP2U6W2VdLG89bi5sZW5ndGg7aWYoIVUodCkpcmV0dXJuIHQ7Y29uc3Qgcz0oaT1pfHx7fSkubWVyZ2VyfHxudDtmb3IobGV0IGE9MDthPG87KythKXtpZighVShlPW5bYV0pKWNvbnRpbnVlO2NvbnN0IG89T2JqZWN0LmtleXMoZSk7Zm9yKGxldCBuPTAsYT1vLmxlbmd0aDtuPGE7KytuKXMob1tuXSx0LGUsaSl9cmV0dXJuIHR9ZnVuY3Rpb24gc3QodCxlKXtyZXR1cm4gb3QodCxlLHttZXJnZXI6YXR9KX1mdW5jdGlvbiBhdCh0LGUsaSl7aWYoIWl0KHQpKXJldHVybjtjb25zdCBuPWVbdF0sbz1pW3RdO1UobikmJlUobyk/c3QobixvKTpPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KXx8KGVbdF09ZXQobykpfWZ1bmN0aW9uIHJ0KHQsZSl7Y29uc3QgaT10LmluZGV4T2YoXCIuXCIsZSk7cmV0dXJuLTE9PT1pP3QubGVuZ3RoOml9ZnVuY3Rpb24gbHQodCxlKXtpZihcIlwiPT09ZSlyZXR1cm4gdDtsZXQgaT0wLG49cnQoZSxpKTtmb3IoO3QmJm4+aTspdD10W2Uuc3Vic3RyKGksbi1pKV0saT1uKzEsbj1ydChlLGkpO3JldHVybiB0fWZ1bmN0aW9uIGN0KHQpe3JldHVybiB0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSl9Y29uc3QgaHQ9dD0+dm9pZCAwIT09dCxkdD10PT5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0LHV0PSh0LGUpPT57aWYodC5zaXplIT09ZS5zaXplKXJldHVybiExO2Zvcihjb25zdCBpIG9mIHQpaWYoIWUuaGFzKGkpKXJldHVybiExO3JldHVybiEwfSxmdD1PYmplY3QuY3JlYXRlKG51bGwpLGd0PU9iamVjdC5jcmVhdGUobnVsbCk7ZnVuY3Rpb24gcHQodCxlKXtpZighZSlyZXR1cm4gdDtjb25zdCBpPWUuc3BsaXQoXCIuXCIpO2ZvcihsZXQgZT0wLG49aS5sZW5ndGg7ZTxuOysrZSl7Y29uc3Qgbj1pW2VdO3Q9dFtuXXx8KHRbbl09T2JqZWN0LmNyZWF0ZShudWxsKSl9cmV0dXJuIHR9ZnVuY3Rpb24gbXQodCxlLGkpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP290KHB0KHQsZSksaSk6b3QocHQodCxcIlwiKSxlKX12YXIgeHQ9bmV3IGNsYXNze2NvbnN0cnVjdG9yKHQpe3RoaXMuYW5pbWF0aW9uPXZvaWQgMCx0aGlzLmJhY2tncm91bmRDb2xvcj1cInJnYmEoMCwwLDAsMC4xKVwiLHRoaXMuYm9yZGVyQ29sb3I9XCJyZ2JhKDAsMCwwLDAuMSlcIix0aGlzLmNvbG9yPVwiIzY2NlwiLHRoaXMuZGF0YXNldHM9e30sdGhpcy5kZXZpY2VQaXhlbFJhdGlvPXQ9PnQuY2hhcnQucGxhdGZvcm0uZ2V0RGV2aWNlUGl4ZWxSYXRpbygpLHRoaXMuZWxlbWVudHM9e30sdGhpcy5ldmVudHM9W1wibW91c2Vtb3ZlXCIsXCJtb3VzZW91dFwiLFwiY2xpY2tcIixcInRvdWNoc3RhcnRcIixcInRvdWNobW92ZVwiXSx0aGlzLmZvbnQ9e2ZhbWlseTpcIidIZWx2ZXRpY2EgTmV1ZScsICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCBzYW5zLXNlcmlmXCIsc2l6ZToxMixzdHlsZTpcIm5vcm1hbFwiLGxpbmVIZWlnaHQ6MS4yLHdlaWdodDpudWxsfSx0aGlzLmhvdmVyPXt9LHRoaXMuaG92ZXJCYWNrZ3JvdW5kQ29sb3I9KHQsZSk9Pk4oZS5iYWNrZ3JvdW5kQ29sb3IpLHRoaXMuaG92ZXJCb3JkZXJDb2xvcj0odCxlKT0+TihlLmJvcmRlckNvbG9yKSx0aGlzLmhvdmVyQ29sb3I9KHQsZSk9Pk4oZS5jb2xvciksdGhpcy5pbmRleEF4aXM9XCJ4XCIsdGhpcy5pbnRlcmFjdGlvbj17bW9kZTpcIm5lYXJlc3RcIixpbnRlcnNlY3Q6ITB9LHRoaXMubWFpbnRhaW5Bc3BlY3RSYXRpbz0hMCx0aGlzLm9uSG92ZXI9bnVsbCx0aGlzLm9uQ2xpY2s9bnVsbCx0aGlzLnBhcnNpbmc9ITAsdGhpcy5wbHVnaW5zPXt9LHRoaXMucmVzcG9uc2l2ZT0hMCx0aGlzLnNjYWxlPXZvaWQgMCx0aGlzLnNjYWxlcz17fSx0aGlzLnNob3dMaW5lPSEwLHRoaXMuZGVzY3JpYmUodCl9c2V0KHQsZSl7cmV0dXJuIG10KHRoaXMsdCxlKX1nZXQodCl7cmV0dXJuIHB0KHRoaXMsdCl9ZGVzY3JpYmUodCxlKXtyZXR1cm4gbXQoZ3QsdCxlKX1vdmVycmlkZSh0LGUpe3JldHVybiBtdChmdCx0LGUpfXJvdXRlKHQsZSxpLG4pe2NvbnN0IG89cHQodGhpcyx0KSxzPXB0KHRoaXMsaSksYT1cIl9cIitlO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG8se1thXTp7dmFsdWU6b1tlXSx3cml0YWJsZTohMH0sW2VdOntlbnVtZXJhYmxlOiEwLGdldCgpe2NvbnN0IHQ9dGhpc1thXSxlPXNbbl07cmV0dXJuIFUodCk/T2JqZWN0LmFzc2lnbih7fSxlLHQpOksodCxlKX0sc2V0KHQpe3RoaXNbYV09dH19fSl9fSh7X3NjcmlwdGFibGU6dD0+IXQuc3RhcnRzV2l0aChcIm9uXCIpLF9pbmRleGFibGU6dD0+XCJldmVudHNcIiE9PXQsaG92ZXI6e19mYWxsYmFjazpcImludGVyYWN0aW9uXCJ9LGludGVyYWN0aW9uOntfc2NyaXB0YWJsZTohMSxfaW5kZXhhYmxlOiExfX0pO2NvbnN0IGJ0PU1hdGguUEksX3Q9MipidCx5dD1fdCtidCx2dD1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksd3Q9YnQvMTgwLE10PWJ0LzIsa3Q9YnQvNCxTdD0yKmJ0LzMsUHQ9TWF0aC5sb2cxMCxEdD1NYXRoLnNpZ247ZnVuY3Rpb24gQ3QodCl7Y29uc3QgZT1NYXRoLnJvdW5kKHQpO3Q9QXQodCxlLHQvMWUzKT9lOnQ7Y29uc3QgaT1NYXRoLnBvdygxMCxNYXRoLmZsb29yKFB0KHQpKSksbj10L2k7cmV0dXJuKG48PTE/MTpuPD0yPzI6bjw9NT81OjEwKSppfWZ1bmN0aW9uIE90KHQpe2NvbnN0IGU9W10saT1NYXRoLnNxcnQodCk7bGV0IG47Zm9yKG49MTtuPGk7bisrKXQlbj09MCYmKGUucHVzaChuKSxlLnB1c2godC9uKSk7cmV0dXJuIGk9PT0oMHxpKSYmZS5wdXNoKGkpLGUuc29ydCgoKHQsZSk9PnQtZSkpLnBvcCgpLGV9ZnVuY3Rpb24gVHQodCl7cmV0dXJuIWlzTmFOKHBhcnNlRmxvYXQodCkpJiZpc0Zpbml0ZSh0KX1mdW5jdGlvbiBBdCh0LGUsaSl7cmV0dXJuIE1hdGguYWJzKHQtZSk8aX1mdW5jdGlvbiBMdCh0LGUpe2NvbnN0IGk9TWF0aC5yb3VuZCh0KTtyZXR1cm4gaS1lPD10JiZpK2U+PXR9ZnVuY3Rpb24gUnQodCxlLGkpe2xldCBuLG8scztmb3Iobj0wLG89dC5sZW5ndGg7bjxvO24rKylzPXRbbl1baV0saXNOYU4ocyl8fChlLm1pbj1NYXRoLm1pbihlLm1pbixzKSxlLm1heD1NYXRoLm1heChlLm1heCxzKSl9ZnVuY3Rpb24gRXQodCl7cmV0dXJuIHQqKGJ0LzE4MCl9ZnVuY3Rpb24genQodCl7cmV0dXJuIHQqKDE4MC9idCl9ZnVuY3Rpb24gSXQodCl7aWYoIVgodCkpcmV0dXJuO2xldCBlPTEsaT0wO2Zvcig7TWF0aC5yb3VuZCh0KmUpL2UhPT10OyllKj0xMCxpKys7cmV0dXJuIGl9ZnVuY3Rpb24gRnQodCxlKXtjb25zdCBpPWUueC10Lngsbj1lLnktdC55LG89TWF0aC5zcXJ0KGkqaStuKm4pO2xldCBzPU1hdGguYXRhbjIobixpKTtyZXR1cm4gczwtLjUqYnQmJihzKz1fdCkse2FuZ2xlOnMsZGlzdGFuY2U6b319ZnVuY3Rpb24gQnQodCxlKXtyZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGUueC10LngsMikrTWF0aC5wb3coZS55LXQueSwyKSl9ZnVuY3Rpb24gVnQodCxlKXtyZXR1cm4odC1lK3l0KSVfdC1idH1mdW5jdGlvbiBXdCh0KXtyZXR1cm4odCVfdCtfdCklX3R9ZnVuY3Rpb24gTnQodCxlLGksbil7Y29uc3Qgbz1XdCh0KSxzPVd0KGUpLGE9V3QoaSkscj1XdChzLW8pLGw9V3QoYS1vKSxjPVd0KG8tcyksaD1XdChvLWEpO3JldHVybiBvPT09c3x8bz09PWF8fG4mJnM9PT1hfHxyPmwmJmM8aH1mdW5jdGlvbiBIdCh0LGUsaSl7cmV0dXJuIE1hdGgubWF4KGUsTWF0aC5taW4oaSx0KSl9ZnVuY3Rpb24ganQodCl7cmV0dXJuIEh0KHQsLTMyNzY4LDMyNzY3KX1mdW5jdGlvbiAkdCh0KXtyZXR1cm4hdHx8JCh0LnNpemUpfHwkKHQuZmFtaWx5KT9udWxsOih0LnN0eWxlP3Quc3R5bGUrXCIgXCI6XCJcIikrKHQud2VpZ2h0P3Qud2VpZ2h0K1wiIFwiOlwiXCIpK3Quc2l6ZStcInB4IFwiK3QuZmFtaWx5fWZ1bmN0aW9uIFl0KHQsZSxpLG4sbyl7bGV0IHM9ZVtvXTtyZXR1cm4gc3x8KHM9ZVtvXT10Lm1lYXN1cmVUZXh0KG8pLndpZHRoLGkucHVzaChvKSkscz5uJiYobj1zKSxufWZ1bmN0aW9uIFV0KHQsZSxpLG4pe2xldCBvPShuPW58fHt9KS5kYXRhPW4uZGF0YXx8e30scz1uLmdhcmJhZ2VDb2xsZWN0PW4uZ2FyYmFnZUNvbGxlY3R8fFtdO24uZm9udCE9PWUmJihvPW4uZGF0YT17fSxzPW4uZ2FyYmFnZUNvbGxlY3Q9W10sbi5mb250PWUpLHQuc2F2ZSgpLHQuZm9udD1lO2xldCBhPTA7Y29uc3Qgcj1pLmxlbmd0aDtsZXQgbCxjLGgsZCx1O2ZvcihsPTA7bDxyO2wrKylpZihkPWlbbF0sbnVsbCE9ZCYmITAhPT1ZKGQpKWE9WXQodCxvLHMsYSxkKTtlbHNlIGlmKFkoZCkpZm9yKGM9MCxoPWQubGVuZ3RoO2M8aDtjKyspdT1kW2NdLG51bGw9PXV8fFkodSl8fChhPVl0KHQsbyxzLGEsdSkpO3QucmVzdG9yZSgpO2NvbnN0IGY9cy5sZW5ndGgvMjtpZihmPmkubGVuZ3RoKXtmb3IobD0wO2w8ZjtsKyspZGVsZXRlIG9bc1tsXV07cy5zcGxpY2UoMCxmKX1yZXR1cm4gYX1mdW5jdGlvbiBYdCh0LGUsaSl7Y29uc3Qgbj10LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvLG89MCE9PWk/TWF0aC5tYXgoaS8yLC41KTowO3JldHVybiBNYXRoLnJvdW5kKChlLW8pKm4pL24rb31mdW5jdGlvbiBxdCh0LGUpeyhlPWV8fHQuZ2V0Q29udGV4dChcIjJkXCIpKS5zYXZlKCksZS5yZXNldFRyYW5zZm9ybSgpLGUuY2xlYXJSZWN0KDAsMCx0LndpZHRoLHQuaGVpZ2h0KSxlLnJlc3RvcmUoKX1mdW5jdGlvbiBLdCh0LGUsaSxuKXtsZXQgbyxzLGEscixsO2NvbnN0IGM9ZS5wb2ludFN0eWxlLGg9ZS5yb3RhdGlvbixkPWUucmFkaXVzO2xldCB1PShofHwwKSp3dDtpZihjJiZcIm9iamVjdFwiPT10eXBlb2YgYyYmKG89Yy50b1N0cmluZygpLFwiW29iamVjdCBIVE1MSW1hZ2VFbGVtZW50XVwiPT09b3x8XCJbb2JqZWN0IEhUTUxDYW52YXNFbGVtZW50XVwiPT09bykpcmV0dXJuIHQuc2F2ZSgpLHQudHJhbnNsYXRlKGksbiksdC5yb3RhdGUodSksdC5kcmF3SW1hZ2UoYywtYy53aWR0aC8yLC1jLmhlaWdodC8yLGMud2lkdGgsYy5oZWlnaHQpLHZvaWQgdC5yZXN0b3JlKCk7aWYoIShpc05hTihkKXx8ZDw9MCkpe3N3aXRjaCh0LmJlZ2luUGF0aCgpLGMpe2RlZmF1bHQ6dC5hcmMoaSxuLGQsMCxfdCksdC5jbG9zZVBhdGgoKTticmVhaztjYXNlXCJ0cmlhbmdsZVwiOnQubW92ZVRvKGkrTWF0aC5zaW4odSkqZCxuLU1hdGguY29zKHUpKmQpLHUrPVN0LHQubGluZVRvKGkrTWF0aC5zaW4odSkqZCxuLU1hdGguY29zKHUpKmQpLHUrPVN0LHQubGluZVRvKGkrTWF0aC5zaW4odSkqZCxuLU1hdGguY29zKHUpKmQpLHQuY2xvc2VQYXRoKCk7YnJlYWs7Y2FzZVwicmVjdFJvdW5kZWRcIjpsPS41MTYqZCxyPWQtbCxzPU1hdGguY29zKHUra3QpKnIsYT1NYXRoLnNpbih1K2t0KSpyLHQuYXJjKGktcyxuLWEsbCx1LWJ0LHUtTXQpLHQuYXJjKGkrYSxuLXMsbCx1LU10LHUpLHQuYXJjKGkrcyxuK2EsbCx1LHUrTXQpLHQuYXJjKGktYSxuK3MsbCx1K010LHUrYnQpLHQuY2xvc2VQYXRoKCk7YnJlYWs7Y2FzZVwicmVjdFwiOmlmKCFoKXtyPU1hdGguU1FSVDFfMipkLHQucmVjdChpLXIsbi1yLDIqciwyKnIpO2JyZWFrfXUrPWt0O2Nhc2VcInJlY3RSb3RcIjpzPU1hdGguY29zKHUpKmQsYT1NYXRoLnNpbih1KSpkLHQubW92ZVRvKGktcyxuLWEpLHQubGluZVRvKGkrYSxuLXMpLHQubGluZVRvKGkrcyxuK2EpLHQubGluZVRvKGktYSxuK3MpLHQuY2xvc2VQYXRoKCk7YnJlYWs7Y2FzZVwiY3Jvc3NSb3RcIjp1Kz1rdDtjYXNlXCJjcm9zc1wiOnM9TWF0aC5jb3ModSkqZCxhPU1hdGguc2luKHUpKmQsdC5tb3ZlVG8oaS1zLG4tYSksdC5saW5lVG8oaStzLG4rYSksdC5tb3ZlVG8oaSthLG4tcyksdC5saW5lVG8oaS1hLG4rcyk7YnJlYWs7Y2FzZVwic3RhclwiOnM9TWF0aC5jb3ModSkqZCxhPU1hdGguc2luKHUpKmQsdC5tb3ZlVG8oaS1zLG4tYSksdC5saW5lVG8oaStzLG4rYSksdC5tb3ZlVG8oaSthLG4tcyksdC5saW5lVG8oaS1hLG4rcyksdSs9a3Qscz1NYXRoLmNvcyh1KSpkLGE9TWF0aC5zaW4odSkqZCx0Lm1vdmVUbyhpLXMsbi1hKSx0LmxpbmVUbyhpK3MsbithKSx0Lm1vdmVUbyhpK2Esbi1zKSx0LmxpbmVUbyhpLWEsbitzKTticmVhaztjYXNlXCJsaW5lXCI6cz1NYXRoLmNvcyh1KSpkLGE9TWF0aC5zaW4odSkqZCx0Lm1vdmVUbyhpLXMsbi1hKSx0LmxpbmVUbyhpK3MsbithKTticmVhaztjYXNlXCJkYXNoXCI6dC5tb3ZlVG8oaSxuKSx0LmxpbmVUbyhpK01hdGguY29zKHUpKmQsbitNYXRoLnNpbih1KSpkKX10LmZpbGwoKSxlLmJvcmRlcldpZHRoPjAmJnQuc3Ryb2tlKCl9fWZ1bmN0aW9uIEd0KHQsZSxpKXtyZXR1cm4gaT1pfHwuNSx0JiZ0Lng+ZS5sZWZ0LWkmJnQueDxlLnJpZ2h0K2kmJnQueT5lLnRvcC1pJiZ0Lnk8ZS5ib3R0b20raX1mdW5jdGlvbiBadCh0LGUpe3Quc2F2ZSgpLHQuYmVnaW5QYXRoKCksdC5yZWN0KGUubGVmdCxlLnRvcCxlLnJpZ2h0LWUubGVmdCxlLmJvdHRvbS1lLnRvcCksdC5jbGlwKCl9ZnVuY3Rpb24gUXQodCl7dC5yZXN0b3JlKCl9ZnVuY3Rpb24gSnQodCxlLGksbixvKXtpZighZSlyZXR1cm4gdC5saW5lVG8oaS54LGkueSk7aWYoXCJtaWRkbGVcIj09PW8pe2NvbnN0IG49KGUueCtpLngpLzI7dC5saW5lVG8obixlLnkpLHQubGluZVRvKG4saS55KX1lbHNlXCJhZnRlclwiPT09byE9ISFuP3QubGluZVRvKGUueCxpLnkpOnQubGluZVRvKGkueCxlLnkpO3QubGluZVRvKGkueCxpLnkpfWZ1bmN0aW9uIHRlKHQsZSxpLG4pe2lmKCFlKXJldHVybiB0LmxpbmVUbyhpLngsaS55KTt0LmJlemllckN1cnZlVG8obj9lLmNwMXg6ZS5jcDJ4LG4/ZS5jcDF5OmUuY3AyeSxuP2kuY3AyeDppLmNwMXgsbj9pLmNwMnk6aS5jcDF5LGkueCxpLnkpfWZ1bmN0aW9uIGVlKHQsZSxpLG4sbyxzPXt9KXtjb25zdCBhPVkoZSk/ZTpbZV0scj1zLnN0cm9rZVdpZHRoPjAmJlwiXCIhPT1zLnN0cm9rZUNvbG9yO2xldCBsLGM7Zm9yKHQuc2F2ZSgpLHQuZm9udD1vLnN0cmluZyxmdW5jdGlvbih0LGUpe2UudHJhbnNsYXRpb24mJnQudHJhbnNsYXRlKGUudHJhbnNsYXRpb25bMF0sZS50cmFuc2xhdGlvblsxXSk7JChlLnJvdGF0aW9uKXx8dC5yb3RhdGUoZS5yb3RhdGlvbik7ZS5jb2xvciYmKHQuZmlsbFN0eWxlPWUuY29sb3IpO2UudGV4dEFsaWduJiYodC50ZXh0QWxpZ249ZS50ZXh0QWxpZ24pO2UudGV4dEJhc2VsaW5lJiYodC50ZXh0QmFzZWxpbmU9ZS50ZXh0QmFzZWxpbmUpfSh0LHMpLGw9MDtsPGEubGVuZ3RoOysrbCljPWFbbF0sciYmKHMuc3Ryb2tlQ29sb3ImJih0LnN0cm9rZVN0eWxlPXMuc3Ryb2tlQ29sb3IpLCQocy5zdHJva2VXaWR0aCl8fCh0LmxpbmVXaWR0aD1zLnN0cm9rZVdpZHRoKSx0LnN0cm9rZVRleHQoYyxpLG4scy5tYXhXaWR0aCkpLHQuZmlsbFRleHQoYyxpLG4scy5tYXhXaWR0aCksaWUodCxpLG4sYyxzKSxuKz1vLmxpbmVIZWlnaHQ7dC5yZXN0b3JlKCl9ZnVuY3Rpb24gaWUodCxlLGksbixvKXtpZihvLnN0cmlrZXRocm91Z2h8fG8udW5kZXJsaW5lKXtjb25zdCBzPXQubWVhc3VyZVRleHQobiksYT1lLXMuYWN0dWFsQm91bmRpbmdCb3hMZWZ0LHI9ZStzLmFjdHVhbEJvdW5kaW5nQm94UmlnaHQsbD1pLXMuYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQsYz1pK3MuYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50LGg9by5zdHJpa2V0aHJvdWdoPyhsK2MpLzI6Yzt0LnN0cm9rZVN0eWxlPXQuZmlsbFN0eWxlLHQuYmVnaW5QYXRoKCksdC5saW5lV2lkdGg9by5kZWNvcmF0aW9uV2lkdGh8fDIsdC5tb3ZlVG8oYSxoKSx0LmxpbmVUbyhyLGgpLHQuc3Ryb2tlKCl9fWZ1bmN0aW9uIG5lKHQsZSl7Y29uc3R7eDppLHk6bix3Om8saDpzLHJhZGl1czphfT1lO3QuYXJjKGkrYS50b3BMZWZ0LG4rYS50b3BMZWZ0LGEudG9wTGVmdCwtTXQsYnQsITApLHQubGluZVRvKGksbitzLWEuYm90dG9tTGVmdCksdC5hcmMoaSthLmJvdHRvbUxlZnQsbitzLWEuYm90dG9tTGVmdCxhLmJvdHRvbUxlZnQsYnQsTXQsITApLHQubGluZVRvKGkrby1hLmJvdHRvbVJpZ2h0LG4rcyksdC5hcmMoaStvLWEuYm90dG9tUmlnaHQsbitzLWEuYm90dG9tUmlnaHQsYS5ib3R0b21SaWdodCxNdCwwLCEwKSx0LmxpbmVUbyhpK28sbithLnRvcFJpZ2h0KSx0LmFyYyhpK28tYS50b3BSaWdodCxuK2EudG9wUmlnaHQsYS50b3BSaWdodCwwLC1NdCwhMCksdC5saW5lVG8oaSthLnRvcExlZnQsbil9ZnVuY3Rpb24gb2UodCxlLGkpe2k9aXx8KGk9PnRbaV08ZSk7bGV0IG4sbz10Lmxlbmd0aC0xLHM9MDtmb3IoO28tcz4xOyluPXMrbz4+MSxpKG4pP3M9bjpvPW47cmV0dXJue2xvOnMsaGk6b319Y29uc3Qgc2U9KHQsZSxpKT0+b2UodCxpLChuPT50W25dW2VdPGkpKSxhZT0odCxlLGkpPT5vZSh0LGksKG49PnRbbl1bZV0+PWkpKTtmdW5jdGlvbiByZSh0LGUsaSl7bGV0IG49MCxvPXQubGVuZ3RoO2Zvcig7bjxvJiZ0W25dPGU7KW4rKztmb3IoO28+biYmdFtvLTFdPmk7KW8tLTtyZXR1cm4gbj4wfHxvPHQubGVuZ3RoP3Quc2xpY2UobixvKTp0fWNvbnN0IGxlPVtcInB1c2hcIixcInBvcFwiLFwic2hpZnRcIixcInNwbGljZVwiLFwidW5zaGlmdFwiXTtmdW5jdGlvbiBjZSh0LGUpe3QuX2NoYXJ0anM/dC5fY2hhcnRqcy5saXN0ZW5lcnMucHVzaChlKTooT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfY2hhcnRqc1wiLHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMSx2YWx1ZTp7bGlzdGVuZXJzOltlXX19KSxsZS5mb3JFYWNoKChlPT57Y29uc3QgaT1cIl9vbkRhdGFcIitjdChlKSxuPXRbZV07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITEsdmFsdWUoLi4uZSl7Y29uc3Qgbz1uLmFwcGx5KHRoaXMsZSk7cmV0dXJuIHQuX2NoYXJ0anMubGlzdGVuZXJzLmZvckVhY2goKHQ9PntcImZ1bmN0aW9uXCI9PXR5cGVvZiB0W2ldJiZ0W2ldKC4uLmUpfSkpLG99fSl9KSkpfWZ1bmN0aW9uIGhlKHQsZSl7Y29uc3QgaT10Ll9jaGFydGpzO2lmKCFpKXJldHVybjtjb25zdCBuPWkubGlzdGVuZXJzLG89bi5pbmRleE9mKGUpOy0xIT09byYmbi5zcGxpY2UobywxKSxuLmxlbmd0aD4wfHwobGUuZm9yRWFjaCgoZT0+e2RlbGV0ZSB0W2VdfSkpLGRlbGV0ZSB0Ll9jaGFydGpzKX1mdW5jdGlvbiBkZSh0KXtjb25zdCBlPW5ldyBTZXQ7bGV0IGksbjtmb3IoaT0wLG49dC5sZW5ndGg7aTxuOysraSllLmFkZCh0W2ldKTtyZXR1cm4gZS5zaXplPT09bj90OkFycmF5LmZyb20oZSl9ZnVuY3Rpb24gdWUodCl7bGV0IGU9dC5wYXJlbnROb2RlO3JldHVybiBlJiZcIltvYmplY3QgU2hhZG93Um9vdF1cIj09PWUudG9TdHJpbmcoKSYmKGU9ZS5ob3N0KSxlfWZ1bmN0aW9uIGZlKHQsZSxpKXtsZXQgbjtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdD8obj1wYXJzZUludCh0LDEwKSwtMSE9PXQuaW5kZXhPZihcIiVcIikmJihuPW4vMTAwKmUucGFyZW50Tm9kZVtpXSkpOm49dCxufWNvbnN0IGdlPXQ9PndpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHQsbnVsbCk7ZnVuY3Rpb24gcGUodCxlKXtyZXR1cm4gZ2UodCkuZ2V0UHJvcGVydHlWYWx1ZShlKX1jb25zdCBtZT1bXCJ0b3BcIixcInJpZ2h0XCIsXCJib3R0b21cIixcImxlZnRcIl07ZnVuY3Rpb24geGUodCxlLGkpe2NvbnN0IG49e307aT1pP1wiLVwiK2k6XCJcIjtmb3IobGV0IG89MDtvPDQ7bysrKXtjb25zdCBzPW1lW29dO25bc109cGFyc2VGbG9hdCh0W2UrXCItXCIrcytpXSl8fDB9cmV0dXJuIG4ud2lkdGg9bi5sZWZ0K24ucmlnaHQsbi5oZWlnaHQ9bi50b3Arbi5ib3R0b20sbn1mdW5jdGlvbiBiZSh0LGUpe2NvbnN0e2NhbnZhczppLGN1cnJlbnREZXZpY2VQaXhlbFJhdGlvOm59PWUsbz1nZShpKSxzPVwiYm9yZGVyLWJveFwiPT09by5ib3hTaXppbmcsYT14ZShvLFwicGFkZGluZ1wiKSxyPXhlKG8sXCJib3JkZXJcIixcIndpZHRoXCIpLHt4OmwseTpjLGJveDpofT1mdW5jdGlvbih0LGUpe2NvbnN0IGk9dC5uYXRpdmV8fHQsbj1pLnRvdWNoZXMsbz1uJiZuLmxlbmd0aD9uWzBdOmkse29mZnNldFg6cyxvZmZzZXRZOmF9PW87bGV0IHIsbCxjPSExO2lmKCgodCxlLGkpPT4odD4wfHxlPjApJiYoIWl8fCFpLnNoYWRvd1Jvb3QpKShzLGEsaS50YXJnZXQpKXI9cyxsPWE7ZWxzZXtjb25zdCB0PWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7cj1vLmNsaWVudFgtdC5sZWZ0LGw9by5jbGllbnRZLXQudG9wLGM9ITB9cmV0dXJue3g6cix5OmwsYm94OmN9fSh0LGkpLGQ9YS5sZWZ0KyhoJiZyLmxlZnQpLHU9YS50b3ArKGgmJnIudG9wKTtsZXR7d2lkdGg6ZixoZWlnaHQ6Z309ZTtyZXR1cm4gcyYmKGYtPWEud2lkdGgrci53aWR0aCxnLT1hLmhlaWdodCtyLmhlaWdodCkse3g6TWF0aC5yb3VuZCgobC1kKS9mKmkud2lkdGgvbikseTpNYXRoLnJvdW5kKChjLXUpL2cqaS5oZWlnaHQvbil9fWNvbnN0IF9lPXQ9Pk1hdGgucm91bmQoMTAqdCkvMTA7ZnVuY3Rpb24geWUodCxlLGksbil7Y29uc3Qgbz1nZSh0KSxzPXhlKG8sXCJtYXJnaW5cIiksYT1mZShvLm1heFdpZHRoLHQsXCJjbGllbnRXaWR0aFwiKXx8dnQscj1mZShvLm1heEhlaWdodCx0LFwiY2xpZW50SGVpZ2h0XCIpfHx2dCxsPWZ1bmN0aW9uKHQsZSxpKXtsZXQgbixvO2lmKHZvaWQgMD09PWV8fHZvaWQgMD09PWkpe2NvbnN0IHM9dWUodCk7aWYocyl7Y29uc3QgdD1zLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGE9Z2Uocykscj14ZShhLFwiYm9yZGVyXCIsXCJ3aWR0aFwiKSxsPXhlKGEsXCJwYWRkaW5nXCIpO2U9dC53aWR0aC1sLndpZHRoLXIud2lkdGgsaT10LmhlaWdodC1sLmhlaWdodC1yLmhlaWdodCxuPWZlKGEubWF4V2lkdGgscyxcImNsaWVudFdpZHRoXCIpLG89ZmUoYS5tYXhIZWlnaHQscyxcImNsaWVudEhlaWdodFwiKX1lbHNlIGU9dC5jbGllbnRXaWR0aCxpPXQuY2xpZW50SGVpZ2h0fXJldHVybnt3aWR0aDplLGhlaWdodDppLG1heFdpZHRoOm58fHZ0LG1heEhlaWdodDpvfHx2dH19KHQsZSxpKTtsZXR7d2lkdGg6YyxoZWlnaHQ6aH09bDtpZihcImNvbnRlbnQtYm94XCI9PT1vLmJveFNpemluZyl7Y29uc3QgdD14ZShvLFwiYm9yZGVyXCIsXCJ3aWR0aFwiKSxlPXhlKG8sXCJwYWRkaW5nXCIpO2MtPWUud2lkdGgrdC53aWR0aCxoLT1lLmhlaWdodCt0LmhlaWdodH1yZXR1cm4gYz1NYXRoLm1heCgwLGMtcy53aWR0aCksaD1NYXRoLm1heCgwLG4/TWF0aC5mbG9vcihjL24pOmgtcy5oZWlnaHQpLGM9X2UoTWF0aC5taW4oYyxhLGwubWF4V2lkdGgpKSxoPV9lKE1hdGgubWluKGgscixsLm1heEhlaWdodCkpLGMmJiFoJiYoaD1fZShjLzIpKSx7d2lkdGg6YyxoZWlnaHQ6aH19ZnVuY3Rpb24gdmUodCxlLGkpe2NvbnN0IG49ZXx8MSxvPU1hdGguZmxvb3IodC5oZWlnaHQqbikscz1NYXRoLmZsb29yKHQud2lkdGgqbik7dC5oZWlnaHQ9by9uLHQud2lkdGg9cy9uO2NvbnN0IGE9dC5jYW52YXM7cmV0dXJuIGEuc3R5bGUmJihpfHwhYS5zdHlsZS5oZWlnaHQmJiFhLnN0eWxlLndpZHRoKSYmKGEuc3R5bGUuaGVpZ2h0PWAke3QuaGVpZ2h0fXB4YCxhLnN0eWxlLndpZHRoPWAke3Qud2lkdGh9cHhgKSwodC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyE9PW58fGEuaGVpZ2h0IT09b3x8YS53aWR0aCE9PXMpJiYodC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbz1uLGEuaGVpZ2h0PW8sYS53aWR0aD1zLHQuY3R4LnNldFRyYW5zZm9ybShuLDAsMCxuLDAsMCksITApfWNvbnN0IHdlPWZ1bmN0aW9uKCl7bGV0IHQ9ITE7dHJ5e2NvbnN0IGU9e2dldCBwYXNzaXZlKCl7cmV0dXJuIHQ9ITAsITF9fTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixudWxsLGUpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLG51bGwsZSl9Y2F0Y2godCl7fXJldHVybiB0fSgpO2Z1bmN0aW9uIE1lKHQsZSl7Y29uc3QgaT1wZSh0LGUpLG49aSYmaS5tYXRjaCgvXihcXGQrKShcXC5cXGQrKT9weCQvKTtyZXR1cm4gbj8rblsxXTp2b2lkIDB9ZnVuY3Rpb24ga2UodCxlKXtyZXR1cm5cIm5hdGl2ZVwiaW4gdD97eDp0LngseTp0Lnl9OmJlKHQsZSl9ZnVuY3Rpb24gU2UodCxlLGksbil7Y29uc3R7Y29udHJvbGxlcjpvLGRhdGE6cyxfc29ydGVkOmF9PXQscj1vLl9jYWNoZWRNZXRhLmlTY2FsZTtpZihyJiZlPT09ci5heGlzJiZhJiZzLmxlbmd0aCl7Y29uc3QgdD1yLl9yZXZlcnNlUGl4ZWxzP2FlOnNlO2lmKCFuKXJldHVybiB0KHMsZSxpKTtpZihvLl9zaGFyZWRPcHRpb25zKXtjb25zdCBuPXNbMF0sbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBuLmdldFJhbmdlJiZuLmdldFJhbmdlKGUpO2lmKG8pe2NvbnN0IG49dChzLGUsaS1vKSxhPXQocyxlLGkrbyk7cmV0dXJue2xvOm4ubG8saGk6YS5oaX19fX1yZXR1cm57bG86MCxoaTpzLmxlbmd0aC0xfX1mdW5jdGlvbiBQZSh0LGUsaSxuLG8pe2NvbnN0IHM9dC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCksYT1pW2VdO2ZvcihsZXQgdD0wLGk9cy5sZW5ndGg7dDxpOysrdCl7Y29uc3R7aW5kZXg6aSxkYXRhOnJ9PXNbdF0se2xvOmwsaGk6Y309U2Uoc1t0XSxlLGEsbyk7Zm9yKGxldCB0PWw7dDw9YzsrK3Qpe2NvbnN0IGU9clt0XTtlLnNraXB8fG4oZSxpLHQpfX19ZnVuY3Rpb24gRGUodCxlLGksbil7Y29uc3Qgbz1bXTtpZighR3QoZSx0LmNoYXJ0QXJlYSx0Ll9taW5QYWRkaW5nKSlyZXR1cm4gbztyZXR1cm4gUGUodCxpLGUsKGZ1bmN0aW9uKHQsaSxzKXt0LmluUmFuZ2UoZS54LGUueSxuKSYmby5wdXNoKHtlbGVtZW50OnQsZGF0YXNldEluZGV4OmksaW5kZXg6c30pfSksITApLG99ZnVuY3Rpb24gQ2UodCxlLGksbixvKXtjb25zdCBzPWZ1bmN0aW9uKHQpe2NvbnN0IGU9LTEhPT10LmluZGV4T2YoXCJ4XCIpLGk9LTEhPT10LmluZGV4T2YoXCJ5XCIpO3JldHVybiBmdW5jdGlvbih0LG4pe2NvbnN0IG89ZT9NYXRoLmFicyh0Lngtbi54KTowLHM9aT9NYXRoLmFicyh0Lnktbi55KTowO3JldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cobywyKStNYXRoLnBvdyhzLDIpKX19KGkpO2xldCBhPU51bWJlci5QT1NJVElWRV9JTkZJTklUWSxyPVtdO2lmKCFHdChlLHQuY2hhcnRBcmVhLHQuX21pblBhZGRpbmcpKXJldHVybiByO3JldHVybiBQZSh0LGksZSwoZnVuY3Rpb24oaSxsLGMpe2lmKG4mJiFpLmluUmFuZ2UoZS54LGUueSxvKSlyZXR1cm47Y29uc3QgaD1pLmdldENlbnRlclBvaW50KG8pO2lmKCFHdChoLHQuY2hhcnRBcmVhLHQuX21pblBhZGRpbmcpKXJldHVybjtjb25zdCBkPXMoZSxoKTtkPGE/KHI9W3tlbGVtZW50OmksZGF0YXNldEluZGV4OmwsaW5kZXg6Y31dLGE9ZCk6ZD09PWEmJnIucHVzaCh7ZWxlbWVudDppLGRhdGFzZXRJbmRleDpsLGluZGV4OmN9KX0pKSxyfWZ1bmN0aW9uIE9lKHQsZSxpLG4pe2NvbnN0IG89a2UoZSx0KSxzPVtdLGE9aS5heGlzLHI9XCJ4XCI9PT1hP1wiaW5YUmFuZ2VcIjpcImluWVJhbmdlXCI7bGV0IGw9ITE7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7Y29uc3QgaT10LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtsZXQgbixvLHM7Zm9yKGxldCB0PTAsYT1pLmxlbmd0aDt0PGE7Kyt0KXsoe2luZGV4Om4sZGF0YTpvfT1pW3RdKTtmb3IobGV0IHQ9MCxpPW8ubGVuZ3RoO3Q8aTsrK3Qpcz1vW3RdLHMuc2tpcHx8ZShzLG4sdCl9fSh0LCgodCxlLGkpPT57dFtyXShvW2FdLG4pJiZzLnB1c2goe2VsZW1lbnQ6dCxkYXRhc2V0SW5kZXg6ZSxpbmRleDppfSksdC5pblJhbmdlKG8ueCxvLnksbikmJihsPSEwKX0pKSxpLmludGVyc2VjdCYmIWw/W106c312YXIgVGU9e21vZGVzOntpbmRleCh0LGUsaSxuKXtjb25zdCBvPWtlKGUsdCkscz1pLmF4aXN8fFwieFwiLGE9aS5pbnRlcnNlY3Q/RGUodCxvLHMsbik6Q2UodCxvLHMsITEsbikscj1bXTtyZXR1cm4gYS5sZW5ndGg/KHQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpLmZvckVhY2goKHQ9Pntjb25zdCBlPWFbMF0uaW5kZXgsaT10LmRhdGFbZV07aSYmIWkuc2tpcCYmci5wdXNoKHtlbGVtZW50OmksZGF0YXNldEluZGV4OnQuaW5kZXgsaW5kZXg6ZX0pfSkpLHIpOltdfSxkYXRhc2V0KHQsZSxpLG4pe2NvbnN0IG89a2UoZSx0KSxzPWkuYXhpc3x8XCJ4eVwiO2xldCBhPWkuaW50ZXJzZWN0P0RlKHQsbyxzLG4pOkNlKHQsbyxzLCExLG4pO2lmKGEubGVuZ3RoPjApe2NvbnN0IGU9YVswXS5kYXRhc2V0SW5kZXgsaT10LmdldERhdGFzZXRNZXRhKGUpLmRhdGE7YT1bXTtmb3IobGV0IHQ9MDt0PGkubGVuZ3RoOysrdClhLnB1c2goe2VsZW1lbnQ6aVt0XSxkYXRhc2V0SW5kZXg6ZSxpbmRleDp0fSl9cmV0dXJuIGF9LHBvaW50Oih0LGUsaSxuKT0+RGUodCxrZShlLHQpLGkuYXhpc3x8XCJ4eVwiLG4pLG5lYXJlc3Q6KHQsZSxpLG4pPT5DZSh0LGtlKGUsdCksaS5heGlzfHxcInh5XCIsaS5pbnRlcnNlY3QsbikseDoodCxlLGksbik9PihpLmF4aXM9XCJ4XCIsT2UodCxlLGksbikpLHk6KHQsZSxpLG4pPT4oaS5heGlzPVwieVwiLE9lKHQsZSxpLG4pKX19O2NvbnN0IEFlPW5ldyBSZWdFeHAoL14obm9ybWFsfChcXGQrKD86XFwuXFxkKyk/KShweHxlbXwlKT8pJC8pLExlPW5ldyBSZWdFeHAoL14obm9ybWFsfGl0YWxpY3xpbml0aWFsfGluaGVyaXR8dW5zZXR8KG9ibGlxdWUoIC0/WzAtOV0/WzAtOV1kZWcpPykpJC8pO2Z1bmN0aW9uIFJlKHQsZSl7Y29uc3QgaT0oXCJcIit0KS5tYXRjaChBZSk7aWYoIWl8fFwibm9ybWFsXCI9PT1pWzFdKXJldHVybiAxLjIqZTtzd2l0Y2godD0raVsyXSxpWzNdKXtjYXNlXCJweFwiOnJldHVybiB0O2Nhc2VcIiVcIjp0Lz0xMDB9cmV0dXJuIGUqdH1mdW5jdGlvbiBFZSh0LGUpe2NvbnN0IGk9e30sbj1VKGUpLG89bj9PYmplY3Qua2V5cyhlKTplLHM9VSh0KT9uP2k9PksodFtpXSx0W2VbaV1dKTplPT50W2VdOigpPT50O2Zvcihjb25zdCB0IG9mIG8paVt0XT0rcyh0KXx8MDtyZXR1cm4gaX1mdW5jdGlvbiB6ZSh0KXtyZXR1cm4gRWUodCx7dG9wOlwieVwiLHJpZ2h0OlwieFwiLGJvdHRvbTpcInlcIixsZWZ0OlwieFwifSl9ZnVuY3Rpb24gSWUodCl7cmV0dXJuIEVlKHQsW1widG9wTGVmdFwiLFwidG9wUmlnaHRcIixcImJvdHRvbUxlZnRcIixcImJvdHRvbVJpZ2h0XCJdKX1mdW5jdGlvbiBGZSh0KXtjb25zdCBlPXplKHQpO3JldHVybiBlLndpZHRoPWUubGVmdCtlLnJpZ2h0LGUuaGVpZ2h0PWUudG9wK2UuYm90dG9tLGV9ZnVuY3Rpb24gQmUodCxlKXt0PXR8fHt9LGU9ZXx8eHQuZm9udDtsZXQgaT1LKHQuc2l6ZSxlLnNpemUpO1wic3RyaW5nXCI9PXR5cGVvZiBpJiYoaT1wYXJzZUludChpLDEwKSk7bGV0IG49Syh0LnN0eWxlLGUuc3R5bGUpO24mJiEoXCJcIituKS5tYXRjaChMZSkmJihjb25zb2xlLndhcm4oJ0ludmFsaWQgZm9udCBzdHlsZSBzcGVjaWZpZWQ6IFwiJytuKydcIicpLG49XCJcIik7Y29uc3Qgbz17ZmFtaWx5OksodC5mYW1pbHksZS5mYW1pbHkpLGxpbmVIZWlnaHQ6UmUoSyh0LmxpbmVIZWlnaHQsZS5saW5lSGVpZ2h0KSxpKSxzaXplOmksc3R5bGU6bix3ZWlnaHQ6Syh0LndlaWdodCxlLndlaWdodCksc3RyaW5nOlwiXCJ9O3JldHVybiBvLnN0cmluZz0kdChvKSxvfWZ1bmN0aW9uIFZlKHQsZSxpLG4pe2xldCBvLHMsYSxyPSEwO2ZvcihvPTAscz10Lmxlbmd0aDtvPHM7KytvKWlmKGE9dFtvXSx2b2lkIDAhPT1hJiYodm9pZCAwIT09ZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYSYmKGE9YShlKSxyPSExKSx2b2lkIDAhPT1pJiZZKGEpJiYoYT1hW2klYS5sZW5ndGhdLHI9ITEpLHZvaWQgMCE9PWEpKXJldHVybiBuJiYhciYmKG4uY2FjaGVhYmxlPSExKSxhfWZ1bmN0aW9uIFdlKHQsZSl7Y29uc3R7bWluOmksbWF4Om59PXQ7cmV0dXJue21pbjppLU1hdGguYWJzKFooZSxpKSksbWF4Om4rWihlLG4pfX1jb25zdCBOZT1bXCJsZWZ0XCIsXCJ0b3BcIixcInJpZ2h0XCIsXCJib3R0b21cIl07ZnVuY3Rpb24gSGUodCxlKXtyZXR1cm4gdC5maWx0ZXIoKHQ9PnQucG9zPT09ZSkpfWZ1bmN0aW9uIGplKHQsZSl7cmV0dXJuIHQuZmlsdGVyKCh0PT4tMT09PU5lLmluZGV4T2YodC5wb3MpJiZ0LmJveC5heGlzPT09ZSkpfWZ1bmN0aW9uICRlKHQsZSl7cmV0dXJuIHQuc29ydCgoKHQsaSk9Pntjb25zdCBuPWU/aTp0LG89ZT90Omk7cmV0dXJuIG4ud2VpZ2h0PT09by53ZWlnaHQ/bi5pbmRleC1vLmluZGV4Om4ud2VpZ2h0LW8ud2VpZ2h0fSkpfWZ1bmN0aW9uIFllKHQsZSxpLG4pe3JldHVybiBNYXRoLm1heCh0W2ldLGVbaV0pK01hdGgubWF4KHRbbl0sZVtuXSl9ZnVuY3Rpb24gVWUodCxlKXt0LnRvcD1NYXRoLm1heCh0LnRvcCxlLnRvcCksdC5sZWZ0PU1hdGgubWF4KHQubGVmdCxlLmxlZnQpLHQuYm90dG9tPU1hdGgubWF4KHQuYm90dG9tLGUuYm90dG9tKSx0LnJpZ2h0PU1hdGgubWF4KHQucmlnaHQsZS5yaWdodCl9ZnVuY3Rpb24gWGUodCxlLGkpe2NvbnN0IG49aS5ib3gsbz10Lm1heFBhZGRpbmc7VShpLnBvcyl8fChpLnNpemUmJih0W2kucG9zXS09aS5zaXplKSxpLnNpemU9aS5ob3Jpem9udGFsP24uaGVpZ2h0Om4ud2lkdGgsdFtpLnBvc10rPWkuc2l6ZSksbi5nZXRQYWRkaW5nJiZVZShvLG4uZ2V0UGFkZGluZygpKTtjb25zdCBzPU1hdGgubWF4KDAsZS5vdXRlcldpZHRoLVllKG8sdCxcImxlZnRcIixcInJpZ2h0XCIpKSxhPU1hdGgubWF4KDAsZS5vdXRlckhlaWdodC1ZZShvLHQsXCJ0b3BcIixcImJvdHRvbVwiKSkscj1zIT09dC53LGw9YSE9PXQuaDtyZXR1cm4gdC53PXMsdC5oPWEsaS5ob3Jpem9udGFsP3tzYW1lOnIsb3RoZXI6bH06e3NhbWU6bCxvdGhlcjpyfX1mdW5jdGlvbiBxZSh0LGUpe2NvbnN0IGk9ZS5tYXhQYWRkaW5nO2Z1bmN0aW9uIG4odCl7Y29uc3Qgbj17bGVmdDowLHRvcDowLHJpZ2h0OjAsYm90dG9tOjB9O3JldHVybiB0LmZvckVhY2goKHQ9PntuW3RdPU1hdGgubWF4KGVbdF0saVt0XSl9KSksbn1yZXR1cm4gbih0P1tcImxlZnRcIixcInJpZ2h0XCJdOltcInRvcFwiLFwiYm90dG9tXCJdKX1mdW5jdGlvbiBLZSh0LGUsaSl7Y29uc3Qgbj1bXTtsZXQgbyxzLGEscixsLGM7Zm9yKG89MCxzPXQubGVuZ3RoLGw9MDtvPHM7KytvKXthPXRbb10scj1hLmJveCxyLnVwZGF0ZShhLndpZHRofHxlLncsYS5oZWlnaHR8fGUuaCxxZShhLmhvcml6b250YWwsZSkpO2NvbnN0e3NhbWU6cyxvdGhlcjpofT1YZShlLGksYSk7bHw9cyYmbi5sZW5ndGgsYz1jfHxoLHIuZnVsbFNpemV8fG4ucHVzaChhKX1yZXR1cm4gbCYmS2UobixlLGkpfHxjfWZ1bmN0aW9uIEdlKHQsZSxpKXtjb25zdCBuPWkucGFkZGluZztsZXQgbyxzLGEscixsPWUueCxjPWUueTtmb3Iobz0wLHM9dC5sZW5ndGg7bzxzOysrbylhPXRbb10scj1hLmJveCxhLmhvcml6b250YWw/KHIubGVmdD1yLmZ1bGxTaXplP24ubGVmdDplLmxlZnQsci5yaWdodD1yLmZ1bGxTaXplP2kub3V0ZXJXaWR0aC1uLnJpZ2h0OmUubGVmdCtlLncsci50b3A9YyxyLmJvdHRvbT1jK3IuaGVpZ2h0LHIud2lkdGg9ci5yaWdodC1yLmxlZnQsYz1yLmJvdHRvbSk6KHIubGVmdD1sLHIucmlnaHQ9bCtyLndpZHRoLHIudG9wPXIuZnVsbFNpemU/bi50b3A6ZS50b3Asci5ib3R0b209ci5mdWxsU2l6ZT9pLm91dGVySGVpZ2h0LW4uYm90dG9tOmUudG9wK2UuaCxyLmhlaWdodD1yLmJvdHRvbS1yLnRvcCxsPXIucmlnaHQpO2UueD1sLGUueT1jfXh0LnNldChcImxheW91dFwiLHtwYWRkaW5nOnt0b3A6MCxyaWdodDowLGJvdHRvbTowLGxlZnQ6MH19KTt2YXIgWmU9e2FkZEJveCh0LGUpe3QuYm94ZXN8fCh0LmJveGVzPVtdKSxlLmZ1bGxTaXplPWUuZnVsbFNpemV8fCExLGUucG9zaXRpb249ZS5wb3NpdGlvbnx8XCJ0b3BcIixlLndlaWdodD1lLndlaWdodHx8MCxlLl9sYXllcnM9ZS5fbGF5ZXJzfHxmdW5jdGlvbigpe3JldHVyblt7ejowLGRyYXcodCl7ZS5kcmF3KHQpfX1dfSx0LmJveGVzLnB1c2goZSl9LHJlbW92ZUJveCh0LGUpe2NvbnN0IGk9dC5ib3hlcz90LmJveGVzLmluZGV4T2YoZSk6LTE7LTEhPT1pJiZ0LmJveGVzLnNwbGljZShpLDEpfSxjb25maWd1cmUodCxlLGkpe2UuZnVsbFNpemU9aS5mdWxsU2l6ZSxlLnBvc2l0aW9uPWkucG9zaXRpb24sZS53ZWlnaHQ9aS53ZWlnaHR9LHVwZGF0ZSh0LGUsaSxuKXtpZighdClyZXR1cm47Y29uc3Qgbz1GZSh0Lm9wdGlvbnMubGF5b3V0LnBhZGRpbmcpLHM9TWF0aC5tYXgoZS1vLndpZHRoLDApLGE9TWF0aC5tYXgoaS1vLmhlaWdodCwwKSxyPWZ1bmN0aW9uKHQpe2NvbnN0IGU9ZnVuY3Rpb24odCl7Y29uc3QgZT1bXTtsZXQgaSxuLG87Zm9yKGk9MCxuPSh0fHxbXSkubGVuZ3RoO2k8bjsrK2kpbz10W2ldLGUucHVzaCh7aW5kZXg6aSxib3g6byxwb3M6by5wb3NpdGlvbixob3Jpem9udGFsOm8uaXNIb3Jpem9udGFsKCksd2VpZ2h0Om8ud2VpZ2h0fSk7cmV0dXJuIGV9KHQpLGk9JGUoZS5maWx0ZXIoKHQ9PnQuYm94LmZ1bGxTaXplKSksITApLG49JGUoSGUoZSxcImxlZnRcIiksITApLG89JGUoSGUoZSxcInJpZ2h0XCIpKSxzPSRlKEhlKGUsXCJ0b3BcIiksITApLGE9JGUoSGUoZSxcImJvdHRvbVwiKSkscj1qZShlLFwieFwiKSxsPWplKGUsXCJ5XCIpO3JldHVybntmdWxsU2l6ZTppLGxlZnRBbmRUb3A6bi5jb25jYXQocykscmlnaHRBbmRCb3R0b206by5jb25jYXQobCkuY29uY2F0KGEpLmNvbmNhdChyKSxjaGFydEFyZWE6SGUoZSxcImNoYXJ0QXJlYVwiKSx2ZXJ0aWNhbDpuLmNvbmNhdChvKS5jb25jYXQobCksaG9yaXpvbnRhbDpzLmNvbmNhdChhKS5jb25jYXQocil9fSh0LmJveGVzKSxsPXIudmVydGljYWwsYz1yLmhvcml6b250YWw7Sih0LmJveGVzLCh0PT57XCJmdW5jdGlvblwiPT10eXBlb2YgdC5iZWZvcmVMYXlvdXQmJnQuYmVmb3JlTGF5b3V0KCl9KSk7Y29uc3QgaD1sLnJlZHVjZSgoKHQsZSk9PmUuYm94Lm9wdGlvbnMmJiExPT09ZS5ib3gub3B0aW9ucy5kaXNwbGF5P3Q6dCsxKSwwKXx8MSxkPU9iamVjdC5mcmVlemUoe291dGVyV2lkdGg6ZSxvdXRlckhlaWdodDppLHBhZGRpbmc6byxhdmFpbGFibGVXaWR0aDpzLGF2YWlsYWJsZUhlaWdodDphLHZCb3hNYXhXaWR0aDpzLzIvaCxoQm94TWF4SGVpZ2h0OmEvMn0pLHU9T2JqZWN0LmFzc2lnbih7fSxvKTtVZSh1LEZlKG4pKTtjb25zdCBmPU9iamVjdC5hc3NpZ24oe21heFBhZGRpbmc6dSx3OnMsaDphLHg6by5sZWZ0LHk6by50b3B9LG8pOyFmdW5jdGlvbih0LGUpe2xldCBpLG4sbztmb3IoaT0wLG49dC5sZW5ndGg7aTxuOysraSlvPXRbaV0sby5ob3Jpem9udGFsPyhvLndpZHRoPW8uYm94LmZ1bGxTaXplJiZlLmF2YWlsYWJsZVdpZHRoLG8uaGVpZ2h0PWUuaEJveE1heEhlaWdodCk6KG8ud2lkdGg9ZS52Qm94TWF4V2lkdGgsby5oZWlnaHQ9by5ib3guZnVsbFNpemUmJmUuYXZhaWxhYmxlSGVpZ2h0KX0obC5jb25jYXQoYyksZCksS2Uoci5mdWxsU2l6ZSxmLGQpLEtlKGwsZixkKSxLZShjLGYsZCkmJktlKGwsZixkKSxmdW5jdGlvbih0KXtjb25zdCBlPXQubWF4UGFkZGluZztmdW5jdGlvbiBpKGkpe2NvbnN0IG49TWF0aC5tYXgoZVtpXS10W2ldLDApO3JldHVybiB0W2ldKz1uLG59dC55Kz1pKFwidG9wXCIpLHQueCs9aShcImxlZnRcIiksaShcInJpZ2h0XCIpLGkoXCJib3R0b21cIil9KGYpLEdlKHIubGVmdEFuZFRvcCxmLGQpLGYueCs9Zi53LGYueSs9Zi5oLEdlKHIucmlnaHRBbmRCb3R0b20sZixkKSx0LmNoYXJ0QXJlYT17bGVmdDpmLmxlZnQsdG9wOmYudG9wLHJpZ2h0OmYubGVmdCtmLncsYm90dG9tOmYudG9wK2YuaCxoZWlnaHQ6Zi5oLHdpZHRoOmYud30sSihyLmNoYXJ0QXJlYSwoZT0+e2NvbnN0IGk9ZS5ib3g7T2JqZWN0LmFzc2lnbihpLHQuY2hhcnRBcmVhKSxpLnVwZGF0ZShmLncsZi5oKX0pKX19O2NsYXNzIFFle2FjcXVpcmVDb250ZXh0KHQsZSl7fXJlbGVhc2VDb250ZXh0KHQpe3JldHVybiExfWFkZEV2ZW50TGlzdGVuZXIodCxlLGkpe31yZW1vdmVFdmVudExpc3RlbmVyKHQsZSxpKXt9Z2V0RGV2aWNlUGl4ZWxSYXRpbygpe3JldHVybiAxfWdldE1heGltdW1TaXplKHQsZSxpLG4pe3JldHVybiBlPU1hdGgubWF4KDAsZXx8dC53aWR0aCksaT1pfHx0LmhlaWdodCx7d2lkdGg6ZSxoZWlnaHQ6TWF0aC5tYXgoMCxuP01hdGguZmxvb3IoZS9uKTppKX19aXNBdHRhY2hlZCh0KXtyZXR1cm4hMH19Y2xhc3MgSmUgZXh0ZW5kcyBRZXthY3F1aXJlQ29udGV4dCh0KXtyZXR1cm4gdCYmdC5nZXRDb250ZXh0JiZ0LmdldENvbnRleHQoXCIyZFwiKXx8bnVsbH19Y29uc3QgdGk9e3RvdWNoc3RhcnQ6XCJtb3VzZWRvd25cIix0b3VjaG1vdmU6XCJtb3VzZW1vdmVcIix0b3VjaGVuZDpcIm1vdXNldXBcIixwb2ludGVyZW50ZXI6XCJtb3VzZWVudGVyXCIscG9pbnRlcmRvd246XCJtb3VzZWRvd25cIixwb2ludGVybW92ZTpcIm1vdXNlbW92ZVwiLHBvaW50ZXJ1cDpcIm1vdXNldXBcIixwb2ludGVybGVhdmU6XCJtb3VzZW91dFwiLHBvaW50ZXJvdXQ6XCJtb3VzZW91dFwifSxlaT10PT5udWxsPT09dHx8XCJcIj09PXQ7Y29uc3QgaWk9ISF3ZSYme3Bhc3NpdmU6ITB9O2Z1bmN0aW9uIG5pKHQsZSxpKXt0LmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKGUsaSxpaSl9ZnVuY3Rpb24gb2kodCxlLGkpe2NvbnN0IG49dC5jYW52YXMsbz1uJiZ1ZShuKXx8bixzPW5ldyBNdXRhdGlvbk9ic2VydmVyKCh0PT57Y29uc3QgZT11ZShvKTt0LmZvckVhY2goKHQ9Pntmb3IobGV0IG49MDtuPHQuYWRkZWROb2Rlcy5sZW5ndGg7bisrKXtjb25zdCBzPXQuYWRkZWROb2Rlc1tuXTtzIT09byYmcyE9PWV8fGkodC50YXJnZXQpfX0pKX0pKTtyZXR1cm4gcy5vYnNlcnZlKGRvY3VtZW50LHtjaGlsZExpc3Q6ITAsc3VidHJlZTohMH0pLHN9ZnVuY3Rpb24gc2kodCxlLGkpe2NvbnN0IG49dC5jYW52YXMsbz1uJiZ1ZShuKTtpZighbylyZXR1cm47Y29uc3Qgcz1uZXcgTXV0YXRpb25PYnNlcnZlcigodD0+e3QuZm9yRWFjaCgodD0+e2ZvcihsZXQgZT0wO2U8dC5yZW1vdmVkTm9kZXMubGVuZ3RoO2UrKylpZih0LnJlbW92ZWROb2Rlc1tlXT09PW4pe2koKTticmVha319KSl9KSk7cmV0dXJuIHMub2JzZXJ2ZShvLHtjaGlsZExpc3Q6ITB9KSxzfWNvbnN0IGFpPW5ldyBNYXA7bGV0IHJpPTA7ZnVuY3Rpb24gbGkoKXtjb25zdCB0PXdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO3QhPT1yaSYmKHJpPXQsYWkuZm9yRWFjaCgoKGUsaSk9PntpLmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvIT09dCYmZSgpfSkpKX1mdW5jdGlvbiBjaSh0LGksbil7Y29uc3Qgbz10LmNhbnZhcyxzPW8mJnVlKG8pO2lmKCFzKXJldHVybjtjb25zdCBhPWUoKCh0LGUpPT57Y29uc3QgaT1zLmNsaWVudFdpZHRoO24odCxlKSxpPHMuY2xpZW50V2lkdGgmJm4oKX0pLHdpbmRvdykscj1uZXcgUmVzaXplT2JzZXJ2ZXIoKHQ9Pntjb25zdCBlPXRbMF0saT1lLmNvbnRlbnRSZWN0LndpZHRoLG49ZS5jb250ZW50UmVjdC5oZWlnaHQ7MD09PWkmJjA9PT1ufHxhKGksbil9KSk7cmV0dXJuIHIub2JzZXJ2ZShzKSxmdW5jdGlvbih0LGUpe2FpLnNpemV8fHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsbGkpLGFpLnNldCh0LGUpfSh0LGEpLHJ9ZnVuY3Rpb24gaGkodCxlLGkpe2kmJmkuZGlzY29ubmVjdCgpLFwicmVzaXplXCI9PT1lJiZmdW5jdGlvbih0KXthaS5kZWxldGUodCksYWkuc2l6ZXx8d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixsaSl9KHQpfWZ1bmN0aW9uIGRpKHQsaSxuKXtjb25zdCBvPXQuY2FudmFzLHM9ZSgoZT0+e251bGwhPT10LmN0eCYmbihmdW5jdGlvbih0LGUpe2NvbnN0IGk9dGlbdC50eXBlXXx8dC50eXBlLHt4Om4seTpvfT1iZSh0LGUpO3JldHVybnt0eXBlOmksY2hhcnQ6ZSxuYXRpdmU6dCx4OnZvaWQgMCE9PW4/bjpudWxsLHk6dm9pZCAwIT09bz9vOm51bGx9fShlLHQpKX0pLHQsKHQ9Pntjb25zdCBlPXRbMF07cmV0dXJuW2UsZS5vZmZzZXRYLGUub2Zmc2V0WV19KSk7cmV0dXJuIGZ1bmN0aW9uKHQsZSxpKXt0LmFkZEV2ZW50TGlzdGVuZXIoZSxpLGlpKX0obyxpLHMpLHN9Y2xhc3MgdWkgZXh0ZW5kcyBRZXthY3F1aXJlQ29udGV4dCh0LGUpe2NvbnN0IGk9dCYmdC5nZXRDb250ZXh0JiZ0LmdldENvbnRleHQoXCIyZFwiKTtyZXR1cm4gaSYmaS5jYW52YXM9PT10PyhmdW5jdGlvbih0LGUpe2NvbnN0IGk9dC5zdHlsZSxuPXQuZ2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIpLG89dC5nZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiKTtpZih0LiRjaGFydGpzPXtpbml0aWFsOntoZWlnaHQ6bix3aWR0aDpvLHN0eWxlOntkaXNwbGF5OmkuZGlzcGxheSxoZWlnaHQ6aS5oZWlnaHQsd2lkdGg6aS53aWR0aH19fSxpLmRpc3BsYXk9aS5kaXNwbGF5fHxcImJsb2NrXCIsaS5ib3hTaXppbmc9aS5ib3hTaXppbmd8fFwiYm9yZGVyLWJveFwiLGVpKG8pKXtjb25zdCBlPU1lKHQsXCJ3aWR0aFwiKTt2b2lkIDAhPT1lJiYodC53aWR0aD1lKX1pZihlaShuKSlpZihcIlwiPT09dC5zdHlsZS5oZWlnaHQpdC5oZWlnaHQ9dC53aWR0aC8oZXx8Mik7ZWxzZXtjb25zdCBlPU1lKHQsXCJoZWlnaHRcIik7dm9pZCAwIT09ZSYmKHQuaGVpZ2h0PWUpfX0odCxlKSxpKTpudWxsfXJlbGVhc2VDb250ZXh0KHQpe2NvbnN0IGU9dC5jYW52YXM7aWYoIWUuJGNoYXJ0anMpcmV0dXJuITE7Y29uc3QgaT1lLiRjaGFydGpzLmluaXRpYWw7W1wiaGVpZ2h0XCIsXCJ3aWR0aFwiXS5mb3JFYWNoKCh0PT57Y29uc3Qgbj1pW3RdOyQobik/ZS5yZW1vdmVBdHRyaWJ1dGUodCk6ZS5zZXRBdHRyaWJ1dGUodCxuKX0pKTtjb25zdCBuPWkuc3R5bGV8fHt9O3JldHVybiBPYmplY3Qua2V5cyhuKS5mb3JFYWNoKCh0PT57ZS5zdHlsZVt0XT1uW3RdfSkpLGUud2lkdGg9ZS53aWR0aCxkZWxldGUgZS4kY2hhcnRqcywhMH1hZGRFdmVudExpc3RlbmVyKHQsZSxpKXt0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxlKTtjb25zdCBuPXQuJHByb3hpZXN8fCh0LiRwcm94aWVzPXt9KSxvPXthdHRhY2g6b2ksZGV0YWNoOnNpLHJlc2l6ZTpjaX1bZV18fGRpO25bZV09byh0LGUsaSl9cmVtb3ZlRXZlbnRMaXN0ZW5lcih0LGUpe2NvbnN0IGk9dC4kcHJveGllc3x8KHQuJHByb3hpZXM9e30pLG49aVtlXTtpZighbilyZXR1cm47KHthdHRhY2g6aGksZGV0YWNoOmhpLHJlc2l6ZTpoaX1bZV18fG5pKSh0LGUsbiksaVtlXT12b2lkIDB9Z2V0RGV2aWNlUGl4ZWxSYXRpbygpe3JldHVybiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb31nZXRNYXhpbXVtU2l6ZSh0LGUsaSxuKXtyZXR1cm4geWUodCxlLGksbil9aXNBdHRhY2hlZCh0KXtjb25zdCBlPXVlKHQpO3JldHVybiEoIWV8fCF1ZShlKSl9fXZhciBmaT1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxCYXNlUGxhdGZvcm06UWUsQmFzaWNQbGF0Zm9ybTpKZSxEb21QbGF0Zm9ybTp1aX0pO2NvbnN0IGdpPXQ9PjA9PT10fHwxPT09dCxwaT0odCxlLGkpPT4tTWF0aC5wb3coMiwxMCoodC09MSkpKk1hdGguc2luKCh0LWUpKl90L2kpLG1pPSh0LGUsaSk9Pk1hdGgucG93KDIsLTEwKnQpKk1hdGguc2luKCh0LWUpKl90L2kpKzEseGk9e2xpbmVhcjp0PT50LGVhc2VJblF1YWQ6dD0+dCp0LGVhc2VPdXRRdWFkOnQ9Pi10Kih0LTIpLGVhc2VJbk91dFF1YWQ6dD0+KHQvPS41KTwxPy41KnQqdDotLjUqKC0tdCoodC0yKS0xKSxlYXNlSW5DdWJpYzp0PT50KnQqdCxlYXNlT3V0Q3ViaWM6dD0+KHQtPTEpKnQqdCsxLGVhc2VJbk91dEN1YmljOnQ9Pih0Lz0uNSk8MT8uNSp0KnQqdDouNSooKHQtPTIpKnQqdCsyKSxlYXNlSW5RdWFydDp0PT50KnQqdCp0LGVhc2VPdXRRdWFydDp0PT4tKCh0LT0xKSp0KnQqdC0xKSxlYXNlSW5PdXRRdWFydDp0PT4odC89LjUpPDE/LjUqdCp0KnQqdDotLjUqKCh0LT0yKSp0KnQqdC0yKSxlYXNlSW5RdWludDp0PT50KnQqdCp0KnQsZWFzZU91dFF1aW50OnQ9Pih0LT0xKSp0KnQqdCp0KzEsZWFzZUluT3V0UXVpbnQ6dD0+KHQvPS41KTwxPy41KnQqdCp0KnQqdDouNSooKHQtPTIpKnQqdCp0KnQrMiksZWFzZUluU2luZTp0PT4xLU1hdGguY29zKHQqTXQpLGVhc2VPdXRTaW5lOnQ9Pk1hdGguc2luKHQqTXQpLGVhc2VJbk91dFNpbmU6dD0+LS41KihNYXRoLmNvcyhidCp0KS0xKSxlYXNlSW5FeHBvOnQ9PjA9PT10PzA6TWF0aC5wb3coMiwxMCoodC0xKSksZWFzZU91dEV4cG86dD0+MT09PXQ/MToxLU1hdGgucG93KDIsLTEwKnQpLGVhc2VJbk91dEV4cG86dD0+Z2kodCk/dDp0PC41Py41Kk1hdGgucG93KDIsMTAqKDIqdC0xKSk6LjUqKDItTWF0aC5wb3coMiwtMTAqKDIqdC0xKSkpLGVhc2VJbkNpcmM6dD0+dD49MT90Oi0oTWF0aC5zcXJ0KDEtdCp0KS0xKSxlYXNlT3V0Q2lyYzp0PT5NYXRoLnNxcnQoMS0odC09MSkqdCksZWFzZUluT3V0Q2lyYzp0PT4odC89LjUpPDE/LS41KihNYXRoLnNxcnQoMS10KnQpLTEpOi41KihNYXRoLnNxcnQoMS0odC09MikqdCkrMSksZWFzZUluRWxhc3RpYzp0PT5naSh0KT90OnBpKHQsLjA3NSwuMyksZWFzZU91dEVsYXN0aWM6dD0+Z2kodCk/dDptaSh0LC4wNzUsLjMpLGVhc2VJbk91dEVsYXN0aWModCl7Y29uc3QgZT0uMTEyNTtyZXR1cm4gZ2kodCk/dDp0PC41Py41KnBpKDIqdCxlLC40NSk6LjUrLjUqbWkoMip0LTEsZSwuNDUpfSxlYXNlSW5CYWNrKHQpe2NvbnN0IGU9MS43MDE1ODtyZXR1cm4gdCp0KigoZSsxKSp0LWUpfSxlYXNlT3V0QmFjayh0KXtjb25zdCBlPTEuNzAxNTg7cmV0dXJuKHQtPTEpKnQqKChlKzEpKnQrZSkrMX0sZWFzZUluT3V0QmFjayh0KXtsZXQgZT0xLjcwMTU4O3JldHVybih0Lz0uNSk8MT90KnQqKCgxKyhlKj0xLjUyNSkpKnQtZSkqLjU6LjUqKCh0LT0yKSp0KigoMSsoZSo9MS41MjUpKSp0K2UpKzIpfSxlYXNlSW5Cb3VuY2U6dD0+MS14aS5lYXNlT3V0Qm91bmNlKDEtdCksZWFzZU91dEJvdW5jZSh0KXtjb25zdCBlPTcuNTYyNSxpPTIuNzU7cmV0dXJuIHQ8MS9pP2UqdCp0OnQ8Mi9pP2UqKHQtPTEuNS9pKSp0Ky43NTp0PDIuNS9pP2UqKHQtPTIuMjUvaSkqdCsuOTM3NTplKih0LT0yLjYyNS9pKSp0Ky45ODQzNzV9LGVhc2VJbk91dEJvdW5jZTp0PT50PC41Py41KnhpLmVhc2VJbkJvdW5jZSgyKnQpOi41KnhpLmVhc2VPdXRCb3VuY2UoMip0LTEpKy41fSxiaT1cInRyYW5zcGFyZW50XCIsX2k9e2Jvb2xlYW46KHQsZSxpKT0+aT4uNT9lOnQsY29sb3IodCxlLGkpe2NvbnN0IG49Vyh0fHxiaSksbz1uLnZhbGlkJiZXKGV8fGJpKTtyZXR1cm4gbyYmby52YWxpZD9vLm1peChuLGkpLmhleFN0cmluZygpOmV9LG51bWJlcjoodCxlLGkpPT50KyhlLXQpKml9O2NsYXNzIHlpe2NvbnN0cnVjdG9yKHQsZSxpLG4pe2NvbnN0IG89ZVtpXTtuPVZlKFt0LnRvLG4sbyx0LmZyb21dKTtjb25zdCBzPVZlKFt0LmZyb20sbyxuXSk7dGhpcy5fYWN0aXZlPSEwLHRoaXMuX2ZuPXQuZm58fF9pW3QudHlwZXx8dHlwZW9mIHNdLHRoaXMuX2Vhc2luZz14aVt0LmVhc2luZ118fHhpLmxpbmVhcix0aGlzLl9zdGFydD1NYXRoLmZsb29yKERhdGUubm93KCkrKHQuZGVsYXl8fDApKSx0aGlzLl9kdXJhdGlvbj10aGlzLl90b3RhbD1NYXRoLmZsb29yKHQuZHVyYXRpb24pLHRoaXMuX2xvb3A9ISF0Lmxvb3AsdGhpcy5fdGFyZ2V0PWUsdGhpcy5fcHJvcD1pLHRoaXMuX2Zyb209cyx0aGlzLl90bz1uLHRoaXMuX3Byb21pc2VzPXZvaWQgMH1hY3RpdmUoKXtyZXR1cm4gdGhpcy5fYWN0aXZlfXVwZGF0ZSh0LGUsaSl7Y29uc3Qgbj10aGlzO2lmKG4uX2FjdGl2ZSl7bi5fbm90aWZ5KCExKTtjb25zdCBvPW4uX3RhcmdldFtuLl9wcm9wXSxzPWktbi5fc3RhcnQsYT1uLl9kdXJhdGlvbi1zO24uX3N0YXJ0PWksbi5fZHVyYXRpb249TWF0aC5mbG9vcihNYXRoLm1heChhLHQuZHVyYXRpb24pKSxuLl90b3RhbCs9cyxuLl9sb29wPSEhdC5sb29wLG4uX3RvPVZlKFt0LnRvLGUsbyx0LmZyb21dKSxuLl9mcm9tPVZlKFt0LmZyb20sbyxlXSl9fWNhbmNlbCgpe2NvbnN0IHQ9dGhpczt0Ll9hY3RpdmUmJih0LnRpY2soRGF0ZS5ub3coKSksdC5fYWN0aXZlPSExLHQuX25vdGlmeSghMSkpfXRpY2sodCl7Y29uc3QgZT10aGlzLGk9dC1lLl9zdGFydCxuPWUuX2R1cmF0aW9uLG89ZS5fcHJvcCxzPWUuX2Zyb20sYT1lLl9sb29wLHI9ZS5fdG87bGV0IGw7aWYoZS5fYWN0aXZlPXMhPT1yJiYoYXx8aTxuKSwhZS5fYWN0aXZlKXJldHVybiBlLl90YXJnZXRbb109cix2b2lkIGUuX25vdGlmeSghMCk7aTwwP2UuX3RhcmdldFtvXT1zOihsPWkvbiUyLGw9YSYmbD4xPzItbDpsLGw9ZS5fZWFzaW5nKE1hdGgubWluKDEsTWF0aC5tYXgoMCxsKSkpLGUuX3RhcmdldFtvXT1lLl9mbihzLHIsbCkpfXdhaXQoKXtjb25zdCB0PXRoaXMuX3Byb21pc2VzfHwodGhpcy5fcHJvbWlzZXM9W10pO3JldHVybiBuZXcgUHJvbWlzZSgoKGUsaSk9Pnt0LnB1c2goe3JlczplLHJlajppfSl9KSl9X25vdGlmeSh0KXtjb25zdCBlPXQ/XCJyZXNcIjpcInJlalwiLGk9dGhpcy5fcHJvbWlzZXN8fFtdO2ZvcihsZXQgdD0wO3Q8aS5sZW5ndGg7dCsrKWlbdF1bZV0oKX19eHQuc2V0KFwiYW5pbWF0aW9uXCIse2RlbGF5OnZvaWQgMCxkdXJhdGlvbjoxZTMsZWFzaW5nOlwiZWFzZU91dFF1YXJ0XCIsZm46dm9pZCAwLGZyb206dm9pZCAwLGxvb3A6dm9pZCAwLHRvOnZvaWQgMCx0eXBlOnZvaWQgMH0pO2NvbnN0IHZpPU9iamVjdC5rZXlzKHh0LmFuaW1hdGlvbik7eHQuZGVzY3JpYmUoXCJhbmltYXRpb25cIix7X2ZhbGxiYWNrOiExLF9pbmRleGFibGU6ITEsX3NjcmlwdGFibGU6dD0+XCJvblByb2dyZXNzXCIhPT10JiZcIm9uQ29tcGxldGVcIiE9PXQmJlwiZm5cIiE9PXR9KSx4dC5zZXQoXCJhbmltYXRpb25zXCIse2NvbG9yczp7dHlwZTpcImNvbG9yXCIscHJvcGVydGllczpbXCJjb2xvclwiLFwiYm9yZGVyQ29sb3JcIixcImJhY2tncm91bmRDb2xvclwiXX0sbnVtYmVyczp7dHlwZTpcIm51bWJlclwiLHByb3BlcnRpZXM6W1wieFwiLFwieVwiLFwiYm9yZGVyV2lkdGhcIixcInJhZGl1c1wiLFwidGVuc2lvblwiXX19KSx4dC5kZXNjcmliZShcImFuaW1hdGlvbnNcIix7X2ZhbGxiYWNrOlwiYW5pbWF0aW9uXCJ9KSx4dC5zZXQoXCJ0cmFuc2l0aW9uc1wiLHthY3RpdmU6e2FuaW1hdGlvbjp7ZHVyYXRpb246NDAwfX0scmVzaXplOnthbmltYXRpb246e2R1cmF0aW9uOjB9fSxzaG93OnthbmltYXRpb25zOntjb2xvcnM6e2Zyb206XCJ0cmFuc3BhcmVudFwifSx2aXNpYmxlOnt0eXBlOlwiYm9vbGVhblwiLGR1cmF0aW9uOjB9fX0saGlkZTp7YW5pbWF0aW9uczp7Y29sb3JzOnt0bzpcInRyYW5zcGFyZW50XCJ9LHZpc2libGU6e3R5cGU6XCJib29sZWFuXCIsZWFzaW5nOlwibGluZWFyXCIsZm46dD0+MHx0fX19fSk7Y2xhc3Mgd2l7Y29uc3RydWN0b3IodCxlKXt0aGlzLl9jaGFydD10LHRoaXMuX3Byb3BlcnRpZXM9bmV3IE1hcCx0aGlzLmNvbmZpZ3VyZShlKX1jb25maWd1cmUodCl7aWYoIVUodCkpcmV0dXJuO2NvbnN0IGU9dGhpcy5fcHJvcGVydGllcztPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KS5mb3JFYWNoKChpPT57Y29uc3Qgbj10W2ldO2lmKCFVKG4pKXJldHVybjtjb25zdCBvPXt9O2Zvcihjb25zdCB0IG9mIHZpKW9bdF09blt0XTsoWShuLnByb3BlcnRpZXMpJiZuLnByb3BlcnRpZXN8fFtpXSkuZm9yRWFjaCgodD0+e3QhPT1pJiZlLmhhcyh0KXx8ZS5zZXQodCxvKX0pKX0pKX1fYW5pbWF0ZU9wdGlvbnModCxlKXtjb25zdCBpPWUub3B0aW9ucyxuPWZ1bmN0aW9uKHQsZSl7aWYoIWUpcmV0dXJuO2xldCBpPXQub3B0aW9ucztpZighaSlyZXR1cm4gdm9pZCh0Lm9wdGlvbnM9ZSk7aS4kc2hhcmVkJiYodC5vcHRpb25zPWk9T2JqZWN0LmFzc2lnbih7fSxpLHskc2hhcmVkOiExLCRhbmltYXRpb25zOnt9fSkpO3JldHVybiBpfSh0LGkpO2lmKCFuKXJldHVybltdO2NvbnN0IG89dGhpcy5fY3JlYXRlQW5pbWF0aW9ucyhuLGkpO3JldHVybiBpLiRzaGFyZWQmJmZ1bmN0aW9uKHQsZSl7Y29uc3QgaT1bXSxuPU9iamVjdC5rZXlzKGUpO2ZvcihsZXQgZT0wO2U8bi5sZW5ndGg7ZSsrKXtjb25zdCBvPXRbbltlXV07byYmby5hY3RpdmUoKSYmaS5wdXNoKG8ud2FpdCgpKX1yZXR1cm4gUHJvbWlzZS5hbGwoaSl9KHQub3B0aW9ucy4kYW5pbWF0aW9ucyxpKS50aGVuKCgoKT0+e3Qub3B0aW9ucz1pfSksKCgpPT57fSkpLG99X2NyZWF0ZUFuaW1hdGlvbnModCxlKXtjb25zdCBpPXRoaXMuX3Byb3BlcnRpZXMsbj1bXSxvPXQuJGFuaW1hdGlvbnN8fCh0LiRhbmltYXRpb25zPXt9KSxzPU9iamVjdC5rZXlzKGUpLGE9RGF0ZS5ub3coKTtsZXQgcjtmb3Iocj1zLmxlbmd0aC0xO3I+PTA7LS1yKXtjb25zdCBsPXNbcl07aWYoXCIkXCI9PT1sLmNoYXJBdCgwKSljb250aW51ZTtpZihcIm9wdGlvbnNcIj09PWwpe24ucHVzaCguLi50aGlzLl9hbmltYXRlT3B0aW9ucyh0LGUpKTtjb250aW51ZX1jb25zdCBjPWVbbF07bGV0IGg9b1tsXTtjb25zdCBkPWkuZ2V0KGwpO2lmKGgpe2lmKGQmJmguYWN0aXZlKCkpe2gudXBkYXRlKGQsYyxhKTtjb250aW51ZX1oLmNhbmNlbCgpfWQmJmQuZHVyYXRpb24/KG9bbF09aD1uZXcgeWkoZCx0LGwsYyksbi5wdXNoKGgpKTp0W2xdPWN9cmV0dXJuIG59dXBkYXRlKHQsZSl7aWYoMD09PXRoaXMuX3Byb3BlcnRpZXMuc2l6ZSlyZXR1cm4gdm9pZCBPYmplY3QuYXNzaWduKHQsZSk7Y29uc3QgaT10aGlzLl9jcmVhdGVBbmltYXRpb25zKHQsZSk7cmV0dXJuIGkubGVuZ3RoPyhhLmFkZCh0aGlzLl9jaGFydCxpKSwhMCk6dm9pZCAwfX1mdW5jdGlvbiBNaSh0LGUpe2NvbnN0IGk9dCYmdC5vcHRpb25zfHx7fSxuPWkucmV2ZXJzZSxvPXZvaWQgMD09PWkubWluP2U6MCxzPXZvaWQgMD09PWkubWF4P2U6MDtyZXR1cm57c3RhcnQ6bj9zOm8sZW5kOm4/bzpzfX1mdW5jdGlvbiBraSh0LGUpe2NvbnN0IGk9W10sbj10Ll9nZXRTb3J0ZWREYXRhc2V0TWV0YXMoZSk7bGV0IG8scztmb3Iobz0wLHM9bi5sZW5ndGg7bzxzOysrbylpLnB1c2gobltvXS5pbmRleCk7cmV0dXJuIGl9ZnVuY3Rpb24gU2kodCxlLGksbil7Y29uc3Qgbz10LmtleXMscz1cInNpbmdsZVwiPT09bi5tb2RlO2xldCBhLHIsbCxjO2lmKG51bGwhPT1lKXtmb3IoYT0wLHI9by5sZW5ndGg7YTxyOysrYSl7aWYobD0rb1thXSxsPT09aSl7aWYobi5hbGwpY29udGludWU7YnJlYWt9Yz10LnZhbHVlc1tsXSxYKGMpJiYoc3x8MD09PWV8fER0KGUpPT09RHQoYykpJiYoZSs9Yyl9cmV0dXJuIGV9fWZ1bmN0aW9uIFBpKHQsZSl7Y29uc3QgaT10JiZ0Lm9wdGlvbnMuc3RhY2tlZDtyZXR1cm4gaXx8dm9pZCAwPT09aSYmdm9pZCAwIT09ZS5zdGFja31mdW5jdGlvbiBEaSh0LGUsaSl7Y29uc3Qgbj10W2VdfHwodFtlXT17fSk7cmV0dXJuIG5baV18fChuW2ldPXt9KX1mdW5jdGlvbiBDaSh0LGUsaSl7Zm9yKGNvbnN0IG4gb2YgZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyhcImJhclwiKS5yZXZlcnNlKCkpe2NvbnN0IGU9dFtuLmluZGV4XTtpZihpJiZlPjB8fCFpJiZlPDApcmV0dXJuIG4uaW5kZXh9cmV0dXJuIG51bGx9ZnVuY3Rpb24gT2kodCxlKXtjb25zdHtjaGFydDppLF9jYWNoZWRNZXRhOm59PXQsbz1pLl9zdGFja3N8fChpLl9zdGFja3M9e30pLHtpU2NhbGU6cyx2U2NhbGU6YSxpbmRleDpyfT1uLGw9cy5heGlzLGM9YS5heGlzLGg9ZnVuY3Rpb24odCxlLGkpe3JldHVybmAke3QuaWR9LiR7ZS5pZH0uJHtpLnN0YWNrfHxpLnR5cGV9YH0ocyxhLG4pLGQ9ZS5sZW5ndGg7bGV0IHU7Zm9yKGxldCB0PTA7dDxkOysrdCl7Y29uc3QgaT1lW3RdLHtbbF06bixbY106c309aTt1PShpLl9zdGFja3N8fChpLl9zdGFja3M9e30pKVtjXT1EaShvLGgsbiksdVtyXT1zLHUuX3RvcD1DaSh1LGEsITApLHUuX2JvdHRvbT1DaSh1LGEsITEpfX1mdW5jdGlvbiBUaSh0LGUpe2NvbnN0IGk9dC5zY2FsZXM7cmV0dXJuIE9iamVjdC5rZXlzKGkpLmZpbHRlcigodD0+aVt0XS5heGlzPT09ZSkpLnNoaWZ0KCl9ZnVuY3Rpb24gQWkodCxlKXtjb25zdCBpPXQudlNjYWxlJiZ0LnZTY2FsZS5heGlzO2lmKGkpe2U9ZXx8dC5fcGFyc2VkO2Zvcihjb25zdCBuIG9mIGUpe2NvbnN0IGU9bi5fc3RhY2tzO2lmKCFlfHx2b2lkIDA9PT1lW2ldfHx2b2lkIDA9PT1lW2ldW3QuaW5kZXhdKXJldHVybjtkZWxldGUgZVtpXVt0LmluZGV4XX19fWNvbnN0IExpPXQ9PlwicmVzZXRcIj09PXR8fFwibm9uZVwiPT09dCxSaT0odCxlKT0+ZT90Ok9iamVjdC5hc3NpZ24oe30sdCk7Y2xhc3MgRWl7Y29uc3RydWN0b3IodCxlKXt0aGlzLmNoYXJ0PXQsdGhpcy5fY3R4PXQuY3R4LHRoaXMuaW5kZXg9ZSx0aGlzLl9jYWNoZWREYXRhT3B0cz17fSx0aGlzLl9jYWNoZWRNZXRhPXRoaXMuZ2V0TWV0YSgpLHRoaXMuX3R5cGU9dGhpcy5fY2FjaGVkTWV0YS50eXBlLHRoaXMub3B0aW9ucz12b2lkIDAsdGhpcy5fcGFyc2luZz0hMSx0aGlzLl9kYXRhPXZvaWQgMCx0aGlzLl9vYmplY3REYXRhPXZvaWQgMCx0aGlzLl9zaGFyZWRPcHRpb25zPXZvaWQgMCx0aGlzLl9kcmF3U3RhcnQ9dm9pZCAwLHRoaXMuX2RyYXdDb3VudD12b2lkIDAsdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nPSExLHRoaXMuJGNvbnRleHQ9dm9pZCAwLHRoaXMuX3N5bmNMaXN0PVtdLHRoaXMuaW5pdGlhbGl6ZSgpfWluaXRpYWxpemUoKXtjb25zdCB0PXRoaXMsZT10Ll9jYWNoZWRNZXRhO3QuY29uZmlndXJlKCksdC5saW5rU2NhbGVzKCksZS5fc3RhY2tlZD1QaShlLnZTY2FsZSxlKSx0LmFkZEVsZW1lbnRzKCl9dXBkYXRlSW5kZXgodCl7dGhpcy5pbmRleCE9PXQmJkFpKHRoaXMuX2NhY2hlZE1ldGEpLHRoaXMuaW5kZXg9dH1saW5rU2NhbGVzKCl7Y29uc3QgdD10aGlzLGU9dC5jaGFydCxpPXQuX2NhY2hlZE1ldGEsbj10LmdldERhdGFzZXQoKSxvPSh0LGUsaSxuKT0+XCJ4XCI9PT10P2U6XCJyXCI9PT10P246aSxzPWkueEF4aXNJRD1LKG4ueEF4aXNJRCxUaShlLFwieFwiKSksYT1pLnlBeGlzSUQ9SyhuLnlBeGlzSUQsVGkoZSxcInlcIikpLHI9aS5yQXhpc0lEPUsobi5yQXhpc0lELFRpKGUsXCJyXCIpKSxsPWkuaW5kZXhBeGlzLGM9aS5pQXhpc0lEPW8obCxzLGEsciksaD1pLnZBeGlzSUQ9byhsLGEscyxyKTtpLnhTY2FsZT10LmdldFNjYWxlRm9ySWQocyksaS55U2NhbGU9dC5nZXRTY2FsZUZvcklkKGEpLGkuclNjYWxlPXQuZ2V0U2NhbGVGb3JJZChyKSxpLmlTY2FsZT10LmdldFNjYWxlRm9ySWQoYyksaS52U2NhbGU9dC5nZXRTY2FsZUZvcklkKGgpfWdldERhdGFzZXQoKXtyZXR1cm4gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW3RoaXMuaW5kZXhdfWdldE1ldGEoKXtyZXR1cm4gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YSh0aGlzLmluZGV4KX1nZXRTY2FsZUZvcklkKHQpe3JldHVybiB0aGlzLmNoYXJ0LnNjYWxlc1t0XX1fZ2V0T3RoZXJTY2FsZSh0KXtjb25zdCBlPXRoaXMuX2NhY2hlZE1ldGE7cmV0dXJuIHQ9PT1lLmlTY2FsZT9lLnZTY2FsZTplLmlTY2FsZX1yZXNldCgpe3RoaXMuX3VwZGF0ZShcInJlc2V0XCIpfV9kZXN0cm95KCl7Y29uc3QgdD10aGlzLl9jYWNoZWRNZXRhO3RoaXMuX2RhdGEmJmhlKHRoaXMuX2RhdGEsdGhpcyksdC5fc3RhY2tlZCYmQWkodCl9X2RhdGFDaGVjaygpe2NvbnN0IHQ9dGhpcyxlPXQuZ2V0RGF0YXNldCgpLGk9ZS5kYXRhfHwoZS5kYXRhPVtdKSxuPXQuX2RhdGE7aWYoVShpKSl0Ll9kYXRhPWZ1bmN0aW9uKHQpe2NvbnN0IGU9T2JqZWN0LmtleXModCksaT1uZXcgQXJyYXkoZS5sZW5ndGgpO2xldCBuLG8scztmb3Iobj0wLG89ZS5sZW5ndGg7bjxvOysrbilzPWVbbl0saVtuXT17eDpzLHk6dFtzXX07cmV0dXJuIGl9KGkpO2Vsc2UgaWYobiE9PWkpe2lmKG4pe2hlKG4sdCk7Y29uc3QgZT10Ll9jYWNoZWRNZXRhO0FpKGUpLGUuX3BhcnNlZD1bXX1pJiZPYmplY3QuaXNFeHRlbnNpYmxlKGkpJiZjZShpLHQpLHQuX3N5bmNMaXN0PVtdLHQuX2RhdGE9aX19YWRkRWxlbWVudHMoKXtjb25zdCB0PXRoaXMsZT10Ll9jYWNoZWRNZXRhO3QuX2RhdGFDaGVjaygpLHQuZGF0YXNldEVsZW1lbnRUeXBlJiYoZS5kYXRhc2V0PW5ldyB0LmRhdGFzZXRFbGVtZW50VHlwZSl9YnVpbGRPclVwZGF0ZUVsZW1lbnRzKHQpe2NvbnN0IGU9dGhpcyxpPWUuX2NhY2hlZE1ldGEsbj1lLmdldERhdGFzZXQoKTtsZXQgbz0hMTtlLl9kYXRhQ2hlY2soKTtjb25zdCBzPWkuX3N0YWNrZWQ7aS5fc3RhY2tlZD1QaShpLnZTY2FsZSxpKSxpLnN0YWNrIT09bi5zdGFjayYmKG89ITAsQWkoaSksaS5zdGFjaz1uLnN0YWNrKSxlLl9yZXN5bmNFbGVtZW50cyh0KSwob3x8cyE9PWkuX3N0YWNrZWQpJiZPaShlLGkuX3BhcnNlZCl9Y29uZmlndXJlKCl7Y29uc3QgdD10aGlzLGU9dC5jaGFydC5jb25maWcsaT1lLmRhdGFzZXRTY29wZUtleXModC5fdHlwZSksbj1lLmdldE9wdGlvblNjb3Blcyh0LmdldERhdGFzZXQoKSxpLCEwKTt0Lm9wdGlvbnM9ZS5jcmVhdGVSZXNvbHZlcihuLHQuZ2V0Q29udGV4dCgpKSx0Ll9wYXJzaW5nPXQub3B0aW9ucy5wYXJzaW5nfXBhcnNlKHQsZSl7Y29uc3QgaT10aGlzLHtfY2FjaGVkTWV0YTpuLF9kYXRhOm99PWkse2lTY2FsZTpzLF9zdGFja2VkOmF9PW4scj1zLmF4aXM7bGV0IGwsYyxoLGQ9MD09PXQmJmU9PT1vLmxlbmd0aHx8bi5fc29ydGVkLHU9dD4wJiZuLl9wYXJzZWRbdC0xXTtpZighMT09PWkuX3BhcnNpbmcpbi5fcGFyc2VkPW8sbi5fc29ydGVkPSEwLGg9bztlbHNle2g9WShvW3RdKT9pLnBhcnNlQXJyYXlEYXRhKG4sbyx0LGUpOlUob1t0XSk/aS5wYXJzZU9iamVjdERhdGEobixvLHQsZSk6aS5wYXJzZVByaW1pdGl2ZURhdGEobixvLHQsZSk7Y29uc3Qgcz0oKT0+bnVsbD09PWNbcl18fHUmJmNbcl08dVtyXTtmb3IobD0wO2w8ZTsrK2wpbi5fcGFyc2VkW2wrdF09Yz1oW2xdLGQmJihzKCkmJihkPSExKSx1PWMpO24uX3NvcnRlZD1kfWEmJk9pKGksaCl9cGFyc2VQcmltaXRpdmVEYXRhKHQsZSxpLG4pe2NvbnN0e2lTY2FsZTpvLHZTY2FsZTpzfT10LGE9by5heGlzLHI9cy5heGlzLGw9by5nZXRMYWJlbHMoKSxjPW89PT1zLGg9bmV3IEFycmF5KG4pO2xldCBkLHUsZjtmb3IoZD0wLHU9bjtkPHU7KytkKWY9ZCtpLGhbZF09e1thXTpjfHxvLnBhcnNlKGxbZl0sZiksW3JdOnMucGFyc2UoZVtmXSxmKX07cmV0dXJuIGh9cGFyc2VBcnJheURhdGEodCxlLGksbil7Y29uc3R7eFNjYWxlOm8seVNjYWxlOnN9PXQsYT1uZXcgQXJyYXkobik7bGV0IHIsbCxjLGg7Zm9yKHI9MCxsPW47cjxsOysrciljPXIraSxoPWVbY10sYVtyXT17eDpvLnBhcnNlKGhbMF0sYykseTpzLnBhcnNlKGhbMV0sYyl9O3JldHVybiBhfXBhcnNlT2JqZWN0RGF0YSh0LGUsaSxuKXtjb25zdHt4U2NhbGU6byx5U2NhbGU6c309dCx7eEF4aXNLZXk6YT1cInhcIix5QXhpc0tleTpyPVwieVwifT10aGlzLl9wYXJzaW5nLGw9bmV3IEFycmF5KG4pO2xldCBjLGgsZCx1O2ZvcihjPTAsaD1uO2M8aDsrK2MpZD1jK2ksdT1lW2RdLGxbY109e3g6by5wYXJzZShsdCh1LGEpLGQpLHk6cy5wYXJzZShsdCh1LHIpLGQpfTtyZXR1cm4gbH1nZXRQYXJzZWQodCl7cmV0dXJuIHRoaXMuX2NhY2hlZE1ldGEuX3BhcnNlZFt0XX1nZXREYXRhRWxlbWVudCh0KXtyZXR1cm4gdGhpcy5fY2FjaGVkTWV0YS5kYXRhW3RdfWFwcGx5U3RhY2sodCxlLGkpe2NvbnN0IG49dGhpcy5jaGFydCxvPXRoaXMuX2NhY2hlZE1ldGEscz1lW3QuYXhpc107cmV0dXJuIFNpKHtrZXlzOmtpKG4sITApLHZhbHVlczplLl9zdGFja3NbdC5heGlzXX0scyxvLmluZGV4LHttb2RlOml9KX11cGRhdGVSYW5nZUZyb21QYXJzZWQodCxlLGksbil7Y29uc3Qgbz1pW2UuYXhpc107bGV0IHM9bnVsbD09PW8/TmFOOm87Y29uc3QgYT1uJiZpLl9zdGFja3NbZS5heGlzXTtuJiZhJiYobi52YWx1ZXM9YSx0Lm1pbj1NYXRoLm1pbih0Lm1pbixzKSx0Lm1heD1NYXRoLm1heCh0Lm1heCxzKSxzPVNpKG4sbyx0aGlzLl9jYWNoZWRNZXRhLmluZGV4LHthbGw6ITB9KSksdC5taW49TWF0aC5taW4odC5taW4scyksdC5tYXg9TWF0aC5tYXgodC5tYXgscyl9Z2V0TWluTWF4KHQsZSl7Y29uc3QgaT10aGlzLG49aS5fY2FjaGVkTWV0YSxvPW4uX3BhcnNlZCxzPW4uX3NvcnRlZCYmdD09PW4uaVNjYWxlLGE9by5sZW5ndGgscj1pLl9nZXRPdGhlclNjYWxlKHQpLGw9ZSYmbi5fc3RhY2tlZCYme2tleXM6a2koaS5jaGFydCwhMCksdmFsdWVzOm51bGx9LGM9e21pbjpOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksbWF4Ok51bWJlci5ORUdBVElWRV9JTkZJTklUWX0se21pbjpoLG1heDpkfT1mdW5jdGlvbih0KXtjb25zdHttaW46ZSxtYXg6aSxtaW5EZWZpbmVkOm4sbWF4RGVmaW5lZDpvfT10LmdldFVzZXJCb3VuZHMoKTtyZXR1cm57bWluOm4/ZTpOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksbWF4Om8/aTpOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFl9fShyKTtsZXQgdSxmLGcscDtmdW5jdGlvbiBtKCl7cmV0dXJuIGc9b1t1XSxmPWdbdC5heGlzXSxwPWdbci5heGlzXSwhWChmKXx8aD5wfHxkPHB9Zm9yKHU9MDt1PGEmJihtKCl8fChpLnVwZGF0ZVJhbmdlRnJvbVBhcnNlZChjLHQsZyxsKSwhcykpOysrdSk7aWYocylmb3IodT1hLTE7dT49MDstLXUpaWYoIW0oKSl7aS51cGRhdGVSYW5nZUZyb21QYXJzZWQoYyx0LGcsbCk7YnJlYWt9cmV0dXJuIGN9Z2V0QWxsUGFyc2VkVmFsdWVzKHQpe2NvbnN0IGU9dGhpcy5fY2FjaGVkTWV0YS5fcGFyc2VkLGk9W107bGV0IG4sbyxzO2ZvcihuPTAsbz1lLmxlbmd0aDtuPG87KytuKXM9ZVtuXVt0LmF4aXNdLFgocykmJmkucHVzaChzKTtyZXR1cm4gaX1nZXRNYXhPdmVyZmxvdygpe3JldHVybiExfWdldExhYmVsQW5kVmFsdWUodCl7Y29uc3QgZT10aGlzLl9jYWNoZWRNZXRhLGk9ZS5pU2NhbGUsbj1lLnZTY2FsZSxvPXRoaXMuZ2V0UGFyc2VkKHQpO3JldHVybntsYWJlbDppP1wiXCIraS5nZXRMYWJlbEZvclZhbHVlKG9baS5heGlzXSk6XCJcIix2YWx1ZTpuP1wiXCIrbi5nZXRMYWJlbEZvclZhbHVlKG9bbi5heGlzXSk6XCJcIn19X3VwZGF0ZSh0KXtjb25zdCBlPXRoaXMsaT1lLl9jYWNoZWRNZXRhO2UuY29uZmlndXJlKCksZS5fY2FjaGVkRGF0YU9wdHM9e30sZS51cGRhdGUodHx8XCJkZWZhdWx0XCIpLGkuX2NsaXA9ZnVuY3Rpb24odCl7bGV0IGUsaSxuLG87cmV0dXJuIFUodCk/KGU9dC50b3AsaT10LnJpZ2h0LG49dC5ib3R0b20sbz10LmxlZnQpOmU9aT1uPW89dCx7dG9wOmUscmlnaHQ6aSxib3R0b206bixsZWZ0Om8sZGlzYWJsZWQ6ITE9PT10fX0oSyhlLm9wdGlvbnMuY2xpcCxmdW5jdGlvbih0LGUsaSl7aWYoITE9PT1pKXJldHVybiExO2NvbnN0IG49TWkodCxpKSxvPU1pKGUsaSk7cmV0dXJue3RvcDpvLmVuZCxyaWdodDpuLmVuZCxib3R0b206by5zdGFydCxsZWZ0Om4uc3RhcnR9fShpLnhTY2FsZSxpLnlTY2FsZSxlLmdldE1heE92ZXJmbG93KCkpKSl9dXBkYXRlKHQpe31kcmF3KCl7Y29uc3QgdD10aGlzLGU9dC5fY3R4LGk9dC5jaGFydCxuPXQuX2NhY2hlZE1ldGEsbz1uLmRhdGF8fFtdLHM9aS5jaGFydEFyZWEsYT1bXSxyPXQuX2RyYXdTdGFydHx8MCxsPXQuX2RyYXdDb3VudHx8by5sZW5ndGgtcjtsZXQgYztmb3Iobi5kYXRhc2V0JiZuLmRhdGFzZXQuZHJhdyhlLHMscixsKSxjPXI7YzxyK2w7KytjKXtjb25zdCB0PW9bY107dC5hY3RpdmU/YS5wdXNoKHQpOnQuZHJhdyhlLHMpfWZvcihjPTA7YzxhLmxlbmd0aDsrK2MpYVtjXS5kcmF3KGUscyl9Z2V0U3R5bGUodCxlKXtjb25zdCBpPWU/XCJhY3RpdmVcIjpcImRlZmF1bHRcIjtyZXR1cm4gdm9pZCAwPT09dCYmdGhpcy5fY2FjaGVkTWV0YS5kYXRhc2V0P3RoaXMucmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhpKTp0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnModHx8MCxpKX1nZXRDb250ZXh0KHQsZSxpKXtjb25zdCBuPXRoaXMsbz1uLmdldERhdGFzZXQoKTtsZXQgcztpZih0Pj0wJiZ0PG4uX2NhY2hlZE1ldGEuZGF0YS5sZW5ndGgpe2NvbnN0IGU9bi5fY2FjaGVkTWV0YS5kYXRhW3RdO3M9ZS4kY29udGV4dHx8KGUuJGNvbnRleHQ9ZnVuY3Rpb24odCxlLGkpe3JldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUodCkse2FjdGl2ZTohMSxkYXRhSW5kZXg6ZSxwYXJzZWQ6dm9pZCAwLHJhdzp2b2lkIDAsZWxlbWVudDppLGluZGV4OmUsbW9kZTpcImRlZmF1bHRcIix0eXBlOlwiZGF0YVwifSl9KG4uZ2V0Q29udGV4dCgpLHQsZSkpLHMucGFyc2VkPW4uZ2V0UGFyc2VkKHQpLHMucmF3PW8uZGF0YVt0XSxzLmluZGV4PXMuZGF0YUluZGV4PXR9ZWxzZSBzPW4uJGNvbnRleHR8fChuLiRjb250ZXh0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZSh0KSx7YWN0aXZlOiExLGRhdGFzZXQ6dm9pZCAwLGRhdGFzZXRJbmRleDplLGluZGV4OmUsbW9kZTpcImRlZmF1bHRcIix0eXBlOlwiZGF0YXNldFwifSl9KG4uY2hhcnQuZ2V0Q29udGV4dCgpLG4uaW5kZXgpKSxzLmRhdGFzZXQ9byxzLmluZGV4PXMuZGF0YXNldEluZGV4PW4uaW5kZXg7cmV0dXJuIHMuYWN0aXZlPSEhZSxzLm1vZGU9aSxzfXJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnModCl7cmV0dXJuIHRoaXMuX3Jlc29sdmVFbGVtZW50T3B0aW9ucyh0aGlzLmRhdGFzZXRFbGVtZW50VHlwZS5pZCx0KX1yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHQsZSl7cmV0dXJuIHRoaXMuX3Jlc29sdmVFbGVtZW50T3B0aW9ucyh0aGlzLmRhdGFFbGVtZW50VHlwZS5pZCxlLHQpfV9yZXNvbHZlRWxlbWVudE9wdGlvbnModCxlPVwiZGVmYXVsdFwiLGkpe2NvbnN0IG49dGhpcyxvPVwiYWN0aXZlXCI9PT1lLHM9bi5fY2FjaGVkRGF0YU9wdHMsYT10K1wiLVwiK2Uscj1zW2FdLGw9bi5lbmFibGVPcHRpb25TaGFyaW5nJiZodChpKTtpZihyKXJldHVybiBSaShyLGwpO2NvbnN0IGM9bi5jaGFydC5jb25maWcsaD1jLmRhdGFzZXRFbGVtZW50U2NvcGVLZXlzKG4uX3R5cGUsdCksZD1vP1tgJHt0fUhvdmVyYCxcImhvdmVyXCIsdCxcIlwiXTpbdCxcIlwiXSx1PWMuZ2V0T3B0aW9uU2NvcGVzKG4uZ2V0RGF0YXNldCgpLGgpLGY9T2JqZWN0LmtleXMoeHQuZWxlbWVudHNbdF0pLGc9Yy5yZXNvbHZlTmFtZWRPcHRpb25zKHUsZiwoKCk9Pm4uZ2V0Q29udGV4dChpLG8pKSxkKTtyZXR1cm4gZy4kc2hhcmVkJiYoZy4kc2hhcmVkPWwsc1thXT1PYmplY3QuZnJlZXplKFJpKGcsbCkpKSxnfV9yZXNvbHZlQW5pbWF0aW9ucyh0LGUsaSl7Y29uc3Qgbj10aGlzLG89bi5jaGFydCxzPW4uX2NhY2hlZERhdGFPcHRzLGE9YGFuaW1hdGlvbi0ke2V9YCxyPXNbYV07aWYocilyZXR1cm4gcjtsZXQgbDtpZighMSE9PW8ub3B0aW9ucy5hbmltYXRpb24pe2NvbnN0IG89bi5jaGFydC5jb25maWcscz1vLmRhdGFzZXRBbmltYXRpb25TY29wZUtleXMobi5fdHlwZSxlKSxhPW8uZ2V0T3B0aW9uU2NvcGVzKG4uZ2V0RGF0YXNldCgpLHMpO2w9by5jcmVhdGVSZXNvbHZlcihhLG4uZ2V0Q29udGV4dCh0LGksZSkpfWNvbnN0IGM9bmV3IHdpKG8sbCYmbC5hbmltYXRpb25zKTtyZXR1cm4gbCYmbC5fY2FjaGVhYmxlJiYoc1thXT1PYmplY3QuZnJlZXplKGMpKSxjfWdldFNoYXJlZE9wdGlvbnModCl7aWYodC4kc2hhcmVkKXJldHVybiB0aGlzLl9zaGFyZWRPcHRpb25zfHwodGhpcy5fc2hhcmVkT3B0aW9ucz1PYmplY3QuYXNzaWduKHt9LHQpKX1pbmNsdWRlT3B0aW9ucyh0LGUpe3JldHVybiFlfHxMaSh0KXx8dGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkfXVwZGF0ZUVsZW1lbnQodCxlLGksbil7TGkobik/T2JqZWN0LmFzc2lnbih0LGkpOnRoaXMuX3Jlc29sdmVBbmltYXRpb25zKGUsbikudXBkYXRlKHQsaSl9dXBkYXRlU2hhcmVkT3B0aW9ucyh0LGUsaSl7dCYmIUxpKGUpJiZ0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyh2b2lkIDAsZSkudXBkYXRlKHQsaSl9X3NldFN0eWxlKHQsZSxpLG4pe3QuYWN0aXZlPW47Y29uc3Qgbz10aGlzLmdldFN0eWxlKGUsbik7dGhpcy5fcmVzb2x2ZUFuaW1hdGlvbnMoZSxpLG4pLnVwZGF0ZSh0LHtvcHRpb25zOiFuJiZ0aGlzLmdldFNoYXJlZE9wdGlvbnMobyl8fG99KX1yZW1vdmVIb3ZlclN0eWxlKHQsZSxpKXt0aGlzLl9zZXRTdHlsZSh0LGksXCJhY3RpdmVcIiwhMSl9c2V0SG92ZXJTdHlsZSh0LGUsaSl7dGhpcy5fc2V0U3R5bGUodCxpLFwiYWN0aXZlXCIsITApfV9yZW1vdmVEYXRhc2V0SG92ZXJTdHlsZSgpe2NvbnN0IHQ9dGhpcy5fY2FjaGVkTWV0YS5kYXRhc2V0O3QmJnRoaXMuX3NldFN0eWxlKHQsdm9pZCAwLFwiYWN0aXZlXCIsITEpfV9zZXREYXRhc2V0SG92ZXJTdHlsZSgpe2NvbnN0IHQ9dGhpcy5fY2FjaGVkTWV0YS5kYXRhc2V0O3QmJnRoaXMuX3NldFN0eWxlKHQsdm9pZCAwLFwiYWN0aXZlXCIsITApfV9yZXN5bmNFbGVtZW50cyh0KXtjb25zdCBlPXRoaXMsaT1lLl9kYXRhLG49ZS5fY2FjaGVkTWV0YS5kYXRhO2Zvcihjb25zdFt0LGksbl1vZiBlLl9zeW5jTGlzdCllW3RdKGksbik7ZS5fc3luY0xpc3Q9W107Y29uc3Qgbz1uLmxlbmd0aCxzPWkubGVuZ3RoLGE9TWF0aC5taW4ocyxvKTthJiZlLnBhcnNlKDAsYSkscz5vP2UuX2luc2VydEVsZW1lbnRzKG8scy1vLHQpOnM8byYmZS5fcmVtb3ZlRWxlbWVudHMocyxvLXMpfV9pbnNlcnRFbGVtZW50cyh0LGUsaT0hMCl7Y29uc3Qgbj10aGlzLG89bi5fY2FjaGVkTWV0YSxzPW8uZGF0YSxhPXQrZTtsZXQgcjtjb25zdCBsPXQ9Pntmb3IodC5sZW5ndGgrPWUscj10Lmxlbmd0aC0xO3I+PWE7ci0tKXRbcl09dFtyLWVdfTtmb3IobChzKSxyPXQ7cjxhOysrcilzW3JdPW5ldyBuLmRhdGFFbGVtZW50VHlwZTtuLl9wYXJzaW5nJiZsKG8uX3BhcnNlZCksbi5wYXJzZSh0LGUpLGkmJm4udXBkYXRlRWxlbWVudHMocyx0LGUsXCJyZXNldFwiKX11cGRhdGVFbGVtZW50cyh0LGUsaSxuKXt9X3JlbW92ZUVsZW1lbnRzKHQsZSl7Y29uc3QgaT10aGlzLl9jYWNoZWRNZXRhO2lmKHRoaXMuX3BhcnNpbmcpe2NvbnN0IG49aS5fcGFyc2VkLnNwbGljZSh0LGUpO2kuX3N0YWNrZWQmJkFpKGksbil9aS5kYXRhLnNwbGljZSh0LGUpfV9vbkRhdGFQdXNoKCl7Y29uc3QgdD1hcmd1bWVudHMubGVuZ3RoO3RoaXMuX3N5bmNMaXN0LnB1c2goW1wiX2luc2VydEVsZW1lbnRzXCIsdGhpcy5nZXREYXRhc2V0KCkuZGF0YS5sZW5ndGgtdCx0XSl9X29uRGF0YVBvcCgpe3RoaXMuX3N5bmNMaXN0LnB1c2goW1wiX3JlbW92ZUVsZW1lbnRzXCIsdGhpcy5fY2FjaGVkTWV0YS5kYXRhLmxlbmd0aC0xLDFdKX1fb25EYXRhU2hpZnQoKXt0aGlzLl9zeW5jTGlzdC5wdXNoKFtcIl9yZW1vdmVFbGVtZW50c1wiLDAsMV0pfV9vbkRhdGFTcGxpY2UodCxlKXt0aGlzLl9zeW5jTGlzdC5wdXNoKFtcIl9yZW1vdmVFbGVtZW50c1wiLHQsZV0pLHRoaXMuX3N5bmNMaXN0LnB1c2goW1wiX2luc2VydEVsZW1lbnRzXCIsdCxhcmd1bWVudHMubGVuZ3RoLTJdKX1fb25EYXRhVW5zaGlmdCgpe3RoaXMuX3N5bmNMaXN0LnB1c2goW1wiX2luc2VydEVsZW1lbnRzXCIsMCxhcmd1bWVudHMubGVuZ3RoXSl9fUVpLmRlZmF1bHRzPXt9LEVpLnByb3RvdHlwZS5kYXRhc2V0RWxlbWVudFR5cGU9bnVsbCxFaS5wcm90b3R5cGUuZGF0YUVsZW1lbnRUeXBlPW51bGw7Y2xhc3Mgeml7Y29uc3RydWN0b3IoKXt0aGlzLng9dm9pZCAwLHRoaXMueT12b2lkIDAsdGhpcy5hY3RpdmU9ITEsdGhpcy5vcHRpb25zPXZvaWQgMCx0aGlzLiRhbmltYXRpb25zPXZvaWQgMH10b29sdGlwUG9zaXRpb24odCl7Y29uc3R7eDplLHk6aX09dGhpcy5nZXRQcm9wcyhbXCJ4XCIsXCJ5XCJdLHQpO3JldHVybnt4OmUseTppfX1oYXNWYWx1ZSgpe3JldHVybiBUdCh0aGlzLngpJiZUdCh0aGlzLnkpfWdldFByb3BzKHQsZSl7Y29uc3QgaT10aGlzLG49dGhpcy4kYW5pbWF0aW9ucztpZighZXx8IW4pcmV0dXJuIGk7Y29uc3Qgbz17fTtyZXR1cm4gdC5mb3JFYWNoKCh0PT57b1t0XT1uW3RdJiZuW3RdLmFjdGl2ZSgpP25bdF0uX3RvOmlbdF19KSksb319emkuZGVmYXVsdHM9e30semkuZGVmYXVsdFJvdXRlcz12b2lkIDA7Y29uc3QgSWk9bmV3IE1hcDtmdW5jdGlvbiBGaSh0LGUsaSl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7ZT1lfHx7fTtjb25zdCBpPXQrSlNPTi5zdHJpbmdpZnkoZSk7bGV0IG49SWkuZ2V0KGkpO3JldHVybiBufHwobj1uZXcgSW50bC5OdW1iZXJGb3JtYXQodCxlKSxJaS5zZXQoaSxuKSksbn0oZSxpKS5mb3JtYXQodCl9Y29uc3QgQmk9e3ZhbHVlczp0PT5ZKHQpP3Q6XCJcIit0LG51bWVyaWModCxlLGkpe2lmKDA9PT10KXJldHVyblwiMFwiO2NvbnN0IG49dGhpcy5jaGFydC5vcHRpb25zLmxvY2FsZTtsZXQgbyxzPXQ7aWYoaS5sZW5ndGg+MSl7Y29uc3QgZT1NYXRoLm1heChNYXRoLmFicyhpWzBdLnZhbHVlKSxNYXRoLmFicyhpW2kubGVuZ3RoLTFdLnZhbHVlKSk7KGU8MWUtNHx8ZT4xZTE1KSYmKG89XCJzY2llbnRpZmljXCIpLHM9ZnVuY3Rpb24odCxlKXtsZXQgaT1lLmxlbmd0aD4zP2VbMl0udmFsdWUtZVsxXS52YWx1ZTplWzFdLnZhbHVlLWVbMF0udmFsdWU7TWF0aC5hYnMoaSk+PTEmJnQhPT1NYXRoLmZsb29yKHQpJiYoaT10LU1hdGguZmxvb3IodCkpO3JldHVybiBpfSh0LGkpfWNvbnN0IGE9UHQoTWF0aC5hYnMocykpLHI9TWF0aC5tYXgoTWF0aC5taW4oLTEqTWF0aC5mbG9vcihhKSwyMCksMCksbD17bm90YXRpb246byxtaW5pbXVtRnJhY3Rpb25EaWdpdHM6cixtYXhpbXVtRnJhY3Rpb25EaWdpdHM6cn07cmV0dXJuIE9iamVjdC5hc3NpZ24obCx0aGlzLm9wdGlvbnMudGlja3MuZm9ybWF0KSxGaSh0LG4sbCl9LGxvZ2FyaXRobWljKHQsZSxpKXtpZigwPT09dClyZXR1cm5cIjBcIjtjb25zdCBuPXQvTWF0aC5wb3coMTAsTWF0aC5mbG9vcihQdCh0KSkpO3JldHVybiAxPT09bnx8Mj09PW58fDU9PT1uP0JpLm51bWVyaWMuY2FsbCh0aGlzLHQsZSxpKTpcIlwifX07dmFyIFZpPXtmb3JtYXR0ZXJzOkJpfTtmdW5jdGlvbiBXaSh0LGUpe2NvbnN0IGk9dC5vcHRpb25zLnRpY2tzLG49aS5tYXhUaWNrc0xpbWl0fHxmdW5jdGlvbih0KXtjb25zdCBlPXQub3B0aW9ucy5vZmZzZXQsaT10Ll90aWNrU2l6ZSgpLG49dC5fbGVuZ3RoL2krKGU/MDoxKSxvPXQuX21heExlbmd0aC9pO3JldHVybiBNYXRoLmZsb29yKE1hdGgubWluKG4sbykpfSh0KSxvPWkubWFqb3IuZW5hYmxlZD9mdW5jdGlvbih0KXtjb25zdCBlPVtdO2xldCBpLG47Zm9yKGk9MCxuPXQubGVuZ3RoO2k8bjtpKyspdFtpXS5tYWpvciYmZS5wdXNoKGkpO3JldHVybiBlfShlKTpbXSxzPW8ubGVuZ3RoLGE9b1swXSxyPW9bcy0xXSxsPVtdO2lmKHM+bilyZXR1cm4gZnVuY3Rpb24odCxlLGksbil7bGV0IG8scz0wLGE9aVswXTtmb3Iobj1NYXRoLmNlaWwobiksbz0wO288dC5sZW5ndGg7bysrKW89PT1hJiYoZS5wdXNoKHRbb10pLHMrKyxhPWlbcypuXSl9KGUsbCxvLHMvbiksbDtjb25zdCBjPWZ1bmN0aW9uKHQsZSxpKXtjb25zdCBuPWZ1bmN0aW9uKHQpe2NvbnN0IGU9dC5sZW5ndGg7bGV0IGksbjtpZihlPDIpcmV0dXJuITE7Zm9yKG49dFswXSxpPTE7aTxlOysraSlpZih0W2ldLXRbaS0xXSE9PW4pcmV0dXJuITE7cmV0dXJuIG59KHQpLG89ZS5sZW5ndGgvaTtpZighbilyZXR1cm4gTWF0aC5tYXgobywxKTtjb25zdCBzPU90KG4pO2ZvcihsZXQgdD0wLGU9cy5sZW5ndGgtMTt0PGU7dCsrKXtjb25zdCBlPXNbdF07aWYoZT5vKXJldHVybiBlfXJldHVybiBNYXRoLm1heChvLDEpfShvLGUsbik7aWYocz4wKXtsZXQgdCxpO2NvbnN0IG49cz4xP01hdGgucm91bmQoKHItYSkvKHMtMSkpOm51bGw7Zm9yKE5pKGUsbCxjLCQobik/MDphLW4sYSksdD0wLGk9cy0xO3Q8aTt0KyspTmkoZSxsLGMsb1t0XSxvW3QrMV0pO3JldHVybiBOaShlLGwsYyxyLCQobik/ZS5sZW5ndGg6cituKSxsfXJldHVybiBOaShlLGwsYyksbH1mdW5jdGlvbiBOaSh0LGUsaSxuLG8pe2NvbnN0IHM9SyhuLDApLGE9TWF0aC5taW4oSyhvLHQubGVuZ3RoKSx0Lmxlbmd0aCk7bGV0IHIsbCxjLGg9MDtmb3IoaT1NYXRoLmNlaWwoaSksbyYmKHI9by1uLGk9ci9NYXRoLmZsb29yKHIvaSkpLGM9cztjPDA7KWgrKyxjPU1hdGgucm91bmQocytoKmkpO2ZvcihsPU1hdGgubWF4KHMsMCk7bDxhO2wrKylsPT09YyYmKGUucHVzaCh0W2xdKSxoKyssYz1NYXRoLnJvdW5kKHMraCppKSl9eHQuc2V0KFwic2NhbGVcIix7ZGlzcGxheTohMCxvZmZzZXQ6ITEscmV2ZXJzZTohMSxiZWdpbkF0WmVybzohMSxib3VuZHM6XCJ0aWNrc1wiLGdyYWNlOjAsZ3JpZDp7ZGlzcGxheTohMCxsaW5lV2lkdGg6MSxkcmF3Qm9yZGVyOiEwLGRyYXdPbkNoYXJ0QXJlYTohMCxkcmF3VGlja3M6ITAsdGlja0xlbmd0aDo4LHRpY2tXaWR0aDoodCxlKT0+ZS5saW5lV2lkdGgsdGlja0NvbG9yOih0LGUpPT5lLmNvbG9yLG9mZnNldDohMSxib3JkZXJEYXNoOltdLGJvcmRlckRhc2hPZmZzZXQ6MCxib3JkZXJXaWR0aDoxfSx0aXRsZTp7ZGlzcGxheTohMSx0ZXh0OlwiXCIscGFkZGluZzp7dG9wOjQsYm90dG9tOjR9fSx0aWNrczp7bWluUm90YXRpb246MCxtYXhSb3RhdGlvbjo1MCxtaXJyb3I6ITEsdGV4dFN0cm9rZVdpZHRoOjAsdGV4dFN0cm9rZUNvbG9yOlwiXCIscGFkZGluZzozLGRpc3BsYXk6ITAsYXV0b1NraXA6ITAsYXV0b1NraXBQYWRkaW5nOjMsbGFiZWxPZmZzZXQ6MCxjYWxsYmFjazpWaS5mb3JtYXR0ZXJzLnZhbHVlcyxtaW5vcjp7fSxtYWpvcjp7fSxhbGlnbjpcImNlbnRlclwiLGNyb3NzQWxpZ246XCJuZWFyXCIsc2hvd0xhYmVsQmFja2Ryb3A6ITEsYmFja2Ryb3BDb2xvcjpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC43NSlcIixiYWNrZHJvcFBhZGRpbmc6Mn19KSx4dC5yb3V0ZShcInNjYWxlLnRpY2tzXCIsXCJjb2xvclwiLFwiXCIsXCJjb2xvclwiKSx4dC5yb3V0ZShcInNjYWxlLmdyaWRcIixcImNvbG9yXCIsXCJcIixcImJvcmRlckNvbG9yXCIpLHh0LnJvdXRlKFwic2NhbGUuZ3JpZFwiLFwiYm9yZGVyQ29sb3JcIixcIlwiLFwiYm9yZGVyQ29sb3JcIikseHQucm91dGUoXCJzY2FsZS50aXRsZVwiLFwiY29sb3JcIixcIlwiLFwiY29sb3JcIikseHQuZGVzY3JpYmUoXCJzY2FsZVwiLHtfZmFsbGJhY2s6ITEsX3NjcmlwdGFibGU6dD0+IXQuc3RhcnRzV2l0aChcImJlZm9yZVwiKSYmIXQuc3RhcnRzV2l0aChcImFmdGVyXCIpJiZcImNhbGxiYWNrXCIhPT10JiZcInBhcnNlclwiIT09dCxfaW5kZXhhYmxlOnQ9PlwiYm9yZGVyRGFzaFwiIT09dCYmXCJ0aWNrQm9yZGVyRGFzaFwiIT09dH0pLHh0LmRlc2NyaWJlKFwic2NhbGVzXCIse19mYWxsYmFjazpcInNjYWxlXCJ9KSx4dC5kZXNjcmliZShcInNjYWxlLnRpY2tzXCIse19zY3JpcHRhYmxlOnQ9PlwiYmFja2Ryb3BQYWRkaW5nXCIhPT10JiZcImNhbGxiYWNrXCIhPT10LF9pbmRleGFibGU6dD0+XCJiYWNrZHJvcFBhZGRpbmdcIiE9PXR9KTtjb25zdCBIaT0odCxlLGkpPT5cInRvcFwiPT09ZXx8XCJsZWZ0XCI9PT1lP3RbZV0raTp0W2VdLWk7ZnVuY3Rpb24gamkodCxlKXtjb25zdCBpPVtdLG49dC5sZW5ndGgvZSxvPXQubGVuZ3RoO2xldCBzPTA7Zm9yKDtzPG87cys9bilpLnB1c2godFtNYXRoLmZsb29yKHMpXSk7cmV0dXJuIGl9ZnVuY3Rpb24gJGkodCxlLGkpe2NvbnN0IG49dC50aWNrcy5sZW5ndGgsbz1NYXRoLm1pbihlLG4tMSkscz10Ll9zdGFydFBpeGVsLGE9dC5fZW5kUGl4ZWwscj0xZS02O2xldCBsLGM9dC5nZXRQaXhlbEZvclRpY2sobyk7aWYoIShpJiYobD0xPT09bj9NYXRoLm1heChjLXMsYS1jKTowPT09ZT8odC5nZXRQaXhlbEZvclRpY2soMSktYykvMjooYy10LmdldFBpeGVsRm9yVGljayhvLTEpKS8yLGMrPW88ZT9sOi1sLGM8cy1yfHxjPmErcikpKXJldHVybiBjfWZ1bmN0aW9uIFlpKHQpe3JldHVybiB0LmRyYXdUaWNrcz90LnRpY2tMZW5ndGg6MH1mdW5jdGlvbiBVaSh0LGUpe2lmKCF0LmRpc3BsYXkpcmV0dXJuIDA7Y29uc3QgaT1CZSh0LmZvbnQsZSksbj1GZSh0LnBhZGRpbmcpO3JldHVybihZKHQudGV4dCk/dC50ZXh0Lmxlbmd0aDoxKSppLmxpbmVIZWlnaHQrbi5oZWlnaHR9ZnVuY3Rpb24gWGkodCxlLGkpe2xldCBvPW4odCk7cmV0dXJuKGkmJlwicmlnaHRcIiE9PWV8fCFpJiZcInJpZ2h0XCI9PT1lKSYmKG89KHQ9PlwibGVmdFwiPT09dD9cInJpZ2h0XCI6XCJyaWdodFwiPT09dD9cImxlZnRcIjp0KShvKSksb31jbGFzcyBxaSBleHRlbmRzIHppe2NvbnN0cnVjdG9yKHQpe3N1cGVyKCksdGhpcy5pZD10LmlkLHRoaXMudHlwZT10LnR5cGUsdGhpcy5vcHRpb25zPXZvaWQgMCx0aGlzLmN0eD10LmN0eCx0aGlzLmNoYXJ0PXQuY2hhcnQsdGhpcy50b3A9dm9pZCAwLHRoaXMuYm90dG9tPXZvaWQgMCx0aGlzLmxlZnQ9dm9pZCAwLHRoaXMucmlnaHQ9dm9pZCAwLHRoaXMud2lkdGg9dm9pZCAwLHRoaXMuaGVpZ2h0PXZvaWQgMCx0aGlzLl9tYXJnaW5zPXtsZWZ0OjAscmlnaHQ6MCx0b3A6MCxib3R0b206MH0sdGhpcy5tYXhXaWR0aD12b2lkIDAsdGhpcy5tYXhIZWlnaHQ9dm9pZCAwLHRoaXMucGFkZGluZ1RvcD12b2lkIDAsdGhpcy5wYWRkaW5nQm90dG9tPXZvaWQgMCx0aGlzLnBhZGRpbmdMZWZ0PXZvaWQgMCx0aGlzLnBhZGRpbmdSaWdodD12b2lkIDAsdGhpcy5heGlzPXZvaWQgMCx0aGlzLmxhYmVsUm90YXRpb249dm9pZCAwLHRoaXMubWluPXZvaWQgMCx0aGlzLm1heD12b2lkIDAsdGhpcy5fcmFuZ2U9dm9pZCAwLHRoaXMudGlja3M9W10sdGhpcy5fZ3JpZExpbmVJdGVtcz1udWxsLHRoaXMuX2xhYmVsSXRlbXM9bnVsbCx0aGlzLl9sYWJlbFNpemVzPW51bGwsdGhpcy5fbGVuZ3RoPTAsdGhpcy5fbWF4TGVuZ3RoPTAsdGhpcy5fbG9uZ2VzdFRleHRDYWNoZT17fSx0aGlzLl9zdGFydFBpeGVsPXZvaWQgMCx0aGlzLl9lbmRQaXhlbD12b2lkIDAsdGhpcy5fcmV2ZXJzZVBpeGVscz0hMSx0aGlzLl91c2VyTWF4PXZvaWQgMCx0aGlzLl91c2VyTWluPXZvaWQgMCx0aGlzLl9zdWdnZXN0ZWRNYXg9dm9pZCAwLHRoaXMuX3N1Z2dlc3RlZE1pbj12b2lkIDAsdGhpcy5fdGlja3NMZW5ndGg9MCx0aGlzLl9ib3JkZXJWYWx1ZT0wLHRoaXMuX2NhY2hlPXt9LHRoaXMuX2RhdGFMaW1pdHNDYWNoZWQ9ITEsdGhpcy4kY29udGV4dD12b2lkIDB9aW5pdCh0KXtjb25zdCBlPXRoaXM7ZS5vcHRpb25zPXQuc2V0Q29udGV4dChlLmdldENvbnRleHQoKSksZS5heGlzPXQuYXhpcyxlLl91c2VyTWluPWUucGFyc2UodC5taW4pLGUuX3VzZXJNYXg9ZS5wYXJzZSh0Lm1heCksZS5fc3VnZ2VzdGVkTWluPWUucGFyc2UodC5zdWdnZXN0ZWRNaW4pLGUuX3N1Z2dlc3RlZE1heD1lLnBhcnNlKHQuc3VnZ2VzdGVkTWF4KX1wYXJzZSh0LGUpe3JldHVybiB0fWdldFVzZXJCb3VuZHMoKXtsZXR7X3VzZXJNaW46dCxfdXNlck1heDplLF9zdWdnZXN0ZWRNaW46aSxfc3VnZ2VzdGVkTWF4Om59PXRoaXM7cmV0dXJuIHQ9cSh0LE51bWJlci5QT1NJVElWRV9JTkZJTklUWSksZT1xKGUsTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKSxpPXEoaSxOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpLG49cShuLE51bWJlci5ORUdBVElWRV9JTkZJTklUWSkse21pbjpxKHQsaSksbWF4OnEoZSxuKSxtaW5EZWZpbmVkOlgodCksbWF4RGVmaW5lZDpYKGUpfX1nZXRNaW5NYXgodCl7Y29uc3QgZT10aGlzO2xldCBpLHttaW46bixtYXg6byxtaW5EZWZpbmVkOnMsbWF4RGVmaW5lZDphfT1lLmdldFVzZXJCb3VuZHMoKTtpZihzJiZhKXJldHVybnttaW46bixtYXg6b307Y29uc3Qgcj1lLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCk7Zm9yKGxldCBsPTAsYz1yLmxlbmd0aDtsPGM7KytsKWk9cltsXS5jb250cm9sbGVyLmdldE1pbk1heChlLHQpLHN8fChuPU1hdGgubWluKG4saS5taW4pKSxhfHwobz1NYXRoLm1heChvLGkubWF4KSk7cmV0dXJue21pbjpxKG4scShvLG4pKSxtYXg6cShvLHEobixvKSl9fWdldFBhZGRpbmcoKXtjb25zdCB0PXRoaXM7cmV0dXJue2xlZnQ6dC5wYWRkaW5nTGVmdHx8MCx0b3A6dC5wYWRkaW5nVG9wfHwwLHJpZ2h0OnQucGFkZGluZ1JpZ2h0fHwwLGJvdHRvbTp0LnBhZGRpbmdCb3R0b218fDB9fWdldFRpY2tzKCl7cmV0dXJuIHRoaXMudGlja3N9Z2V0TGFiZWxzKCl7Y29uc3QgdD10aGlzLmNoYXJ0LmRhdGE7cmV0dXJuIHRoaXMub3B0aW9ucy5sYWJlbHN8fCh0aGlzLmlzSG9yaXpvbnRhbCgpP3QueExhYmVsczp0LnlMYWJlbHMpfHx0LmxhYmVsc3x8W119YmVmb3JlTGF5b3V0KCl7dGhpcy5fY2FjaGU9e30sdGhpcy5fZGF0YUxpbWl0c0NhY2hlZD0hMX1iZWZvcmVVcGRhdGUoKXtRKHRoaXMub3B0aW9ucy5iZWZvcmVVcGRhdGUsW3RoaXNdKX11cGRhdGUodCxlLGkpe2NvbnN0IG49dGhpcyxvPW4ub3B0aW9ucy50aWNrcyxzPW8uc2FtcGxlU2l6ZTtuLmJlZm9yZVVwZGF0ZSgpLG4ubWF4V2lkdGg9dCxuLm1heEhlaWdodD1lLG4uX21hcmdpbnM9aT1PYmplY3QuYXNzaWduKHtsZWZ0OjAscmlnaHQ6MCx0b3A6MCxib3R0b206MH0saSksbi50aWNrcz1udWxsLG4uX2xhYmVsU2l6ZXM9bnVsbCxuLl9ncmlkTGluZUl0ZW1zPW51bGwsbi5fbGFiZWxJdGVtcz1udWxsLG4uYmVmb3JlU2V0RGltZW5zaW9ucygpLG4uc2V0RGltZW5zaW9ucygpLG4uYWZ0ZXJTZXREaW1lbnNpb25zKCksbi5fbWF4TGVuZ3RoPW4uaXNIb3Jpem9udGFsKCk/bi53aWR0aCtpLmxlZnQraS5yaWdodDpuLmhlaWdodCtpLnRvcCtpLmJvdHRvbSxuLl9kYXRhTGltaXRzQ2FjaGVkfHwobi5iZWZvcmVEYXRhTGltaXRzKCksbi5kZXRlcm1pbmVEYXRhTGltaXRzKCksbi5hZnRlckRhdGFMaW1pdHMoKSxuLl9yYW5nZT1XZShuLG4ub3B0aW9ucy5ncmFjZSksbi5fZGF0YUxpbWl0c0NhY2hlZD0hMCksbi5iZWZvcmVCdWlsZFRpY2tzKCksbi50aWNrcz1uLmJ1aWxkVGlja3MoKXx8W10sbi5hZnRlckJ1aWxkVGlja3MoKTtjb25zdCBhPXM8bi50aWNrcy5sZW5ndGg7bi5fY29udmVydFRpY2tzVG9MYWJlbHMoYT9qaShuLnRpY2tzLHMpOm4udGlja3MpLG4uY29uZmlndXJlKCksbi5iZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCksbi5jYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCksbi5hZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKSxvLmRpc3BsYXkmJihvLmF1dG9Ta2lwfHxcImF1dG9cIj09PW8uc291cmNlKSYmKG4udGlja3M9V2kobixuLnRpY2tzKSxuLl9sYWJlbFNpemVzPW51bGwpLGEmJm4uX2NvbnZlcnRUaWNrc1RvTGFiZWxzKG4udGlja3MpLG4uYmVmb3JlRml0KCksbi5maXQoKSxuLmFmdGVyRml0KCksbi5hZnRlclVwZGF0ZSgpfWNvbmZpZ3VyZSgpe2NvbnN0IHQ9dGhpcztsZXQgZSxpLG49dC5vcHRpb25zLnJldmVyc2U7dC5pc0hvcml6b250YWwoKT8oZT10LmxlZnQsaT10LnJpZ2h0KTooZT10LnRvcCxpPXQuYm90dG9tLG49IW4pLHQuX3N0YXJ0UGl4ZWw9ZSx0Ll9lbmRQaXhlbD1pLHQuX3JldmVyc2VQaXhlbHM9bix0Ll9sZW5ndGg9aS1lLHQuX2FsaWduVG9QaXhlbHM9dC5vcHRpb25zLmFsaWduVG9QaXhlbHN9YWZ0ZXJVcGRhdGUoKXtRKHRoaXMub3B0aW9ucy5hZnRlclVwZGF0ZSxbdGhpc10pfWJlZm9yZVNldERpbWVuc2lvbnMoKXtRKHRoaXMub3B0aW9ucy5iZWZvcmVTZXREaW1lbnNpb25zLFt0aGlzXSl9c2V0RGltZW5zaW9ucygpe2NvbnN0IHQ9dGhpczt0LmlzSG9yaXpvbnRhbCgpPyh0LndpZHRoPXQubWF4V2lkdGgsdC5sZWZ0PTAsdC5yaWdodD10LndpZHRoKToodC5oZWlnaHQ9dC5tYXhIZWlnaHQsdC50b3A9MCx0LmJvdHRvbT10LmhlaWdodCksdC5wYWRkaW5nTGVmdD0wLHQucGFkZGluZ1RvcD0wLHQucGFkZGluZ1JpZ2h0PTAsdC5wYWRkaW5nQm90dG9tPTB9YWZ0ZXJTZXREaW1lbnNpb25zKCl7USh0aGlzLm9wdGlvbnMuYWZ0ZXJTZXREaW1lbnNpb25zLFt0aGlzXSl9X2NhbGxIb29rcyh0KXtjb25zdCBlPXRoaXM7ZS5jaGFydC5ub3RpZnlQbHVnaW5zKHQsZS5nZXRDb250ZXh0KCkpLFEoZS5vcHRpb25zW3RdLFtlXSl9YmVmb3JlRGF0YUxpbWl0cygpe3RoaXMuX2NhbGxIb29rcyhcImJlZm9yZURhdGFMaW1pdHNcIil9ZGV0ZXJtaW5lRGF0YUxpbWl0cygpe31hZnRlckRhdGFMaW1pdHMoKXt0aGlzLl9jYWxsSG9va3MoXCJhZnRlckRhdGFMaW1pdHNcIil9YmVmb3JlQnVpbGRUaWNrcygpe3RoaXMuX2NhbGxIb29rcyhcImJlZm9yZUJ1aWxkVGlja3NcIil9YnVpbGRUaWNrcygpe3JldHVybltdfWFmdGVyQnVpbGRUaWNrcygpe3RoaXMuX2NhbGxIb29rcyhcImFmdGVyQnVpbGRUaWNrc1wiKX1iZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24oKXtRKHRoaXMub3B0aW9ucy5iZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24sW3RoaXNdKX1nZW5lcmF0ZVRpY2tMYWJlbHModCl7Y29uc3QgZT10aGlzLGk9ZS5vcHRpb25zLnRpY2tzO2xldCBuLG8scztmb3Iobj0wLG89dC5sZW5ndGg7bjxvO24rKylzPXRbbl0scy5sYWJlbD1RKGkuY2FsbGJhY2ssW3MudmFsdWUsbix0XSxlKX1hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbigpe1EodGhpcy5vcHRpb25zLmFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uLFt0aGlzXSl9YmVmb3JlQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpe1EodGhpcy5vcHRpb25zLmJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24sW3RoaXNdKX1jYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCl7Y29uc3QgdD10aGlzLGU9dC5vcHRpb25zLGk9ZS50aWNrcyxuPXQudGlja3MubGVuZ3RoLG89aS5taW5Sb3RhdGlvbnx8MCxzPWkubWF4Um90YXRpb247bGV0IGEscixsLGM9bztpZighdC5faXNWaXNpYmxlKCl8fCFpLmRpc3BsYXl8fG8+PXN8fG48PTF8fCF0LmlzSG9yaXpvbnRhbCgpKXJldHVybiB2b2lkKHQubGFiZWxSb3RhdGlvbj1vKTtjb25zdCBoPXQuX2dldExhYmVsU2l6ZXMoKSxkPWgud2lkZXN0LndpZHRoLHU9aC5oaWdoZXN0LmhlaWdodCxmPUh0KHQuY2hhcnQud2lkdGgtZCwwLHQubWF4V2lkdGgpO2E9ZS5vZmZzZXQ/dC5tYXhXaWR0aC9uOmYvKG4tMSksZCs2PmEmJihhPWYvKG4tKGUub2Zmc2V0Py41OjEpKSxyPXQubWF4SGVpZ2h0LVlpKGUuZ3JpZCktaS5wYWRkaW5nLVVpKGUudGl0bGUsdC5jaGFydC5vcHRpb25zLmZvbnQpLGw9TWF0aC5zcXJ0KGQqZCt1KnUpLGM9enQoTWF0aC5taW4oTWF0aC5hc2luKE1hdGgubWluKChoLmhpZ2hlc3QuaGVpZ2h0KzYpL2EsMSkpLE1hdGguYXNpbihNYXRoLm1pbihyL2wsMSkpLU1hdGguYXNpbih1L2wpKSksYz1NYXRoLm1heChvLE1hdGgubWluKHMsYykpKSx0LmxhYmVsUm90YXRpb249Y31hZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKXtRKHRoaXMub3B0aW9ucy5hZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24sW3RoaXNdKX1iZWZvcmVGaXQoKXtRKHRoaXMub3B0aW9ucy5iZWZvcmVGaXQsW3RoaXNdKX1maXQoKXtjb25zdCB0PXRoaXMsZT17d2lkdGg6MCxoZWlnaHQ6MH0se2NoYXJ0Omksb3B0aW9uczp7dGlja3M6bix0aXRsZTpvLGdyaWQ6c319PXQsYT10Ll9pc1Zpc2libGUoKSxyPXQuaXNIb3Jpem9udGFsKCk7aWYoYSl7Y29uc3QgYT1VaShvLGkub3B0aW9ucy5mb250KTtpZihyPyhlLndpZHRoPXQubWF4V2lkdGgsZS5oZWlnaHQ9WWkocykrYSk6KGUuaGVpZ2h0PXQubWF4SGVpZ2h0LGUud2lkdGg9WWkocykrYSksbi5kaXNwbGF5JiZ0LnRpY2tzLmxlbmd0aCl7Y29uc3R7Zmlyc3Q6aSxsYXN0Om8sd2lkZXN0OnMsaGlnaGVzdDphfT10Ll9nZXRMYWJlbFNpemVzKCksbD0yKm4ucGFkZGluZyxjPUV0KHQubGFiZWxSb3RhdGlvbiksaD1NYXRoLmNvcyhjKSxkPU1hdGguc2luKGMpO2lmKHIpe2NvbnN0IGk9bi5taXJyb3I/MDpkKnMud2lkdGgraCphLmhlaWdodDtlLmhlaWdodD1NYXRoLm1pbih0Lm1heEhlaWdodCxlLmhlaWdodCtpK2wpfWVsc2V7Y29uc3QgaT1uLm1pcnJvcj8wOmgqcy53aWR0aCtkKmEuaGVpZ2h0O2Uud2lkdGg9TWF0aC5taW4odC5tYXhXaWR0aCxlLndpZHRoK2krbCl9dC5fY2FsY3VsYXRlUGFkZGluZyhpLG8sZCxoKX19dC5faGFuZGxlTWFyZ2lucygpLHI/KHQud2lkdGg9dC5fbGVuZ3RoPWkud2lkdGgtdC5fbWFyZ2lucy5sZWZ0LXQuX21hcmdpbnMucmlnaHQsdC5oZWlnaHQ9ZS5oZWlnaHQpOih0LndpZHRoPWUud2lkdGgsdC5oZWlnaHQ9dC5fbGVuZ3RoPWkuaGVpZ2h0LXQuX21hcmdpbnMudG9wLXQuX21hcmdpbnMuYm90dG9tKX1fY2FsY3VsYXRlUGFkZGluZyh0LGUsaSxuKXtjb25zdCBvPXRoaXMse3RpY2tzOnthbGlnbjpzLHBhZGRpbmc6YX0scG9zaXRpb246cn09by5vcHRpb25zLGw9MCE9PW8ubGFiZWxSb3RhdGlvbixjPVwidG9wXCIhPT1yJiZcInhcIj09PW8uYXhpcztpZihvLmlzSG9yaXpvbnRhbCgpKXtjb25zdCByPW8uZ2V0UGl4ZWxGb3JUaWNrKDApLW8ubGVmdCxoPW8ucmlnaHQtby5nZXRQaXhlbEZvclRpY2soby50aWNrcy5sZW5ndGgtMSk7bGV0IGQ9MCx1PTA7bD9jPyhkPW4qdC53aWR0aCx1PWkqZS5oZWlnaHQpOihkPWkqdC5oZWlnaHQsdT1uKmUud2lkdGgpOlwic3RhcnRcIj09PXM/dT1lLndpZHRoOlwiZW5kXCI9PT1zP2Q9dC53aWR0aDooZD10LndpZHRoLzIsdT1lLndpZHRoLzIpLG8ucGFkZGluZ0xlZnQ9TWF0aC5tYXgoKGQtcithKSpvLndpZHRoLyhvLndpZHRoLXIpLDApLG8ucGFkZGluZ1JpZ2h0PU1hdGgubWF4KCh1LWgrYSkqby53aWR0aC8oby53aWR0aC1oKSwwKX1lbHNle2xldCBpPWUuaGVpZ2h0LzIsbj10LmhlaWdodC8yO1wic3RhcnRcIj09PXM/KGk9MCxuPXQuaGVpZ2h0KTpcImVuZFwiPT09cyYmKGk9ZS5oZWlnaHQsbj0wKSxvLnBhZGRpbmdUb3A9aSthLG8ucGFkZGluZ0JvdHRvbT1uK2F9fV9oYW5kbGVNYXJnaW5zKCl7Y29uc3QgdD10aGlzO3QuX21hcmdpbnMmJih0Ll9tYXJnaW5zLmxlZnQ9TWF0aC5tYXgodC5wYWRkaW5nTGVmdCx0Ll9tYXJnaW5zLmxlZnQpLHQuX21hcmdpbnMudG9wPU1hdGgubWF4KHQucGFkZGluZ1RvcCx0Ll9tYXJnaW5zLnRvcCksdC5fbWFyZ2lucy5yaWdodD1NYXRoLm1heCh0LnBhZGRpbmdSaWdodCx0Ll9tYXJnaW5zLnJpZ2h0KSx0Ll9tYXJnaW5zLmJvdHRvbT1NYXRoLm1heCh0LnBhZGRpbmdCb3R0b20sdC5fbWFyZ2lucy5ib3R0b20pKX1hZnRlckZpdCgpe1EodGhpcy5vcHRpb25zLmFmdGVyRml0LFt0aGlzXSl9aXNIb3Jpem9udGFsKCl7Y29uc3R7YXhpczp0LHBvc2l0aW9uOmV9PXRoaXMub3B0aW9ucztyZXR1cm5cInRvcFwiPT09ZXx8XCJib3R0b21cIj09PWV8fFwieFwiPT09dH1pc0Z1bGxTaXplKCl7cmV0dXJuIHRoaXMub3B0aW9ucy5mdWxsU2l6ZX1fY29udmVydFRpY2tzVG9MYWJlbHModCl7Y29uc3QgZT10aGlzO2xldCBpLG47Zm9yKGUuYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uKCksZS5nZW5lcmF0ZVRpY2tMYWJlbHModCksaT0wLG49dC5sZW5ndGg7aTxuO2krKykkKHRbaV0ubGFiZWwpJiYodC5zcGxpY2UoaSwxKSxuLS0saS0tKTtlLmFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uKCl9X2dldExhYmVsU2l6ZXMoKXtjb25zdCB0PXRoaXM7bGV0IGU9dC5fbGFiZWxTaXplcztpZighZSl7Y29uc3QgaT10Lm9wdGlvbnMudGlja3Muc2FtcGxlU2l6ZTtsZXQgbj10LnRpY2tzO2k8bi5sZW5ndGgmJihuPWppKG4saSkpLHQuX2xhYmVsU2l6ZXM9ZT10Ll9jb21wdXRlTGFiZWxTaXplcyhuLG4ubGVuZ3RoKX1yZXR1cm4gZX1fY29tcHV0ZUxhYmVsU2l6ZXModCxlKXtjb25zdHtjdHg6aSxfbG9uZ2VzdFRleHRDYWNoZTpufT10aGlzLG89W10scz1bXTtsZXQgYSxyLGwsYyxoLGQsdSxmLGcscCxtLHg9MCxiPTA7Zm9yKGE9MDthPGU7KythKXtpZihjPXRbYV0ubGFiZWwsaD10aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKGEpLGkuZm9udD1kPWguc3RyaW5nLHU9bltkXT1uW2RdfHx7ZGF0YTp7fSxnYzpbXX0sZj1oLmxpbmVIZWlnaHQsZz1wPTAsJChjKXx8WShjKSl7aWYoWShjKSlmb3Iocj0wLGw9Yy5sZW5ndGg7cjxsOysrciltPWNbcl0sJChtKXx8WShtKXx8KGc9WXQoaSx1LmRhdGEsdS5nYyxnLG0pLHArPWYpfWVsc2UgZz1ZdChpLHUuZGF0YSx1LmdjLGcsYykscD1mO28ucHVzaChnKSxzLnB1c2gocCkseD1NYXRoLm1heChnLHgpLGI9TWF0aC5tYXgocCxiKX0hZnVuY3Rpb24odCxlKXtKKHQsKHQ9Pntjb25zdCBpPXQuZ2Msbj1pLmxlbmd0aC8yO2xldCBvO2lmKG4+ZSl7Zm9yKG89MDtvPG47KytvKWRlbGV0ZSB0LmRhdGFbaVtvXV07aS5zcGxpY2UoMCxuKX19KSl9KG4sZSk7Y29uc3QgXz1vLmluZGV4T2YoeCkseT1zLmluZGV4T2YoYiksdj10PT4oe3dpZHRoOm9bdF18fDAsaGVpZ2h0OnNbdF18fDB9KTtyZXR1cm57Zmlyc3Q6digwKSxsYXN0OnYoZS0xKSx3aWRlc3Q6dihfKSxoaWdoZXN0OnYoeSksd2lkdGhzOm8saGVpZ2h0czpzfX1nZXRMYWJlbEZvclZhbHVlKHQpe3JldHVybiB0fWdldFBpeGVsRm9yVmFsdWUodCxlKXtyZXR1cm4gTmFOfWdldFZhbHVlRm9yUGl4ZWwodCl7fWdldFBpeGVsRm9yVGljayh0KXtjb25zdCBlPXRoaXMudGlja3M7cmV0dXJuIHQ8MHx8dD5lLmxlbmd0aC0xP251bGw6dGhpcy5nZXRQaXhlbEZvclZhbHVlKGVbdF0udmFsdWUpfWdldFBpeGVsRm9yRGVjaW1hbCh0KXtjb25zdCBlPXRoaXM7ZS5fcmV2ZXJzZVBpeGVscyYmKHQ9MS10KTtjb25zdCBpPWUuX3N0YXJ0UGl4ZWwrdCplLl9sZW5ndGg7cmV0dXJuIGp0KGUuX2FsaWduVG9QaXhlbHM/WHQoZS5jaGFydCxpLDApOmkpfWdldERlY2ltYWxGb3JQaXhlbCh0KXtjb25zdCBlPSh0LXRoaXMuX3N0YXJ0UGl4ZWwpL3RoaXMuX2xlbmd0aDtyZXR1cm4gdGhpcy5fcmV2ZXJzZVBpeGVscz8xLWU6ZX1nZXRCYXNlUGl4ZWwoKXtyZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRoaXMuZ2V0QmFzZVZhbHVlKCkpfWdldEJhc2VWYWx1ZSgpe2NvbnN0e21pbjp0LG1heDplfT10aGlzO3JldHVybiB0PDAmJmU8MD9lOnQ+MCYmZT4wP3Q6MH1nZXRDb250ZXh0KHQpe2NvbnN0IGU9dGhpcyxpPWUudGlja3N8fFtdO2lmKHQ+PTAmJnQ8aS5sZW5ndGgpe2NvbnN0IG49aVt0XTtyZXR1cm4gbi4kY29udGV4dHx8KG4uJGNvbnRleHQ9ZnVuY3Rpb24odCxlLGkpe3JldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUodCkse3RpY2s6aSxpbmRleDplLHR5cGU6XCJ0aWNrXCJ9KX0oZS5nZXRDb250ZXh0KCksdCxuKSl9cmV0dXJuIGUuJGNvbnRleHR8fChlLiRjb250ZXh0PShuPWUuY2hhcnQuZ2V0Q29udGV4dCgpLG89ZSxPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobikse3NjYWxlOm8sdHlwZTpcInNjYWxlXCJ9KSkpO3ZhciBuLG99X3RpY2tTaXplKCl7Y29uc3QgdD10aGlzLGU9dC5vcHRpb25zLnRpY2tzLGk9RXQodC5sYWJlbFJvdGF0aW9uKSxuPU1hdGguYWJzKE1hdGguY29zKGkpKSxvPU1hdGguYWJzKE1hdGguc2luKGkpKSxzPXQuX2dldExhYmVsU2l6ZXMoKSxhPWUuYXV0b1NraXBQYWRkaW5nfHwwLHI9cz9zLndpZGVzdC53aWR0aCthOjAsbD1zP3MuaGlnaGVzdC5oZWlnaHQrYTowO3JldHVybiB0LmlzSG9yaXpvbnRhbCgpP2wqbj5yKm8/ci9uOmwvbzpsKm88cipuP2wvbjpyL299X2lzVmlzaWJsZSgpe2NvbnN0IHQ9dGhpcy5vcHRpb25zLmRpc3BsYXk7cmV0dXJuXCJhdXRvXCIhPT10PyEhdDp0aGlzLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCkubGVuZ3RoPjB9X2NvbXB1dGVHcmlkTGluZUl0ZW1zKHQpe2NvbnN0IGU9dGhpcyxpPWUuYXhpcyxuPWUuY2hhcnQsbz1lLm9wdGlvbnMse2dyaWQ6cyxwb3NpdGlvbjphfT1vLHI9cy5vZmZzZXQsbD1lLmlzSG9yaXpvbnRhbCgpLGM9ZS50aWNrcy5sZW5ndGgrKHI/MTowKSxoPVlpKHMpLGQ9W10sdT1zLnNldENvbnRleHQoZS5nZXRDb250ZXh0KCkpLGY9dS5kcmF3Qm9yZGVyP3UuYm9yZGVyV2lkdGg6MCxnPWYvMixwPWZ1bmN0aW9uKHQpe3JldHVybiBYdChuLHQsZil9O2xldCBtLHgsYixfLHksdix3LE0sayxTLFAsRDtpZihcInRvcFwiPT09YSltPXAoZS5ib3R0b20pLHY9ZS5ib3R0b20taCxNPW0tZyxTPXAodC50b3ApK2csRD10LmJvdHRvbTtlbHNlIGlmKFwiYm90dG9tXCI9PT1hKW09cChlLnRvcCksUz10LnRvcCxEPXAodC5ib3R0b20pLWcsdj1tK2csTT1lLnRvcCtoO2Vsc2UgaWYoXCJsZWZ0XCI9PT1hKW09cChlLnJpZ2h0KSx5PWUucmlnaHQtaCx3PW0tZyxrPXAodC5sZWZ0KStnLFA9dC5yaWdodDtlbHNlIGlmKFwicmlnaHRcIj09PWEpbT1wKGUubGVmdCksaz10LmxlZnQsUD1wKHQucmlnaHQpLWcseT1tK2csdz1lLmxlZnQraDtlbHNlIGlmKFwieFwiPT09aSl7aWYoXCJjZW50ZXJcIj09PWEpbT1wKCh0LnRvcCt0LmJvdHRvbSkvMisuNSk7ZWxzZSBpZihVKGEpKXtjb25zdCB0PU9iamVjdC5rZXlzKGEpWzBdLGk9YVt0XTttPXAoZS5jaGFydC5zY2FsZXNbdF0uZ2V0UGl4ZWxGb3JWYWx1ZShpKSl9Uz10LnRvcCxEPXQuYm90dG9tLHY9bStnLE09ditofWVsc2UgaWYoXCJ5XCI9PT1pKXtpZihcImNlbnRlclwiPT09YSltPXAoKHQubGVmdCt0LnJpZ2h0KS8yKTtlbHNlIGlmKFUoYSkpe2NvbnN0IHQ9T2JqZWN0LmtleXMoYSlbMF0saT1hW3RdO209cChlLmNoYXJ0LnNjYWxlc1t0XS5nZXRQaXhlbEZvclZhbHVlKGkpKX15PW0tZyx3PXktaCxrPXQubGVmdCxQPXQucmlnaHR9Y29uc3QgQz1LKG8udGlja3MubWF4VGlja3NMaW1pdCxjKSxPPU1hdGgubWF4KDEsTWF0aC5jZWlsKGMvQykpO2Zvcih4PTA7eDxjO3grPU8pe2NvbnN0IHQ9cy5zZXRDb250ZXh0KGUuZ2V0Q29udGV4dCh4KSksaT10LmxpbmVXaWR0aCxvPXQuY29sb3IsYT1zLmJvcmRlckRhc2h8fFtdLGM9dC5ib3JkZXJEYXNoT2Zmc2V0LGg9dC50aWNrV2lkdGgsdT10LnRpY2tDb2xvcixmPXQudGlja0JvcmRlckRhc2h8fFtdLGc9dC50aWNrQm9yZGVyRGFzaE9mZnNldDtiPSRpKGUseCxyKSx2b2lkIDAhPT1iJiYoXz1YdChuLGIsaSksbD95PXc9az1QPV86dj1NPVM9RD1fLGQucHVzaCh7dHgxOnksdHkxOnYsdHgyOncsdHkyOk0seDE6ayx5MTpTLHgyOlAseTI6RCx3aWR0aDppLGNvbG9yOm8sYm9yZGVyRGFzaDphLGJvcmRlckRhc2hPZmZzZXQ6Yyx0aWNrV2lkdGg6aCx0aWNrQ29sb3I6dSx0aWNrQm9yZGVyRGFzaDpmLHRpY2tCb3JkZXJEYXNoT2Zmc2V0Omd9KSl9cmV0dXJuIGUuX3RpY2tzTGVuZ3RoPWMsZS5fYm9yZGVyVmFsdWU9bSxkfV9jb21wdXRlTGFiZWxJdGVtcyh0KXtjb25zdCBlPXRoaXMsaT1lLmF4aXMsbj1lLm9wdGlvbnMse3Bvc2l0aW9uOm8sdGlja3M6c309bixhPWUuaXNIb3Jpem9udGFsKCkscj1lLnRpY2tzLHthbGlnbjpsLGNyb3NzQWxpZ246YyxwYWRkaW5nOmgsbWlycm9yOmR9PXMsdT1ZaShuLmdyaWQpLGY9dStoLGc9ZD8taDpmLHA9LUV0KGUubGFiZWxSb3RhdGlvbiksbT1bXTtsZXQgeCxiLF8seSx2LHcsTSxrLFMsUCxELEMsTz1cIm1pZGRsZVwiO2lmKFwidG9wXCI9PT1vKXc9ZS5ib3R0b20tZyxNPWUuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtlbHNlIGlmKFwiYm90dG9tXCI9PT1vKXc9ZS50b3ArZyxNPWUuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtlbHNlIGlmKFwibGVmdFwiPT09byl7Y29uc3QgdD1lLl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHUpO009dC50ZXh0QWxpZ24sdj10Lnh9ZWxzZSBpZihcInJpZ2h0XCI9PT1vKXtjb25zdCB0PWUuX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodSk7TT10LnRleHRBbGlnbix2PXQueH1lbHNlIGlmKFwieFwiPT09aSl7aWYoXCJjZW50ZXJcIj09PW8pdz0odC50b3ArdC5ib3R0b20pLzIrZjtlbHNlIGlmKFUobykpe2NvbnN0IHQ9T2JqZWN0LmtleXMobylbMF0saT1vW3RdO3c9ZS5jaGFydC5zY2FsZXNbdF0uZ2V0UGl4ZWxGb3JWYWx1ZShpKStmfU09ZS5fZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpfWVsc2UgaWYoXCJ5XCI9PT1pKXtpZihcImNlbnRlclwiPT09byl2PSh0LmxlZnQrdC5yaWdodCkvMi1mO2Vsc2UgaWYoVShvKSl7Y29uc3QgdD1PYmplY3Qua2V5cyhvKVswXSxpPW9bdF07dj1lLmNoYXJ0LnNjYWxlc1t0XS5nZXRQaXhlbEZvclZhbHVlKGkpfU09ZS5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh1KS50ZXh0QWxpZ259XCJ5XCI9PT1pJiYoXCJzdGFydFwiPT09bD9PPVwidG9wXCI6XCJlbmRcIj09PWwmJihPPVwiYm90dG9tXCIpKTtjb25zdCBUPWUuX2dldExhYmVsU2l6ZXMoKTtmb3IoeD0wLGI9ci5sZW5ndGg7eDxiOysreCl7Xz1yW3hdLHk9Xy5sYWJlbDtjb25zdCB0PXMuc2V0Q29udGV4dChlLmdldENvbnRleHQoeCkpO2s9ZS5nZXRQaXhlbEZvclRpY2soeCkrcy5sYWJlbE9mZnNldCxTPWUuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoeCksUD1TLmxpbmVIZWlnaHQsRD1ZKHkpP3kubGVuZ3RoOjE7Y29uc3QgaT1ELzIsbj10LmNvbG9yLGw9dC50ZXh0U3Ryb2tlQ29sb3IsaD10LnRleHRTdHJva2VXaWR0aDtsZXQgdTtpZihhPyh2PWssQz1cInRvcFwiPT09bz9cIm5lYXJcIj09PWN8fDAhPT1wPy1EKlArUC8yOlwiY2VudGVyXCI9PT1jPy1ULmhpZ2hlc3QuaGVpZ2h0LzItaSpQK1A6LVQuaGlnaGVzdC5oZWlnaHQrUC8yOlwibmVhclwiPT09Y3x8MCE9PXA/UC8yOlwiY2VudGVyXCI9PT1jP1QuaGlnaGVzdC5oZWlnaHQvMi1pKlA6VC5oaWdoZXN0LmhlaWdodC1EKlAsZCYmKEMqPS0xKSk6KHc9ayxDPSgxLUQpKlAvMiksdC5zaG93TGFiZWxCYWNrZHJvcCl7Y29uc3QgZT1GZSh0LmJhY2tkcm9wUGFkZGluZyksaT1ULmhlaWdodHNbeF0sbj1ULndpZHRoc1t4XTtsZXQgbz13K0MtZS50b3Ascz12LWUubGVmdDtzd2l0Y2goTyl7Y2FzZVwibWlkZGxlXCI6by09aS8yO2JyZWFrO2Nhc2VcImJvdHRvbVwiOm8tPWl9c3dpdGNoKE0pe2Nhc2VcImNlbnRlclwiOnMtPW4vMjticmVhaztjYXNlXCJyaWdodFwiOnMtPW59dT17bGVmdDpzLHRvcDpvLHdpZHRoOm4rZS53aWR0aCxoZWlnaHQ6aStlLmhlaWdodCxjb2xvcjp0LmJhY2tkcm9wQ29sb3J9fW0ucHVzaCh7cm90YXRpb246cCxsYWJlbDp5LGZvbnQ6Uyxjb2xvcjpuLHN0cm9rZUNvbG9yOmwsc3Ryb2tlV2lkdGg6aCx0ZXh0T2Zmc2V0OkMsdGV4dEFsaWduOk0sdGV4dEJhc2VsaW5lOk8sdHJhbnNsYXRpb246W3Ysd10sYmFja2Ryb3A6dX0pfXJldHVybiBtfV9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCl7Y29uc3R7cG9zaXRpb246dCx0aWNrczplfT10aGlzLm9wdGlvbnM7aWYoLUV0KHRoaXMubGFiZWxSb3RhdGlvbikpcmV0dXJuXCJ0b3BcIj09PXQ/XCJsZWZ0XCI6XCJyaWdodFwiO2xldCBpPVwiY2VudGVyXCI7cmV0dXJuXCJzdGFydFwiPT09ZS5hbGlnbj9pPVwibGVmdFwiOlwiZW5kXCI9PT1lLmFsaWduJiYoaT1cInJpZ2h0XCIpLGl9X2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodCl7Y29uc3QgZT10aGlzLHtwb3NpdGlvbjppLHRpY2tzOntjcm9zc0FsaWduOm4sbWlycm9yOm8scGFkZGluZzpzfX09ZS5vcHRpb25zLGE9dCtzLHI9ZS5fZ2V0TGFiZWxTaXplcygpLndpZGVzdC53aWR0aDtsZXQgbCxjO3JldHVyblwibGVmdFwiPT09aT9vPyhsPVwibGVmdFwiLGM9ZS5yaWdodCtzKTooYz1lLnJpZ2h0LWEsXCJuZWFyXCI9PT1uP2w9XCJyaWdodFwiOlwiY2VudGVyXCI9PT1uPyhsPVwiY2VudGVyXCIsYy09ci8yKToobD1cImxlZnRcIixjPWUubGVmdCkpOlwicmlnaHRcIj09PWk/bz8obD1cInJpZ2h0XCIsYz1lLmxlZnQrcyk6KGM9ZS5sZWZ0K2EsXCJuZWFyXCI9PT1uP2w9XCJsZWZ0XCI6XCJjZW50ZXJcIj09PW4/KGw9XCJjZW50ZXJcIixjKz1yLzIpOihsPVwicmlnaHRcIixjPWUucmlnaHQpKTpsPVwicmlnaHRcIix7dGV4dEFsaWduOmwseDpjfX1fY29tcHV0ZUxhYmVsQXJlYSgpe2NvbnN0IHQ9dGhpcztpZih0Lm9wdGlvbnMudGlja3MubWlycm9yKXJldHVybjtjb25zdCBlPXQuY2hhcnQsaT10Lm9wdGlvbnMucG9zaXRpb247cmV0dXJuXCJsZWZ0XCI9PT1pfHxcInJpZ2h0XCI9PT1pP3t0b3A6MCxsZWZ0OnQubGVmdCxib3R0b206ZS5oZWlnaHQscmlnaHQ6dC5yaWdodH06XCJ0b3BcIj09PWl8fFwiYm90dG9tXCI9PT1pP3t0b3A6dC50b3AsbGVmdDowLGJvdHRvbTp0LmJvdHRvbSxyaWdodDplLndpZHRofTp2b2lkIDB9ZHJhd0JhY2tncm91bmQoKXtjb25zdHtjdHg6dCxvcHRpb25zOntiYWNrZ3JvdW5kQ29sb3I6ZX0sbGVmdDppLHRvcDpuLHdpZHRoOm8saGVpZ2h0OnN9PXRoaXM7ZSYmKHQuc2F2ZSgpLHQuZmlsbFN0eWxlPWUsdC5maWxsUmVjdChpLG4sbyxzKSx0LnJlc3RvcmUoKSl9Z2V0TGluZVdpZHRoRm9yVmFsdWUodCl7Y29uc3QgZT10aGlzLGk9ZS5vcHRpb25zLmdyaWQ7aWYoIWUuX2lzVmlzaWJsZSgpfHwhaS5kaXNwbGF5KXJldHVybiAwO2NvbnN0IG49ZS50aWNrcy5maW5kSW5kZXgoKGU9PmUudmFsdWU9PT10KSk7aWYobj49MCl7cmV0dXJuIGkuc2V0Q29udGV4dChlLmdldENvbnRleHQobikpLmxpbmVXaWR0aH1yZXR1cm4gMH1kcmF3R3JpZCh0KXtjb25zdCBlPXRoaXMsaT1lLm9wdGlvbnMuZ3JpZCxuPWUuY3R4LG89ZS5fZ3JpZExpbmVJdGVtc3x8KGUuX2dyaWRMaW5lSXRlbXM9ZS5fY29tcHV0ZUdyaWRMaW5lSXRlbXModCkpO2xldCBzLGE7Y29uc3Qgcj0odCxlLGkpPT57aS53aWR0aCYmaS5jb2xvciYmKG4uc2F2ZSgpLG4ubGluZVdpZHRoPWkud2lkdGgsbi5zdHJva2VTdHlsZT1pLmNvbG9yLG4uc2V0TGluZURhc2goaS5ib3JkZXJEYXNofHxbXSksbi5saW5lRGFzaE9mZnNldD1pLmJvcmRlckRhc2hPZmZzZXQsbi5iZWdpblBhdGgoKSxuLm1vdmVUbyh0LngsdC55KSxuLmxpbmVUbyhlLngsZS55KSxuLnN0cm9rZSgpLG4ucmVzdG9yZSgpKX07aWYoaS5kaXNwbGF5KWZvcihzPTAsYT1vLmxlbmd0aDtzPGE7KytzKXtjb25zdCB0PW9bc107aS5kcmF3T25DaGFydEFyZWEmJnIoe3g6dC54MSx5OnQueTF9LHt4OnQueDIseTp0LnkyfSx0KSxpLmRyYXdUaWNrcyYmcih7eDp0LnR4MSx5OnQudHkxfSx7eDp0LnR4Mix5OnQudHkyfSx7Y29sb3I6dC50aWNrQ29sb3Isd2lkdGg6dC50aWNrV2lkdGgsYm9yZGVyRGFzaDp0LnRpY2tCb3JkZXJEYXNoLGJvcmRlckRhc2hPZmZzZXQ6dC50aWNrQm9yZGVyRGFzaE9mZnNldH0pfX1kcmF3Qm9yZGVyKCl7Y29uc3QgdD10aGlzLHtjaGFydDplLGN0eDppLG9wdGlvbnM6e2dyaWQ6bn19PXQsbz1uLnNldENvbnRleHQodC5nZXRDb250ZXh0KCkpLHM9bi5kcmF3Qm9yZGVyP28uYm9yZGVyV2lkdGg6MDtpZighcylyZXR1cm47Y29uc3QgYT1uLnNldENvbnRleHQodC5nZXRDb250ZXh0KDApKS5saW5lV2lkdGgscj10Ll9ib3JkZXJWYWx1ZTtsZXQgbCxjLGgsZDt0LmlzSG9yaXpvbnRhbCgpPyhsPVh0KGUsdC5sZWZ0LHMpLXMvMixjPVh0KGUsdC5yaWdodCxhKSthLzIsaD1kPXIpOihoPVh0KGUsdC50b3Ascyktcy8yLGQ9WHQoZSx0LmJvdHRvbSxhKSthLzIsbD1jPXIpLGkuc2F2ZSgpLGkubGluZVdpZHRoPW8uYm9yZGVyV2lkdGgsaS5zdHJva2VTdHlsZT1vLmJvcmRlckNvbG9yLGkuYmVnaW5QYXRoKCksaS5tb3ZlVG8obCxoKSxpLmxpbmVUbyhjLGQpLGkuc3Ryb2tlKCksaS5yZXN0b3JlKCl9ZHJhd0xhYmVscyh0KXtjb25zdCBlPXRoaXM7aWYoIWUub3B0aW9ucy50aWNrcy5kaXNwbGF5KXJldHVybjtjb25zdCBpPWUuY3R4LG49ZS5fY29tcHV0ZUxhYmVsQXJlYSgpO24mJlp0KGksbik7Y29uc3Qgbz1lLl9sYWJlbEl0ZW1zfHwoZS5fbGFiZWxJdGVtcz1lLl9jb21wdXRlTGFiZWxJdGVtcyh0KSk7bGV0IHMsYTtmb3Iocz0wLGE9by5sZW5ndGg7czxhOysrcyl7Y29uc3QgdD1vW3NdLGU9dC5mb250LG49dC5sYWJlbDt0LmJhY2tkcm9wJiYoaS5maWxsU3R5bGU9dC5iYWNrZHJvcC5jb2xvcixpLmZpbGxSZWN0KHQuYmFja2Ryb3AubGVmdCx0LmJhY2tkcm9wLnRvcCx0LmJhY2tkcm9wLndpZHRoLHQuYmFja2Ryb3AuaGVpZ2h0KSksZWUoaSxuLDAsdC50ZXh0T2Zmc2V0LGUsdCl9biYmUXQoaSl9ZHJhd1RpdGxlKCl7Y29uc3R7Y3R4OnQsb3B0aW9uczp7cG9zaXRpb246ZSx0aXRsZTppLHJldmVyc2U6bn19PXRoaXM7aWYoIWkuZGlzcGxheSlyZXR1cm47Y29uc3Qgcz1CZShpLmZvbnQpLGE9RmUoaS5wYWRkaW5nKSxyPWkuYWxpZ247bGV0IGw9cy5saW5lSGVpZ2h0LzI7XCJib3R0b21cIj09PWU/KGwrPWEuYm90dG9tLFkoaS50ZXh0KSYmKGwrPXMubGluZUhlaWdodCooaS50ZXh0Lmxlbmd0aC0xKSkpOmwrPWEudG9wO2NvbnN0e3RpdGxlWDpjLHRpdGxlWTpoLG1heFdpZHRoOmQscm90YXRpb246dX09ZnVuY3Rpb24odCxlLGksbil7Y29uc3R7dG9wOnMsbGVmdDphLGJvdHRvbTpyLHJpZ2h0Omx9PXQ7bGV0IGMsaCxkLHU9MDtyZXR1cm4gdC5pc0hvcml6b250YWwoKT8oaD1vKG4sYSxsKSxkPUhpKHQsaSxlKSxjPWwtYSk6KGg9SGkodCxpLGUpLGQ9byhuLHIscyksdT1cImxlZnRcIj09PWk/LU10Ok10KSx7dGl0bGVYOmgsdGl0bGVZOmQsbWF4V2lkdGg6Yyxyb3RhdGlvbjp1fX0odGhpcyxsLGUscik7ZWUodCxpLnRleHQsMCwwLHMse2NvbG9yOmkuY29sb3IsbWF4V2lkdGg6ZCxyb3RhdGlvbjp1LHRleHRBbGlnbjpYaShyLGUsbiksdGV4dEJhc2VsaW5lOlwibWlkZGxlXCIsdHJhbnNsYXRpb246W2MsaF19KX1kcmF3KHQpe2NvbnN0IGU9dGhpcztlLl9pc1Zpc2libGUoKSYmKGUuZHJhd0JhY2tncm91bmQoKSxlLmRyYXdHcmlkKHQpLGUuZHJhd0JvcmRlcigpLGUuZHJhd1RpdGxlKCksZS5kcmF3TGFiZWxzKHQpKX1fbGF5ZXJzKCl7Y29uc3QgdD10aGlzLGU9dC5vcHRpb25zLGk9ZS50aWNrcyYmZS50aWNrcy56fHwwLG49ZS5ncmlkJiZlLmdyaWQuenx8MDtyZXR1cm4gdC5faXNWaXNpYmxlKCkmJnQuZHJhdz09PXFpLnByb3RvdHlwZS5kcmF3P1t7ejpuLGRyYXcoZSl7dC5kcmF3QmFja2dyb3VuZCgpLHQuZHJhd0dyaWQoZSksdC5kcmF3VGl0bGUoKX19LHt6Om4rMSxkcmF3KCl7dC5kcmF3Qm9yZGVyKCl9fSx7ejppLGRyYXcoZSl7dC5kcmF3TGFiZWxzKGUpfX1dOlt7ejppLGRyYXcoZSl7dC5kcmF3KGUpfX1dfWdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHQpe2NvbnN0IGU9dGhpcyxpPWUuY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpLG49ZS5heGlzK1wiQXhpc0lEXCIsbz1bXTtsZXQgcyxhO2ZvcihzPTAsYT1pLmxlbmd0aDtzPGE7KytzKXtjb25zdCBhPWlbc107YVtuXSE9PWUuaWR8fHQmJmEudHlwZSE9PXR8fG8ucHVzaChhKX1yZXR1cm4gb31fcmVzb2x2ZVRpY2tGb250T3B0aW9ucyh0KXtyZXR1cm4gQmUodGhpcy5vcHRpb25zLnRpY2tzLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KHQpKS5mb250KX1fbWF4RGlnaXRzKCl7Y29uc3QgdD10aGlzLGU9dC5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKS5saW5lSGVpZ2h0O3JldHVybih0LmlzSG9yaXpvbnRhbCgpP3Qud2lkdGg6dC5oZWlnaHQpL2V9fWZ1bmN0aW9uIEtpKHQsZT1bXCJcIl0saT10LG4sbz0oKCk9PnRbMF0pKXtodChuKXx8KG49cm4oXCJfZmFsbGJhY2tcIix0KSk7Y29uc3Qgcz17W1N5bWJvbC50b1N0cmluZ1RhZ106XCJPYmplY3RcIixfY2FjaGVhYmxlOiEwLF9zY29wZXM6dCxfcm9vdFNjb3BlczppLF9mYWxsYmFjazpuLF9nZXRUYXJnZXQ6byxvdmVycmlkZTpvPT5LaShbbywuLi50XSxlLGksbil9O3JldHVybiBuZXcgUHJveHkocyx7ZGVsZXRlUHJvcGVydHk6KGUsaSk9PihkZWxldGUgZVtpXSxkZWxldGUgZS5fa2V5cyxkZWxldGUgdFswXVtpXSwhMCksZ2V0OihpLG4pPT50bihpLG4sKCgpPT5mdW5jdGlvbih0LGUsaSxuKXtsZXQgbztmb3IoY29uc3QgcyBvZiBlKWlmKG89cm4oUWkocyx0KSxpKSxodChvKSlyZXR1cm4gSmkodCxvKT9zbihpLG4sdCxvKTpvfShuLGUsdCxpKSkpLGdldE93blByb3BlcnR5RGVzY3JpcHRvcjoodCxlKT0+UmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodC5fc2NvcGVzWzBdLGUpLGdldFByb3RvdHlwZU9mOigpPT5SZWZsZWN0LmdldFByb3RvdHlwZU9mKHRbMF0pLGhhczoodCxlKT0+bG4odCkuaW5jbHVkZXMoZSksb3duS2V5czp0PT5sbih0KSxzZXQ6KHQsZSxpKT0+KCh0Ll9zdG9yYWdlfHwodC5fc3RvcmFnZT1vKCkpKVtlXT1pLGRlbGV0ZSB0W2VdLGRlbGV0ZSB0Ll9rZXlzLCEwKX0pfWZ1bmN0aW9uIEdpKHQsZSxpLG4pe2NvbnN0IG89e19jYWNoZWFibGU6ITEsX3Byb3h5OnQsX2NvbnRleHQ6ZSxfc3ViUHJveHk6aSxfc3RhY2s6bmV3IFNldCxfZGVzY3JpcHRvcnM6WmkodCxuKSxzZXRDb250ZXh0OmU9PkdpKHQsZSxpLG4pLG92ZXJyaWRlOm89PkdpKHQub3ZlcnJpZGUobyksZSxpLG4pfTtyZXR1cm4gbmV3IFByb3h5KG8se2RlbGV0ZVByb3BlcnR5OihlLGkpPT4oZGVsZXRlIGVbaV0sZGVsZXRlIHRbaV0sITApLGdldDoodCxlLGkpPT50bih0LGUsKCgpPT5mdW5jdGlvbih0LGUsaSl7Y29uc3R7X3Byb3h5Om4sX2NvbnRleHQ6byxfc3ViUHJveHk6cyxfZGVzY3JpcHRvcnM6YX09dDtsZXQgcj1uW2VdO2R0KHIpJiZhLmlzU2NyaXB0YWJsZShlKSYmKHI9ZnVuY3Rpb24odCxlLGksbil7Y29uc3R7X3Byb3h5Om8sX2NvbnRleHQ6cyxfc3ViUHJveHk6YSxfc3RhY2s6cn09aTtpZihyLmhhcyh0KSl0aHJvdyBuZXcgRXJyb3IoXCJSZWN1cnNpb24gZGV0ZWN0ZWQ6IFwiK0FycmF5LmZyb20ocikuam9pbihcIi0+XCIpK1wiLT5cIit0KTtyLmFkZCh0KSxlPWUocyxhfHxuKSxyLmRlbGV0ZSh0KSxVKGUpJiYoZT1zbihvLl9zY29wZXMsbyx0LGUpKTtyZXR1cm4gZX0oZSxyLHQsaSkpO1kocikmJnIubGVuZ3RoJiYocj1mdW5jdGlvbih0LGUsaSxuKXtjb25zdHtfcHJveHk6byxfY29udGV4dDpzLF9zdWJQcm94eTphLF9kZXNjcmlwdG9yczpyfT1pO2lmKGh0KHMuaW5kZXgpJiZuKHQpKWU9ZVtzLmluZGV4JWUubGVuZ3RoXTtlbHNlIGlmKFUoZVswXSkpe2NvbnN0IGk9ZSxuPW8uX3Njb3Blcy5maWx0ZXIoKHQ9PnQhPT1pKSk7ZT1bXTtmb3IoY29uc3QgbCBvZiBpKXtjb25zdCBpPXNuKG4sbyx0LGwpO2UucHVzaChHaShpLHMsYSYmYVt0XSxyKSl9fXJldHVybiBlfShlLHIsdCxhLmlzSW5kZXhhYmxlKSk7SmkoZSxyKSYmKHI9R2kocixvLHMmJnNbZV0sYSkpO3JldHVybiByfSh0LGUsaSkpKSxnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6KGUsaSk9PmUuX2Rlc2NyaXB0b3JzLmFsbEtleXM/UmVmbGVjdC5oYXModCxpKT97ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9OnZvaWQgMDpSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LGkpLGdldFByb3RvdHlwZU9mOigpPT5SZWZsZWN0LmdldFByb3RvdHlwZU9mKHQpLGhhczooZSxpKT0+UmVmbGVjdC5oYXModCxpKSxvd25LZXlzOigpPT5SZWZsZWN0Lm93bktleXModCksc2V0OihlLGksbik9Pih0W2ldPW4sZGVsZXRlIGVbaV0sITApfSl9ZnVuY3Rpb24gWmkodCxlPXtzY3JpcHRhYmxlOiEwLGluZGV4YWJsZTohMH0pe2NvbnN0e19zY3JpcHRhYmxlOmk9ZS5zY3JpcHRhYmxlLF9pbmRleGFibGU6bj1lLmluZGV4YWJsZSxfYWxsS2V5czpvPWUuYWxsS2V5c309dDtyZXR1cm57YWxsS2V5czpvLHNjcmlwdGFibGU6aSxpbmRleGFibGU6bixpc1NjcmlwdGFibGU6ZHQoaSk/aTooKT0+aSxpc0luZGV4YWJsZTpkdChuKT9uOigpPT5ufX1jb25zdCBRaT0odCxlKT0+dD90K2N0KGUpOmUsSmk9KHQsZSk9PlUoZSkmJlwiYWRhcHRlcnNcIiE9PXQ7ZnVuY3Rpb24gdG4odCxlLGkpe2xldCBuPXRbZV07cmV0dXJuIGh0KG4pfHwobj1pKCksaHQobikmJih0W2VdPW4pKSxufWZ1bmN0aW9uIGVuKHQsZSxpKXtyZXR1cm4gZHQodCk/dChlLGkpOnR9Y29uc3Qgbm49KHQsZSk9PiEwPT09dD9lOlwic3RyaW5nXCI9PXR5cGVvZiB0P2x0KGUsdCk6dm9pZCAwO2Z1bmN0aW9uIG9uKHQsZSxpLG4pe2Zvcihjb25zdCBvIG9mIGUpe2NvbnN0IGU9bm4oaSxvKTtpZihlKXt0LmFkZChlKTtjb25zdCBvPWVuKGUuX2ZhbGxiYWNrLGksZSk7aWYoaHQobykmJm8hPT1pJiZvIT09bilyZXR1cm4gb31lbHNlIGlmKCExPT09ZSYmaHQobikmJmkhPT1uKXJldHVybiBudWxsfXJldHVybiExfWZ1bmN0aW9uIHNuKHQsZSxpLG4pe2NvbnN0IG89ZS5fcm9vdFNjb3BlcyxzPWVuKGUuX2ZhbGxiYWNrLGksbiksYT1bLi4udCwuLi5vXSxyPW5ldyBTZXQ7ci5hZGQobik7bGV0IGw9YW4ocixhLGksc3x8aSk7cmV0dXJuIG51bGwhPT1sJiYoKCFodChzKXx8cz09PWl8fChsPWFuKHIsYSxzLGwpLG51bGwhPT1sKSkmJktpKEFycmF5LmZyb20ociksW1wiXCJdLG8scywoKCk9PmZ1bmN0aW9uKHQsZSxpKXtjb25zdCBuPXQuX2dldFRhcmdldCgpO2UgaW4gbnx8KG5bZV09e30pO2NvbnN0IG89bltlXTtpZihZKG8pJiZVKGkpKXJldHVybiBpO3JldHVybiBvfShlLGksbikpKSl9ZnVuY3Rpb24gYW4odCxlLGksbil7Zm9yKDtpOylpPW9uKHQsZSxpLG4pO3JldHVybiBpfWZ1bmN0aW9uIHJuKHQsZSl7Zm9yKGNvbnN0IGkgb2YgZSl7aWYoIWkpY29udGludWU7Y29uc3QgZT1pW3RdO2lmKGh0KGUpKXJldHVybiBlfX1mdW5jdGlvbiBsbih0KXtsZXQgZT10Ll9rZXlzO3JldHVybiBlfHwoZT10Ll9rZXlzPWZ1bmN0aW9uKHQpe2NvbnN0IGU9bmV3IFNldDtmb3IoY29uc3QgaSBvZiB0KWZvcihjb25zdCB0IG9mIE9iamVjdC5rZXlzKGkpLmZpbHRlcigodD0+IXQuc3RhcnRzV2l0aChcIl9cIikpKSllLmFkZCh0KTtyZXR1cm4gQXJyYXkuZnJvbShlKX0odC5fc2NvcGVzKSksZX1jb25zdCBjbj1OdW1iZXIuRVBTSUxPTnx8MWUtMTQsaG49KHQsZSk9PmU8dC5sZW5ndGgmJiF0W2VdLnNraXAmJnRbZV0sZG49dD0+XCJ4XCI9PT10P1wieVwiOlwieFwiO2Z1bmN0aW9uIHVuKHQsZSxpLG4pe2NvbnN0IG89dC5za2lwP2U6dCxzPWUsYT1pLnNraXA/ZTppLHI9QnQocyxvKSxsPUJ0KGEscyk7bGV0IGM9ci8ocitsKSxoPWwvKHIrbCk7Yz1pc05hTihjKT8wOmMsaD1pc05hTihoKT8wOmg7Y29uc3QgZD1uKmMsdT1uKmg7cmV0dXJue3ByZXZpb3VzOnt4OnMueC1kKihhLngtby54KSx5OnMueS1kKihhLnktby55KX0sbmV4dDp7eDpzLngrdSooYS54LW8ueCkseTpzLnkrdSooYS55LW8ueSl9fX1mdW5jdGlvbiBmbih0LGU9XCJ4XCIpe2NvbnN0IGk9ZG4oZSksbj10Lmxlbmd0aCxvPUFycmF5KG4pLmZpbGwoMCkscz1BcnJheShuKTtsZXQgYSxyLGwsYz1obih0LDApO2ZvcihhPTA7YTxuOysrYSlpZihyPWwsbD1jLGM9aG4odCxhKzEpLGwpe2lmKGMpe2NvbnN0IHQ9Y1tlXS1sW2VdO29bYV09MCE9PXQ/KGNbaV0tbFtpXSkvdDowfXNbYV09cj9jP0R0KG9bYS0xXSkhPT1EdChvW2FdKT8wOihvW2EtMV0rb1thXSkvMjpvW2EtMV06b1thXX0hZnVuY3Rpb24odCxlLGkpe2NvbnN0IG49dC5sZW5ndGg7bGV0IG8scyxhLHIsbCxjPWhuKHQsMCk7Zm9yKGxldCBoPTA7aDxuLTE7KytoKWw9YyxjPWhuKHQsaCsxKSxsJiZjJiYoQXQoZVtoXSwwLGNuKT9pW2hdPWlbaCsxXT0wOihvPWlbaF0vZVtoXSxzPWlbaCsxXS9lW2hdLHI9TWF0aC5wb3cobywyKStNYXRoLnBvdyhzLDIpLHI8PTl8fChhPTMvTWF0aC5zcXJ0KHIpLGlbaF09byphKmVbaF0saVtoKzFdPXMqYSplW2hdKSkpfSh0LG8scyksZnVuY3Rpb24odCxlLGk9XCJ4XCIpe2NvbnN0IG49ZG4oaSksbz10Lmxlbmd0aDtsZXQgcyxhLHIsbD1obih0LDApO2ZvcihsZXQgYz0wO2M8bzsrK2Mpe2lmKGE9cixyPWwsbD1obih0LGMrMSksIXIpY29udGludWU7Y29uc3Qgbz1yW2ldLGg9cltuXTthJiYocz0oby1hW2ldKS8zLHJbYGNwMSR7aX1gXT1vLXMscltgY3AxJHtufWBdPWgtcyplW2NdKSxsJiYocz0obFtpXS1vKS8zLHJbYGNwMiR7aX1gXT1vK3MscltgY3AyJHtufWBdPWgrcyplW2NdKX19KHQscyxlKX1mdW5jdGlvbiBnbih0LGUsaSl7cmV0dXJuIE1hdGgubWF4KE1hdGgubWluKHQsaSksZSl9ZnVuY3Rpb24gcG4odCxlLGksbixvKXtsZXQgcyxhLHIsbDtpZihlLnNwYW5HYXBzJiYodD10LmZpbHRlcigodD0+IXQuc2tpcCkpKSxcIm1vbm90b25lXCI9PT1lLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUpZm4odCxvKTtlbHNle2xldCBpPW4/dFt0Lmxlbmd0aC0xXTp0WzBdO2ZvcihzPTAsYT10Lmxlbmd0aDtzPGE7KytzKXI9dFtzXSxsPXVuKGkscix0W01hdGgubWluKHMrMSxhLShuPzA6MSkpJWFdLGUudGVuc2lvbiksci5jcDF4PWwucHJldmlvdXMueCxyLmNwMXk9bC5wcmV2aW91cy55LHIuY3AyeD1sLm5leHQueCxyLmNwMnk9bC5uZXh0LnksaT1yfWUuY2FwQmV6aWVyUG9pbnRzJiZmdW5jdGlvbih0LGUpe2xldCBpLG4sbyxzLGEscj1HdCh0WzBdLGUpO2ZvcihpPTAsbj10Lmxlbmd0aDtpPG47KytpKWE9cyxzPXIscj1pPG4tMSYmR3QodFtpKzFdLGUpLHMmJihvPXRbaV0sYSYmKG8uY3AxeD1nbihvLmNwMXgsZS5sZWZ0LGUucmlnaHQpLG8uY3AxeT1nbihvLmNwMXksZS50b3AsZS5ib3R0b20pKSxyJiYoby5jcDJ4PWduKG8uY3AyeCxlLmxlZnQsZS5yaWdodCksby5jcDJ5PWduKG8uY3AyeSxlLnRvcCxlLmJvdHRvbSkpKX0odCxpKX1mdW5jdGlvbiBtbih0LGUsaSxuKXtyZXR1cm57eDp0LngraSooZS54LXQueCkseTp0LnkraSooZS55LXQueSl9fWZ1bmN0aW9uIHhuKHQsZSxpLG4pe3JldHVybnt4OnQueCtpKihlLngtdC54KSx5OlwibWlkZGxlXCI9PT1uP2k8LjU/dC55OmUueTpcImFmdGVyXCI9PT1uP2k8MT90Lnk6ZS55Omk+MD9lLnk6dC55fX1mdW5jdGlvbiBibih0LGUsaSxuKXtjb25zdCBvPXt4OnQuY3AyeCx5OnQuY3AyeX0scz17eDplLmNwMXgseTplLmNwMXl9LGE9bW4odCxvLGkpLHI9bW4obyxzLGkpLGw9bW4ocyxlLGkpLGM9bW4oYSxyLGkpLGg9bW4ocixsLGkpO3JldHVybiBtbihjLGgsaSl9ZnVuY3Rpb24gX24odCxlLGkpe3JldHVybiB0P2Z1bmN0aW9uKHQsZSl7cmV0dXJue3g6aT0+dCt0K2UtaSxzZXRXaWR0aCh0KXtlPXR9LHRleHRBbGlnbjp0PT5cImNlbnRlclwiPT09dD90OlwicmlnaHRcIj09PXQ/XCJsZWZ0XCI6XCJyaWdodFwiLHhQbHVzOih0LGUpPT50LWUsbGVmdEZvckx0cjoodCxlKT0+dC1lfX0oZSxpKTp7eDp0PT50LHNldFdpZHRoKHQpe30sdGV4dEFsaWduOnQ9PnQseFBsdXM6KHQsZSk9PnQrZSxsZWZ0Rm9yTHRyOih0LGUpPT50fX1mdW5jdGlvbiB5bih0LGUpe2xldCBpLG47XCJsdHJcIiE9PWUmJlwicnRsXCIhPT1lfHwoaT10LmNhbnZhcy5zdHlsZSxuPVtpLmdldFByb3BlcnR5VmFsdWUoXCJkaXJlY3Rpb25cIiksaS5nZXRQcm9wZXJ0eVByaW9yaXR5KFwiZGlyZWN0aW9uXCIpXSxpLnNldFByb3BlcnR5KFwiZGlyZWN0aW9uXCIsZSxcImltcG9ydGFudFwiKSx0LnByZXZUZXh0RGlyZWN0aW9uPW4pfWZ1bmN0aW9uIHZuKHQsZSl7dm9pZCAwIT09ZSYmKGRlbGV0ZSB0LnByZXZUZXh0RGlyZWN0aW9uLHQuY2FudmFzLnN0eWxlLnNldFByb3BlcnR5KFwiZGlyZWN0aW9uXCIsZVswXSxlWzFdKSl9ZnVuY3Rpb24gd24odCl7cmV0dXJuXCJhbmdsZVwiPT09dD97YmV0d2VlbjpOdCxjb21wYXJlOlZ0LG5vcm1hbGl6ZTpXdH06e2JldHdlZW46KHQsZSxpKT0+dD49TWF0aC5taW4oZSxpKSYmdDw9TWF0aC5tYXgoaSxlKSxjb21wYXJlOih0LGUpPT50LWUsbm9ybWFsaXplOnQ9PnR9fWZ1bmN0aW9uIE1uKHtzdGFydDp0LGVuZDplLGNvdW50OmksbG9vcDpuLHN0eWxlOm99KXtyZXR1cm57c3RhcnQ6dCVpLGVuZDplJWksbG9vcDpuJiYoZS10KzEpJWk9PTAsc3R5bGU6b319ZnVuY3Rpb24ga24odCxlLGkpe2lmKCFpKXJldHVyblt0XTtjb25zdHtwcm9wZXJ0eTpuLHN0YXJ0Om8sZW5kOnN9PWksYT1lLmxlbmd0aCx7Y29tcGFyZTpyLGJldHdlZW46bCxub3JtYWxpemU6Y309d24obikse3N0YXJ0OmgsZW5kOmQsbG9vcDp1LHN0eWxlOmZ9PWZ1bmN0aW9uKHQsZSxpKXtjb25zdHtwcm9wZXJ0eTpuLHN0YXJ0Om8sZW5kOnN9PWkse2JldHdlZW46YSxub3JtYWxpemU6cn09d24obiksbD1lLmxlbmd0aDtsZXQgYyxoLHtzdGFydDpkLGVuZDp1LGxvb3A6Zn09dDtpZihmKXtmb3IoZCs9bCx1Kz1sLGM9MCxoPWw7YzxoJiZhKHIoZVtkJWxdW25dKSxvLHMpOysrYylkLS0sdS0tO2QlPWwsdSU9bH1yZXR1cm4gdTxkJiYodSs9bCkse3N0YXJ0OmQsZW5kOnUsbG9vcDpmLHN0eWxlOnQuc3R5bGV9fSh0LGUsaSksZz1bXTtsZXQgcCxtLHgsYj0hMSxfPW51bGw7Y29uc3QgeT0oKT0+Ynx8bChvLHgscCkmJjAhPT1yKG8seCksdj0oKT0+IWJ8fDA9PT1yKHMscCl8fGwocyx4LHApO2ZvcihsZXQgdD1oLGk9aDt0PD1kOysrdCltPWVbdCVhXSxtLnNraXB8fChwPWMobVtuXSkscCE9PXgmJihiPWwocCxvLHMpLG51bGw9PT1fJiZ5KCkmJihfPTA9PT1yKHAsbyk/dDppKSxudWxsIT09XyYmdigpJiYoZy5wdXNoKE1uKHtzdGFydDpfLGVuZDp0LGxvb3A6dSxjb3VudDphLHN0eWxlOmZ9KSksXz1udWxsKSxpPXQseD1wKSk7cmV0dXJuIG51bGwhPT1fJiZnLnB1c2goTW4oe3N0YXJ0Ol8sZW5kOmQsbG9vcDp1LGNvdW50OmEsc3R5bGU6Zn0pKSxnfWZ1bmN0aW9uIFNuKHQsZSl7Y29uc3QgaT1bXSxuPXQuc2VnbWVudHM7Zm9yKGxldCBvPTA7bzxuLmxlbmd0aDtvKyspe2NvbnN0IHM9a24obltvXSx0LnBvaW50cyxlKTtzLmxlbmd0aCYmaS5wdXNoKC4uLnMpfXJldHVybiBpfWZ1bmN0aW9uIFBuKHQsZSl7Y29uc3QgaT10LnBvaW50cyxuPXQub3B0aW9ucy5zcGFuR2FwcyxvPWkubGVuZ3RoO2lmKCFvKXJldHVybltdO2NvbnN0IHM9ISF0Ll9sb29wLHtzdGFydDphLGVuZDpyfT1mdW5jdGlvbih0LGUsaSxuKXtsZXQgbz0wLHM9ZS0xO2lmKGkmJiFuKWZvcig7bzxlJiYhdFtvXS5za2lwOylvKys7Zm9yKDtvPGUmJnRbb10uc2tpcDspbysrO2ZvcihvJT1lLGkmJihzKz1vKTtzPm8mJnRbcyVlXS5za2lwOylzLS07cmV0dXJuIHMlPWUse3N0YXJ0Om8sZW5kOnN9fShpLG8scyxuKTtpZighMD09PW4pcmV0dXJuIERuKFt7c3RhcnQ6YSxlbmQ6cixsb29wOnN9XSxpLGUpO3JldHVybiBEbihmdW5jdGlvbih0LGUsaSxuKXtjb25zdCBvPXQubGVuZ3RoLHM9W107bGV0IGEscj1lLGw9dFtlXTtmb3IoYT1lKzE7YTw9aTsrK2Epe2NvbnN0IGk9dFthJW9dO2kuc2tpcHx8aS5zdG9wP2wuc2tpcHx8KG49ITEscy5wdXNoKHtzdGFydDplJW8sZW5kOihhLTEpJW8sbG9vcDpufSksZT1yPWkuc3RvcD9hOm51bGwpOihyPWEsbC5za2lwJiYoZT1hKSksbD1pfXJldHVybiBudWxsIT09ciYmcy5wdXNoKHtzdGFydDplJW8sZW5kOnIlbyxsb29wOm59KSxzfShpLGEscjxhP3IrbzpyLCEhdC5fZnVsbExvb3AmJjA9PT1hJiZyPT09by0xKSxpLGUpfWZ1bmN0aW9uIERuKHQsZSxpKXtyZXR1cm4gaSYmaS5zZXRDb250ZXh0JiZlP2Z1bmN0aW9uKHQsZSxpKXtjb25zdCBuPWUubGVuZ3RoLG89W107bGV0IHM9dFswXS5zdGFydCxhPXM7Zm9yKGNvbnN0IHIgb2YgdCl7bGV0IHQsbCxjPWVbcyVuXTtmb3IoYT1zKzE7YTw9ci5lbmQ7YSsrKXtjb25zdCBoPWVbYSVuXTtsPUNuKGkuc2V0Q29udGV4dCh7dHlwZTpcInNlZ21lbnRcIixwMDpjLHAxOmh9KSksT24obCx0KSYmKG8ucHVzaCh7c3RhcnQ6cyxlbmQ6YS0xLGxvb3A6ci5sb29wLHN0eWxlOnR9KSx0PWwscz1hLTEpLGM9aCx0PWx9czxhLTEmJihvLnB1c2goe3N0YXJ0OnMsZW5kOmEtMSxsb29wOnIubG9vcCxzdHlsZTpsfSkscz1hLTEpfXJldHVybiBvfSh0LGUsaSk6dH1mdW5jdGlvbiBDbih0KXtyZXR1cm57YmFja2dyb3VuZENvbG9yOnQuYmFja2dyb3VuZENvbG9yLGJvcmRlckNhcFN0eWxlOnQuYm9yZGVyQ2FwU3R5bGUsYm9yZGVyRGFzaDp0LmJvcmRlckRhc2gsYm9yZGVyRGFzaE9mZnNldDp0LmJvcmRlckRhc2hPZmZzZXQsYm9yZGVySm9pblN0eWxlOnQuYm9yZGVySm9pblN0eWxlLGJvcmRlcldpZHRoOnQuYm9yZGVyV2lkdGgsYm9yZGVyQ29sb3I6dC5ib3JkZXJDb2xvcn19ZnVuY3Rpb24gT24odCxlKXtyZXR1cm4gZSYmSlNPTi5zdHJpbmdpZnkodCkhPT1KU09OLnN0cmluZ2lmeShlKX12YXIgVG49T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsZWFzaW5nRWZmZWN0czp4aSxjb2xvcjpXLGdldEhvdmVyQ29sb3I6Tixub29wOkgsdWlkOmosaXNOdWxsT3JVbmRlZjokLGlzQXJyYXk6WSxpc09iamVjdDpVLGlzRmluaXRlOlgsZmluaXRlT3JEZWZhdWx0OnEsdmFsdWVPckRlZmF1bHQ6Syx0b1BlcmNlbnRhZ2U6Ryx0b0RpbWVuc2lvbjpaLGNhbGxiYWNrOlEsZWFjaDpKLF9lbGVtZW50c0VxdWFsOnR0LGNsb25lOmV0LF9tZXJnZXI6bnQsbWVyZ2U6b3QsbWVyZ2VJZjpzdCxfbWVyZ2VySWY6YXQsX2RlcHJlY2F0ZWQ6ZnVuY3Rpb24odCxlLGksbil7dm9pZCAwIT09ZSYmY29uc29sZS53YXJuKHQrJzogXCInK2krJ1wiIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCInK24rJ1wiIGluc3RlYWQnKX0scmVzb2x2ZU9iamVjdEtleTpsdCxfY2FwaXRhbGl6ZTpjdCxkZWZpbmVkOmh0LGlzRnVuY3Rpb246ZHQsc2V0c0VxdWFsOnV0LHRvRm9udFN0cmluZzokdCxfbWVhc3VyZVRleHQ6WXQsX2xvbmdlc3RUZXh0OlV0LF9hbGlnblBpeGVsOlh0LGNsZWFyQ2FudmFzOnF0LGRyYXdQb2ludDpLdCxfaXNQb2ludEluQXJlYTpHdCxjbGlwQXJlYTpadCx1bmNsaXBBcmVhOlF0LF9zdGVwcGVkTGluZVRvOkp0LF9iZXppZXJDdXJ2ZVRvOnRlLHJlbmRlclRleHQ6ZWUsYWRkUm91bmRlZFJlY3RQYXRoOm5lLF9sb29rdXA6b2UsX2xvb2t1cEJ5S2V5OnNlLF9ybG9va3VwQnlLZXk6YWUsX2ZpbHRlckJldHdlZW46cmUsbGlzdGVuQXJyYXlFdmVudHM6Y2UsdW5saXN0ZW5BcnJheUV2ZW50czpoZSxfYXJyYXlVbmlxdWU6ZGUsX2NyZWF0ZVJlc29sdmVyOktpLF9hdHRhY2hDb250ZXh0OkdpLF9kZXNjcmlwdG9yczpaaSxzcGxpbmVDdXJ2ZTp1bixzcGxpbmVDdXJ2ZU1vbm90b25lOmZuLF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzOnBuLF9nZXRQYXJlbnROb2RlOnVlLGdldFN0eWxlOnBlLGdldFJlbGF0aXZlUG9zaXRpb246YmUsZ2V0TWF4aW11bVNpemU6eWUscmV0aW5hU2NhbGU6dmUsc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9uczp3ZSxyZWFkVXNlZFNpemU6TWUsZm9udFN0cmluZzpmdW5jdGlvbih0LGUsaSl7cmV0dXJuIGUrXCIgXCIrdCtcInB4IFwiK2l9LHJlcXVlc3RBbmltRnJhbWU6dCx0aHJvdHRsZWQ6ZSxkZWJvdW5jZTppLF90b0xlZnRSaWdodENlbnRlcjpuLF9hbGlnblN0YXJ0RW5kOm8sX3RleHRYOnMsX3BvaW50SW5MaW5lOm1uLF9zdGVwcGVkSW50ZXJwb2xhdGlvbjp4bixfYmV6aWVySW50ZXJwb2xhdGlvbjpibixmb3JtYXROdW1iZXI6RmksdG9MaW5lSGVpZ2h0OlJlLF9yZWFkVmFsdWVUb1Byb3BzOkVlLHRvVFJCTDp6ZSx0b1RSQkxDb3JuZXJzOkllLHRvUGFkZGluZzpGZSx0b0ZvbnQ6QmUscmVzb2x2ZTpWZSxfYWRkR3JhY2U6V2UsUEk6YnQsVEFVOl90LFBJVEFVOnl0LElORklOSVRZOnZ0LFJBRF9QRVJfREVHOnd0LEhBTEZfUEk6TXQsUVVBUlRFUl9QSTprdCxUV09fVEhJUkRTX1BJOlN0LGxvZzEwOlB0LHNpZ246RHQsbmljZU51bTpDdCxfZmFjdG9yaXplOk90LGlzTnVtYmVyOlR0LGFsbW9zdEVxdWFsczpBdCxhbG1vc3RXaG9sZTpMdCxfc2V0TWluQW5kTWF4QnlLZXk6UnQsdG9SYWRpYW5zOkV0LHRvRGVncmVlczp6dCxfZGVjaW1hbFBsYWNlczpJdCxnZXRBbmdsZUZyb21Qb2ludDpGdCxkaXN0YW5jZUJldHdlZW5Qb2ludHM6QnQsX2FuZ2xlRGlmZjpWdCxfbm9ybWFsaXplQW5nbGU6V3QsX2FuZ2xlQmV0d2VlbjpOdCxfbGltaXRWYWx1ZTpIdCxfaW50MTZSYW5nZTpqdCxnZXRSdGxBZGFwdGVyOl9uLG92ZXJyaWRlVGV4dERpcmVjdGlvbjp5bixyZXN0b3JlVGV4dERpcmVjdGlvbjp2bixfYm91bmRTZWdtZW50OmtuLF9ib3VuZFNlZ21lbnRzOlNuLF9jb21wdXRlU2VnbWVudHM6UG59KTtjbGFzcyBBbntjb25zdHJ1Y3Rvcih0LGUsaSl7dGhpcy50eXBlPXQsdGhpcy5zY29wZT1lLHRoaXMub3ZlcnJpZGU9aSx0aGlzLml0ZW1zPU9iamVjdC5jcmVhdGUobnVsbCl9aXNGb3JUeXBlKHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YuY2FsbCh0aGlzLnR5cGUucHJvdG90eXBlLHQucHJvdG90eXBlKX1yZWdpc3Rlcih0KXtjb25zdCBlPXRoaXMsaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7bGV0IG47KGZ1bmN0aW9uKHQpe3JldHVyblwiaWRcImluIHQmJlwiZGVmYXVsdHNcImluIHR9KShpKSYmKG49ZS5yZWdpc3RlcihpKSk7Y29uc3Qgbz1lLml0ZW1zLHM9dC5pZCxhPWUuc2NvcGUrXCIuXCIrcztpZighcyl0aHJvdyBuZXcgRXJyb3IoXCJjbGFzcyBkb2VzIG5vdCBoYXZlIGlkOiBcIit0KTtyZXR1cm4gcyBpbiBvfHwob1tzXT10LGZ1bmN0aW9uKHQsZSxpKXtjb25zdCBuPW90KE9iamVjdC5jcmVhdGUobnVsbCksW2k/eHQuZ2V0KGkpOnt9LHh0LmdldChlKSx0LmRlZmF1bHRzXSk7eHQuc2V0KGUsbiksdC5kZWZhdWx0Um91dGVzJiZmdW5jdGlvbih0LGUpe09iamVjdC5rZXlzKGUpLmZvckVhY2goKGk9Pntjb25zdCBuPWkuc3BsaXQoXCIuXCIpLG89bi5wb3AoKSxzPVt0XS5jb25jYXQobikuam9pbihcIi5cIiksYT1lW2ldLnNwbGl0KFwiLlwiKSxyPWEucG9wKCksbD1hLmpvaW4oXCIuXCIpO3h0LnJvdXRlKHMsbyxsLHIpfSkpfShlLHQuZGVmYXVsdFJvdXRlcyk7dC5kZXNjcmlwdG9ycyYmeHQuZGVzY3JpYmUoZSx0LmRlc2NyaXB0b3JzKX0odCxhLG4pLGUub3ZlcnJpZGUmJnh0Lm92ZXJyaWRlKHQuaWQsdC5vdmVycmlkZXMpKSxhfWdldCh0KXtyZXR1cm4gdGhpcy5pdGVtc1t0XX11bnJlZ2lzdGVyKHQpe2NvbnN0IGU9dGhpcy5pdGVtcyxpPXQuaWQsbj10aGlzLnNjb3BlO2kgaW4gZSYmZGVsZXRlIGVbaV0sbiYmaSBpbiB4dFtuXSYmKGRlbGV0ZSB4dFtuXVtpXSx0aGlzLm92ZXJyaWRlJiZkZWxldGUgZnRbaV0pfX12YXIgTG49bmV3IGNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5jb250cm9sbGVycz1uZXcgQW4oRWksXCJkYXRhc2V0c1wiLCEwKSx0aGlzLmVsZW1lbnRzPW5ldyBBbih6aSxcImVsZW1lbnRzXCIpLHRoaXMucGx1Z2lucz1uZXcgQW4oT2JqZWN0LFwicGx1Z2luc1wiKSx0aGlzLnNjYWxlcz1uZXcgQW4ocWksXCJzY2FsZXNcIiksdGhpcy5fdHlwZWRSZWdpc3RyaWVzPVt0aGlzLmNvbnRyb2xsZXJzLHRoaXMuc2NhbGVzLHRoaXMuZWxlbWVudHNdfWFkZCguLi50KXt0aGlzLl9lYWNoKFwicmVnaXN0ZXJcIix0KX1yZW1vdmUoLi4udCl7dGhpcy5fZWFjaChcInVucmVnaXN0ZXJcIix0KX1hZGRDb250cm9sbGVycyguLi50KXt0aGlzLl9lYWNoKFwicmVnaXN0ZXJcIix0LHRoaXMuY29udHJvbGxlcnMpfWFkZEVsZW1lbnRzKC4uLnQpe3RoaXMuX2VhY2goXCJyZWdpc3RlclwiLHQsdGhpcy5lbGVtZW50cyl9YWRkUGx1Z2lucyguLi50KXt0aGlzLl9lYWNoKFwicmVnaXN0ZXJcIix0LHRoaXMucGx1Z2lucyl9YWRkU2NhbGVzKC4uLnQpe3RoaXMuX2VhY2goXCJyZWdpc3RlclwiLHQsdGhpcy5zY2FsZXMpfWdldENvbnRyb2xsZXIodCl7cmV0dXJuIHRoaXMuX2dldCh0LHRoaXMuY29udHJvbGxlcnMsXCJjb250cm9sbGVyXCIpfWdldEVsZW1lbnQodCl7cmV0dXJuIHRoaXMuX2dldCh0LHRoaXMuZWxlbWVudHMsXCJlbGVtZW50XCIpfWdldFBsdWdpbih0KXtyZXR1cm4gdGhpcy5fZ2V0KHQsdGhpcy5wbHVnaW5zLFwicGx1Z2luXCIpfWdldFNjYWxlKHQpe3JldHVybiB0aGlzLl9nZXQodCx0aGlzLnNjYWxlcyxcInNjYWxlXCIpfXJlbW92ZUNvbnRyb2xsZXJzKC4uLnQpe3RoaXMuX2VhY2goXCJ1bnJlZ2lzdGVyXCIsdCx0aGlzLmNvbnRyb2xsZXJzKX1yZW1vdmVFbGVtZW50cyguLi50KXt0aGlzLl9lYWNoKFwidW5yZWdpc3RlclwiLHQsdGhpcy5lbGVtZW50cyl9cmVtb3ZlUGx1Z2lucyguLi50KXt0aGlzLl9lYWNoKFwidW5yZWdpc3RlclwiLHQsdGhpcy5wbHVnaW5zKX1yZW1vdmVTY2FsZXMoLi4udCl7dGhpcy5fZWFjaChcInVucmVnaXN0ZXJcIix0LHRoaXMuc2NhbGVzKX1fZWFjaCh0LGUsaSl7Y29uc3Qgbj10aGlzO1suLi5lXS5mb3JFYWNoKChlPT57Y29uc3Qgbz1pfHxuLl9nZXRSZWdpc3RyeUZvclR5cGUoZSk7aXx8by5pc0ZvclR5cGUoZSl8fG89PT1uLnBsdWdpbnMmJmUuaWQ/bi5fZXhlYyh0LG8sZSk6SihlLChlPT57Y29uc3Qgbz1pfHxuLl9nZXRSZWdpc3RyeUZvclR5cGUoZSk7bi5fZXhlYyh0LG8sZSl9KSl9KSl9X2V4ZWModCxlLGkpe2NvbnN0IG49Y3QodCk7UShpW1wiYmVmb3JlXCIrbl0sW10saSksZVt0XShpKSxRKGlbXCJhZnRlclwiK25dLFtdLGkpfV9nZXRSZWdpc3RyeUZvclR5cGUodCl7Zm9yKGxldCBlPTA7ZTx0aGlzLl90eXBlZFJlZ2lzdHJpZXMubGVuZ3RoO2UrKyl7Y29uc3QgaT10aGlzLl90eXBlZFJlZ2lzdHJpZXNbZV07aWYoaS5pc0ZvclR5cGUodCkpcmV0dXJuIGl9cmV0dXJuIHRoaXMucGx1Z2luc31fZ2V0KHQsZSxpKXtjb25zdCBuPWUuZ2V0KHQpO2lmKHZvaWQgMD09PW4pdGhyb3cgbmV3IEVycm9yKCdcIicrdCsnXCIgaXMgbm90IGEgcmVnaXN0ZXJlZCAnK2krXCIuXCIpO3JldHVybiBufX07Y2xhc3MgUm57Y29uc3RydWN0b3IoKXt0aGlzLl9pbml0PVtdfW5vdGlmeSh0LGUsaSxuKXtjb25zdCBvPXRoaXM7XCJiZWZvcmVJbml0XCI9PT1lJiYoby5faW5pdD1vLl9jcmVhdGVEZXNjcmlwdG9ycyh0LCEwKSxvLl9ub3RpZnkoby5faW5pdCx0LFwiaW5zdGFsbFwiKSk7Y29uc3Qgcz1uP28uX2Rlc2NyaXB0b3JzKHQpLmZpbHRlcihuKTpvLl9kZXNjcmlwdG9ycyh0KSxhPW8uX25vdGlmeShzLHQsZSxpKTtyZXR1cm5cImRlc3Ryb3lcIj09PWUmJihvLl9ub3RpZnkocyx0LFwic3RvcFwiKSxvLl9ub3RpZnkoby5faW5pdCx0LFwidW5pbnN0YWxsXCIpKSxhfV9ub3RpZnkodCxlLGksbil7bj1ufHx7fTtmb3IoY29uc3QgbyBvZiB0KXtjb25zdCB0PW8ucGx1Z2luO2lmKCExPT09USh0W2ldLFtlLG4sby5vcHRpb25zXSx0KSYmbi5jYW5jZWxhYmxlKXJldHVybiExfXJldHVybiEwfWludmFsaWRhdGUoKXskKHRoaXMuX2NhY2hlKXx8KHRoaXMuX29sZENhY2hlPXRoaXMuX2NhY2hlLHRoaXMuX2NhY2hlPXZvaWQgMCl9X2Rlc2NyaXB0b3JzKHQpe2lmKHRoaXMuX2NhY2hlKXJldHVybiB0aGlzLl9jYWNoZTtjb25zdCBlPXRoaXMuX2NhY2hlPXRoaXMuX2NyZWF0ZURlc2NyaXB0b3JzKHQpO3JldHVybiB0aGlzLl9ub3RpZnlTdGF0ZUNoYW5nZXModCksZX1fY3JlYXRlRGVzY3JpcHRvcnModCxlKXtjb25zdCBpPXQmJnQuY29uZmlnLG49SyhpLm9wdGlvbnMmJmkub3B0aW9ucy5wbHVnaW5zLHt9KSxvPWZ1bmN0aW9uKHQpe2NvbnN0IGU9W10saT1PYmplY3Qua2V5cyhMbi5wbHVnaW5zLml0ZW1zKTtmb3IobGV0IHQ9MDt0PGkubGVuZ3RoO3QrKyllLnB1c2goTG4uZ2V0UGx1Z2luKGlbdF0pKTtjb25zdCBuPXQucGx1Z2luc3x8W107Zm9yKGxldCB0PTA7dDxuLmxlbmd0aDt0Kyspe2NvbnN0IGk9blt0XTstMT09PWUuaW5kZXhPZihpKSYmZS5wdXNoKGkpfXJldHVybiBlfShpKTtyZXR1cm4hMSE9PW58fGU/ZnVuY3Rpb24odCxlLGksbil7Y29uc3Qgbz1bXSxzPXQuZ2V0Q29udGV4dCgpO2ZvcihsZXQgYT0wO2E8ZS5sZW5ndGg7YSsrKXtjb25zdCByPWVbYV0sbD1FbihpW3IuaWRdLG4pO251bGwhPT1sJiZvLnB1c2goe3BsdWdpbjpyLG9wdGlvbnM6em4odC5jb25maWcscixsLHMpfSl9cmV0dXJuIG99KHQsbyxuLGUpOltdfV9ub3RpZnlTdGF0ZUNoYW5nZXModCl7Y29uc3QgZT10aGlzLl9vbGRDYWNoZXx8W10saT10aGlzLl9jYWNoZSxuPSh0LGUpPT50LmZpbHRlcigodD0+IWUuc29tZSgoZT0+dC5wbHVnaW4uaWQ9PT1lLnBsdWdpbi5pZCkpKSk7dGhpcy5fbm90aWZ5KG4oZSxpKSx0LFwic3RvcFwiKSx0aGlzLl9ub3RpZnkobihpLGUpLHQsXCJzdGFydFwiKX19ZnVuY3Rpb24gRW4odCxlKXtyZXR1cm4gZXx8ITEhPT10PyEwPT09dD97fTp0Om51bGx9ZnVuY3Rpb24gem4odCxlLGksbil7Y29uc3Qgbz10LnBsdWdpblNjb3BlS2V5cyhlKSxzPXQuZ2V0T3B0aW9uU2NvcGVzKGksbyk7cmV0dXJuIHQuY3JlYXRlUmVzb2x2ZXIocyxuLFtcIlwiXSx7c2NyaXB0YWJsZTohMSxpbmRleGFibGU6ITEsYWxsS2V5czohMH0pfWZ1bmN0aW9uIEluKHQsZSl7Y29uc3QgaT14dC5kYXRhc2V0c1t0XXx8e307cmV0dXJuKChlLmRhdGFzZXRzfHx7fSlbdF18fHt9KS5pbmRleEF4aXN8fGUuaW5kZXhBeGlzfHxpLmluZGV4QXhpc3x8XCJ4XCJ9ZnVuY3Rpb24gRm4odCxlKXtyZXR1cm5cInhcIj09PXR8fFwieVwiPT09dD90OmUuYXhpc3x8KFwidG9wXCI9PT0oaT1lLnBvc2l0aW9uKXx8XCJib3R0b21cIj09PWk/XCJ4XCI6XCJsZWZ0XCI9PT1pfHxcInJpZ2h0XCI9PT1pP1wieVwiOnZvaWQgMCl8fHQuY2hhckF0KDApLnRvTG93ZXJDYXNlKCk7dmFyIGl9ZnVuY3Rpb24gQm4odCl7Y29uc3QgZT10Lm9wdGlvbnN8fCh0Lm9wdGlvbnM9e30pO2UucGx1Z2lucz1LKGUucGx1Z2lucyx7fSksZS5zY2FsZXM9ZnVuY3Rpb24odCxlKXtjb25zdCBpPWZ0W3QudHlwZV18fHtzY2FsZXM6e319LG49ZS5zY2FsZXN8fHt9LG89SW4odC50eXBlLGUpLHM9T2JqZWN0LmNyZWF0ZShudWxsKSxhPU9iamVjdC5jcmVhdGUobnVsbCk7cmV0dXJuIE9iamVjdC5rZXlzKG4pLmZvckVhY2goKHQ9Pntjb25zdCBlPW5bdF0scj1Gbih0LGUpLGw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD09PWU/XCJfaW5kZXhfXCI6XCJfdmFsdWVfXCJ9KHIsbyksYz1pLnNjYWxlc3x8e307c1tyXT1zW3JdfHx0LGFbdF09c3QoT2JqZWN0LmNyZWF0ZShudWxsKSxbe2F4aXM6cn0sZSxjW3JdLGNbbF1dKX0pKSx0LmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoaT0+e2NvbnN0IG89aS50eXBlfHx0LnR5cGUscj1pLmluZGV4QXhpc3x8SW4obyxlKSxsPShmdFtvXXx8e30pLnNjYWxlc3x8e307T2JqZWN0LmtleXMobCkuZm9yRWFjaCgodD0+e2NvbnN0IGU9ZnVuY3Rpb24odCxlKXtsZXQgaT10O3JldHVyblwiX2luZGV4X1wiPT09dD9pPWU6XCJfdmFsdWVfXCI9PT10JiYoaT1cInhcIj09PWU/XCJ5XCI6XCJ4XCIpLGl9KHQsciksbz1pW2UrXCJBeGlzSURcIl18fHNbZV18fGU7YVtvXT1hW29dfHxPYmplY3QuY3JlYXRlKG51bGwpLHN0KGFbb10sW3theGlzOmV9LG5bb10sbFt0XV0pfSkpfSkpLE9iamVjdC5rZXlzKGEpLmZvckVhY2goKHQ9Pntjb25zdCBlPWFbdF07c3QoZSxbeHQuc2NhbGVzW2UudHlwZV0seHQuc2NhbGVdKX0pKSxhfSh0LGUpfWZ1bmN0aW9uIFZuKHQpe3JldHVybih0PXR8fHt9KS5kYXRhc2V0cz10LmRhdGFzZXRzfHxbXSx0LmxhYmVscz10LmxhYmVsc3x8W10sdH1jb25zdCBXbj1uZXcgTWFwLE5uPW5ldyBTZXQ7ZnVuY3Rpb24gSG4odCxlKXtsZXQgaT1Xbi5nZXQodCk7cmV0dXJuIGl8fChpPWUoKSxXbi5zZXQodCxpKSxObi5hZGQoaSkpLGl9Y29uc3Qgam49KHQsZSxpKT0+e2NvbnN0IG49bHQoZSxpKTt2b2lkIDAhPT1uJiZ0LmFkZChuKX07Y2xhc3MgJG57Y29uc3RydWN0b3IodCl7dGhpcy5fY29uZmlnPWZ1bmN0aW9uKHQpe3JldHVybih0PXR8fHt9KS5kYXRhPVZuKHQuZGF0YSksQm4odCksdH0odCksdGhpcy5fc2NvcGVDYWNoZT1uZXcgTWFwLHRoaXMuX3Jlc29sdmVyQ2FjaGU9bmV3IE1hcH1nZXQgdHlwZSgpe3JldHVybiB0aGlzLl9jb25maWcudHlwZX1zZXQgdHlwZSh0KXt0aGlzLl9jb25maWcudHlwZT10fWdldCBkYXRhKCl7cmV0dXJuIHRoaXMuX2NvbmZpZy5kYXRhfXNldCBkYXRhKHQpe3RoaXMuX2NvbmZpZy5kYXRhPVZuKHQpfWdldCBvcHRpb25zKCl7cmV0dXJuIHRoaXMuX2NvbmZpZy5vcHRpb25zfXNldCBvcHRpb25zKHQpe3RoaXMuX2NvbmZpZy5vcHRpb25zPXR9Z2V0IHBsdWdpbnMoKXtyZXR1cm4gdGhpcy5fY29uZmlnLnBsdWdpbnN9dXBkYXRlKCl7Y29uc3QgdD10aGlzLl9jb25maWc7dGhpcy5jbGVhckNhY2hlKCksQm4odCl9Y2xlYXJDYWNoZSgpe3RoaXMuX3Njb3BlQ2FjaGUuY2xlYXIoKSx0aGlzLl9yZXNvbHZlckNhY2hlLmNsZWFyKCl9ZGF0YXNldFNjb3BlS2V5cyh0KXtyZXR1cm4gSG4odCwoKCk9PltbYGRhdGFzZXRzLiR7dH1gLFwiXCJdXSkpfWRhdGFzZXRBbmltYXRpb25TY29wZUtleXModCxlKXtyZXR1cm4gSG4oYCR7dH0udHJhbnNpdGlvbi4ke2V9YCwoKCk9PltbYGRhdGFzZXRzLiR7dH0udHJhbnNpdGlvbnMuJHtlfWAsYHRyYW5zaXRpb25zLiR7ZX1gXSxbYGRhdGFzZXRzLiR7dH1gLFwiXCJdXSkpfWRhdGFzZXRFbGVtZW50U2NvcGVLZXlzKHQsZSl7cmV0dXJuIEhuKGAke3R9LSR7ZX1gLCgoKT0+W1tgZGF0YXNldHMuJHt0fS5lbGVtZW50cy4ke2V9YCxgZGF0YXNldHMuJHt0fWAsYGVsZW1lbnRzLiR7ZX1gLFwiXCJdXSkpfXBsdWdpblNjb3BlS2V5cyh0KXtjb25zdCBlPXQuaWQ7cmV0dXJuIEhuKGAke3RoaXMudHlwZX0tcGx1Z2luLSR7ZX1gLCgoKT0+W1tgcGx1Z2lucy4ke2V9YCwuLi50LmFkZGl0aW9uYWxPcHRpb25TY29wZXN8fFtdXV0pKX1fY2FjaGVkU2NvcGVzKHQsZSl7Y29uc3QgaT10aGlzLl9zY29wZUNhY2hlO2xldCBuPWkuZ2V0KHQpO3JldHVybiBuJiYhZXx8KG49bmV3IE1hcCxpLnNldCh0LG4pKSxufWdldE9wdGlvblNjb3Blcyh0LGUsaSl7Y29uc3R7b3B0aW9uczpuLHR5cGU6b309dGhpcyxzPXRoaXMuX2NhY2hlZFNjb3Blcyh0LGkpLGE9cy5nZXQoZSk7aWYoYSlyZXR1cm4gYTtjb25zdCByPW5ldyBTZXQ7ZS5mb3JFYWNoKChlPT57dCYmKHIuYWRkKHQpLGUuZm9yRWFjaCgoZT0+am4ocix0LGUpKSkpLGUuZm9yRWFjaCgodD0+am4ocixuLHQpKSksZS5mb3JFYWNoKCh0PT5qbihyLGZ0W29dfHx7fSx0KSkpLGUuZm9yRWFjaCgodD0+am4ocix4dCx0KSkpLGUuZm9yRWFjaCgodD0+am4ocixndCx0KSkpfSkpO2NvbnN0IGw9QXJyYXkuZnJvbShyKTtyZXR1cm4gTm4uaGFzKGUpJiZzLnNldChlLGwpLGx9Y2hhcnRPcHRpb25TY29wZXMoKXtjb25zdHtvcHRpb25zOnQsdHlwZTplfT10aGlzO3JldHVyblt0LGZ0W2VdfHx7fSx4dC5kYXRhc2V0c1tlXXx8e30se3R5cGU6ZX0seHQsZ3RdfXJlc29sdmVOYW1lZE9wdGlvbnModCxlLGksbj1bXCJcIl0pe2NvbnN0IG89eyRzaGFyZWQ6ITB9LHtyZXNvbHZlcjpzLHN1YlByZWZpeGVzOmF9PVluKHRoaXMuX3Jlc29sdmVyQ2FjaGUsdCxuKTtsZXQgcj1zO2lmKGZ1bmN0aW9uKHQsZSl7Y29uc3R7aXNTY3JpcHRhYmxlOmksaXNJbmRleGFibGU6bn09WmkodCk7Zm9yKGNvbnN0IG8gb2YgZSlpZihpKG8pJiZkdCh0W29dKXx8bihvKSYmWSh0W29dKSlyZXR1cm4hMDtyZXR1cm4hMX0ocyxlKSl7by4kc2hhcmVkPSExO3I9R2kocyxpPWR0KGkpP2koKTppLHRoaXMuY3JlYXRlUmVzb2x2ZXIodCxpLGEpKX1mb3IoY29uc3QgdCBvZiBlKW9bdF09clt0XTtyZXR1cm4gb31jcmVhdGVSZXNvbHZlcih0LGUsaT1bXCJcIl0sbil7Y29uc3R7cmVzb2x2ZXI6b309WW4odGhpcy5fcmVzb2x2ZXJDYWNoZSx0LGkpO3JldHVybiBVKGUpP0dpKG8sZSx2b2lkIDAsbik6b319ZnVuY3Rpb24gWW4odCxlLGkpe2xldCBuPXQuZ2V0KGUpO258fChuPW5ldyBNYXAsdC5zZXQoZSxuKSk7Y29uc3Qgbz1pLmpvaW4oKTtsZXQgcz1uLmdldChvKTtpZighcyl7cz17cmVzb2x2ZXI6S2koZSxpKSxzdWJQcmVmaXhlczppLmZpbHRlcigodD0+IXQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcImhvdmVyXCIpKSl9LG4uc2V0KG8scyl9cmV0dXJuIHN9Y29uc3QgVW49W1widG9wXCIsXCJib3R0b21cIixcImxlZnRcIixcInJpZ2h0XCIsXCJjaGFydEFyZWFcIl07ZnVuY3Rpb24gWG4odCxlKXtyZXR1cm5cInRvcFwiPT09dHx8XCJib3R0b21cIj09PXR8fC0xPT09VW4uaW5kZXhPZih0KSYmXCJ4XCI9PT1lfWZ1bmN0aW9uIHFuKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKGksbil7cmV0dXJuIGlbdF09PT1uW3RdP2lbZV0tbltlXTppW3RdLW5bdF19fWZ1bmN0aW9uIEtuKHQpe2NvbnN0IGU9dC5jaGFydCxpPWUub3B0aW9ucy5hbmltYXRpb247ZS5ub3RpZnlQbHVnaW5zKFwiYWZ0ZXJSZW5kZXJcIiksUShpJiZpLm9uQ29tcGxldGUsW3RdLGUpfWZ1bmN0aW9uIEduKHQpe2NvbnN0IGU9dC5jaGFydCxpPWUub3B0aW9ucy5hbmltYXRpb247UShpJiZpLm9uUHJvZ3Jlc3MsW3RdLGUpfWZ1bmN0aW9uIFpuKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50fWZ1bmN0aW9uIFFuKHQpe3JldHVybiBabigpJiZcInN0cmluZ1wiPT10eXBlb2YgdD90PWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHQpOnQmJnQubGVuZ3RoJiYodD10WzBdKSx0JiZ0LmNhbnZhcyYmKHQ9dC5jYW52YXMpLHR9Y29uc3QgSm49e30sdG89dD0+e2NvbnN0IGU9UW4odCk7cmV0dXJuIE9iamVjdC52YWx1ZXMoSm4pLmZpbHRlcigodD0+dC5jYW52YXM9PT1lKSkucG9wKCl9O2NsYXNzIGVve2NvbnN0cnVjdG9yKHQsZSl7Y29uc3Qgbj10aGlzO3RoaXMuY29uZmlnPWU9bmV3ICRuKGUpO2NvbnN0IG89UW4odCkscz10byhvKTtpZihzKXRocm93IG5ldyBFcnJvcihcIkNhbnZhcyBpcyBhbHJlYWR5IGluIHVzZS4gQ2hhcnQgd2l0aCBJRCAnXCIrcy5pZCtcIicgbXVzdCBiZSBkZXN0cm95ZWQgYmVmb3JlIHRoZSBjYW52YXMgY2FuIGJlIHJldXNlZC5cIik7Y29uc3Qgcj1lLmNyZWF0ZVJlc29sdmVyKGUuY2hhcnRPcHRpb25TY29wZXMoKSxuLmdldENvbnRleHQoKSk7dGhpcy5wbGF0Zm9ybT1uLl9pbml0aWFsaXplUGxhdGZvcm0obyxlKTtjb25zdCBsPW4ucGxhdGZvcm0uYWNxdWlyZUNvbnRleHQobyxyLmFzcGVjdFJhdGlvKSxjPWwmJmwuY2FudmFzLGg9YyYmYy5oZWlnaHQsZD1jJiZjLndpZHRoO3RoaXMuaWQ9aigpLHRoaXMuY3R4PWwsdGhpcy5jYW52YXM9Yyx0aGlzLndpZHRoPWQsdGhpcy5oZWlnaHQ9aCx0aGlzLl9vcHRpb25zPXIsdGhpcy5fYXNwZWN0UmF0aW89dGhpcy5hc3BlY3RSYXRpbyx0aGlzLl9sYXllcnM9W10sdGhpcy5fbWV0YXNldHM9W10sdGhpcy5fc3RhY2tzPXZvaWQgMCx0aGlzLmJveGVzPVtdLHRoaXMuY3VycmVudERldmljZVBpeGVsUmF0aW89dm9pZCAwLHRoaXMuY2hhcnRBcmVhPXZvaWQgMCx0aGlzLl9hY3RpdmU9W10sdGhpcy5fbGFzdEV2ZW50PXZvaWQgMCx0aGlzLl9saXN0ZW5lcnM9e30sdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycz12b2lkIDAsdGhpcy5fc29ydGVkTWV0YXNldHM9W10sdGhpcy5zY2FsZXM9e30sdGhpcy5zY2FsZT12b2lkIDAsdGhpcy5fcGx1Z2lucz1uZXcgUm4sdGhpcy4kcHJveGllcz17fSx0aGlzLl9oaWRkZW5JbmRpY2VzPXt9LHRoaXMuYXR0YWNoZWQ9ITEsdGhpcy5fYW5pbWF0aW9uc0Rpc2FibGVkPXZvaWQgMCx0aGlzLiRjb250ZXh0PXZvaWQgMCx0aGlzLl9kb1Jlc2l6ZT1pKCgoKT0+dGhpcy51cGRhdGUoXCJyZXNpemVcIikpLHIucmVzaXplRGVsYXl8fDApLEpuW24uaWRdPW4sbCYmYz8oYS5saXN0ZW4obixcImNvbXBsZXRlXCIsS24pLGEubGlzdGVuKG4sXCJwcm9ncmVzc1wiLEduKSxuLl9pbml0aWFsaXplKCksbi5hdHRhY2hlZCYmbi51cGRhdGUoKSk6Y29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgY2hhcnQ6IGNhbid0IGFjcXVpcmUgY29udGV4dCBmcm9tIHRoZSBnaXZlbiBpdGVtXCIpfWdldCBhc3BlY3RSYXRpbygpe2NvbnN0e29wdGlvbnM6e2FzcGVjdFJhdGlvOnQsbWFpbnRhaW5Bc3BlY3RSYXRpbzplfSx3aWR0aDppLGhlaWdodDpuLF9hc3BlY3RSYXRpbzpvfT10aGlzO3JldHVybiAkKHQpP2UmJm8/bzpuP2kvbjpudWxsOnR9Z2V0IGRhdGEoKXtyZXR1cm4gdGhpcy5jb25maWcuZGF0YX1zZXQgZGF0YSh0KXt0aGlzLmNvbmZpZy5kYXRhPXR9Z2V0IG9wdGlvbnMoKXtyZXR1cm4gdGhpcy5fb3B0aW9uc31zZXQgb3B0aW9ucyh0KXt0aGlzLmNvbmZpZy5vcHRpb25zPXR9X2luaXRpYWxpemUoKXtjb25zdCB0PXRoaXM7cmV0dXJuIHQubm90aWZ5UGx1Z2lucyhcImJlZm9yZUluaXRcIiksdC5vcHRpb25zLnJlc3BvbnNpdmU/dC5yZXNpemUoKTp2ZSh0LHQub3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvKSx0LmJpbmRFdmVudHMoKSx0Lm5vdGlmeVBsdWdpbnMoXCJhZnRlckluaXRcIiksdH1faW5pdGlhbGl6ZVBsYXRmb3JtKHQsZSl7cmV0dXJuIGUucGxhdGZvcm0/bmV3IGUucGxhdGZvcm06IVpuKCl8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBPZmZzY3JlZW5DYW52YXMmJnQgaW5zdGFuY2VvZiBPZmZzY3JlZW5DYW52YXM/bmV3IEplOm5ldyB1aX1jbGVhcigpe3JldHVybiBxdCh0aGlzLmNhbnZhcyx0aGlzLmN0eCksdGhpc31zdG9wKCl7cmV0dXJuIGEuc3RvcCh0aGlzKSx0aGlzfXJlc2l6ZSh0LGUpe2EucnVubmluZyh0aGlzKT90aGlzLl9yZXNpemVCZWZvcmVEcmF3PXt3aWR0aDp0LGhlaWdodDplfTp0aGlzLl9yZXNpemUodCxlKX1fcmVzaXplKHQsZSl7Y29uc3QgaT10aGlzLG49aS5vcHRpb25zLG89aS5jYW52YXMscz1uLm1haW50YWluQXNwZWN0UmF0aW8mJmkuYXNwZWN0UmF0aW8sYT1pLnBsYXRmb3JtLmdldE1heGltdW1TaXplKG8sdCxlLHMpLHI9bi5kZXZpY2VQaXhlbFJhdGlvfHxpLnBsYXRmb3JtLmdldERldmljZVBpeGVsUmF0aW8oKTtpLndpZHRoPWEud2lkdGgsaS5oZWlnaHQ9YS5oZWlnaHQsaS5fYXNwZWN0UmF0aW89aS5hc3BlY3RSYXRpbyx2ZShpLHIsITApJiYoaS5ub3RpZnlQbHVnaW5zKFwicmVzaXplXCIse3NpemU6YX0pLFEobi5vblJlc2l6ZSxbaSxhXSxpKSxpLmF0dGFjaGVkJiZpLl9kb1Jlc2l6ZSgpJiZpLnJlbmRlcigpKX1lbnN1cmVTY2FsZXNIYXZlSURzKCl7Sih0aGlzLm9wdGlvbnMuc2NhbGVzfHx7fSwoKHQsZSk9Pnt0LmlkPWV9KSl9YnVpbGRPclVwZGF0ZVNjYWxlcygpe2NvbnN0IHQ9dGhpcyxlPXQub3B0aW9ucyxpPWUuc2NhbGVzLG49dC5zY2FsZXMsbz1PYmplY3Qua2V5cyhuKS5yZWR1Y2UoKCh0LGUpPT4odFtlXT0hMSx0KSkse30pO2xldCBzPVtdO2kmJihzPXMuY29uY2F0KE9iamVjdC5rZXlzKGkpLm1hcCgodD0+e2NvbnN0IGU9aVt0XSxuPUZuKHQsZSksbz1cInJcIj09PW4scz1cInhcIj09PW47cmV0dXJue29wdGlvbnM6ZSxkcG9zaXRpb246bz9cImNoYXJ0QXJlYVwiOnM/XCJib3R0b21cIjpcImxlZnRcIixkdHlwZTpvP1wicmFkaWFsTGluZWFyXCI6cz9cImNhdGVnb3J5XCI6XCJsaW5lYXJcIn19KSkpKSxKKHMsKGk9Pntjb25zdCBzPWkub3B0aW9ucyxhPXMuaWQscj1GbihhLHMpLGw9SyhzLnR5cGUsaS5kdHlwZSk7dm9pZCAwIT09cy5wb3NpdGlvbiYmWG4ocy5wb3NpdGlvbixyKT09PVhuKGkuZHBvc2l0aW9uKXx8KHMucG9zaXRpb249aS5kcG9zaXRpb24pLG9bYV09ITA7bGV0IGM9bnVsbDtpZihhIGluIG4mJm5bYV0udHlwZT09PWwpYz1uW2FdO2Vsc2V7Yz1uZXcoTG4uZ2V0U2NhbGUobCkpKHtpZDphLHR5cGU6bCxjdHg6dC5jdHgsY2hhcnQ6dH0pLG5bYy5pZF09Y31jLmluaXQocyxlKX0pKSxKKG8sKCh0LGUpPT57dHx8ZGVsZXRlIG5bZV19KSksSihuLChlPT57WmUuY29uZmlndXJlKHQsZSxlLm9wdGlvbnMpLFplLmFkZEJveCh0LGUpfSkpfV91cGRhdGVNZXRhc2V0cygpe2NvbnN0IHQ9dGhpcyxlPXQuX21ldGFzZXRzLGk9dC5kYXRhLmRhdGFzZXRzLmxlbmd0aCxuPWUubGVuZ3RoO2lmKGUuc29ydCgoKHQsZSk9PnQuaW5kZXgtZS5pbmRleCkpLG4+aSl7Zm9yKGxldCBlPWk7ZTxuOysrZSl0Ll9kZXN0cm95RGF0YXNldE1ldGEoZSk7ZS5zcGxpY2UoaSxuLWkpfXQuX3NvcnRlZE1ldGFzZXRzPWUuc2xpY2UoMCkuc29ydChxbihcIm9yZGVyXCIsXCJpbmRleFwiKSl9X3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzKCl7Y29uc3QgdD10aGlzLHtfbWV0YXNldHM6ZSxkYXRhOntkYXRhc2V0czppfX09dDtlLmxlbmd0aD5pLmxlbmd0aCYmZGVsZXRlIHQuX3N0YWNrcyxlLmZvckVhY2goKChlLG4pPT57MD09PWkuZmlsdGVyKCh0PT50PT09ZS5fZGF0YXNldCkpLmxlbmd0aCYmdC5fZGVzdHJveURhdGFzZXRNZXRhKG4pfSkpfWJ1aWxkT3JVcGRhdGVDb250cm9sbGVycygpe2NvbnN0IHQ9dGhpcyxlPVtdLGk9dC5kYXRhLmRhdGFzZXRzO2xldCBuLG87Zm9yKHQuX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzKCksbj0wLG89aS5sZW5ndGg7bjxvO24rKyl7Y29uc3Qgbz1pW25dO2xldCBzPXQuZ2V0RGF0YXNldE1ldGEobik7Y29uc3QgYT1vLnR5cGV8fHQuY29uZmlnLnR5cGU7aWYocy50eXBlJiZzLnR5cGUhPT1hJiYodC5fZGVzdHJveURhdGFzZXRNZXRhKG4pLHM9dC5nZXREYXRhc2V0TWV0YShuKSkscy50eXBlPWEscy5pbmRleEF4aXM9by5pbmRleEF4aXN8fEluKGEsdC5vcHRpb25zKSxzLm9yZGVyPW8ub3JkZXJ8fDAscy5pbmRleD1uLHMubGFiZWw9XCJcIitvLmxhYmVsLHMudmlzaWJsZT10LmlzRGF0YXNldFZpc2libGUobikscy5jb250cm9sbGVyKXMuY29udHJvbGxlci51cGRhdGVJbmRleChuKSxzLmNvbnRyb2xsZXIubGlua1NjYWxlcygpO2Vsc2V7Y29uc3QgaT1Mbi5nZXRDb250cm9sbGVyKGEpLHtkYXRhc2V0RWxlbWVudFR5cGU6byxkYXRhRWxlbWVudFR5cGU6cn09eHQuZGF0YXNldHNbYV07T2JqZWN0LmFzc2lnbihpLnByb3RvdHlwZSx7ZGF0YUVsZW1lbnRUeXBlOkxuLmdldEVsZW1lbnQociksZGF0YXNldEVsZW1lbnRUeXBlOm8mJkxuLmdldEVsZW1lbnQobyl9KSxzLmNvbnRyb2xsZXI9bmV3IGkodCxuKSxlLnB1c2gocy5jb250cm9sbGVyKX19cmV0dXJuIHQuX3VwZGF0ZU1ldGFzZXRzKCksZX1fcmVzZXRFbGVtZW50cygpe2NvbnN0IHQ9dGhpcztKKHQuZGF0YS5kYXRhc2V0cywoKGUsaSk9Pnt0LmdldERhdGFzZXRNZXRhKGkpLmNvbnRyb2xsZXIucmVzZXQoKX0pLHQpfXJlc2V0KCl7dGhpcy5fcmVzZXRFbGVtZW50cygpLHRoaXMubm90aWZ5UGx1Z2lucyhcInJlc2V0XCIpfXVwZGF0ZSh0KXtjb25zdCBlPXRoaXMsaT1lLmNvbmZpZztpLnVwZGF0ZSgpLGUuX29wdGlvbnM9aS5jcmVhdGVSZXNvbHZlcihpLmNoYXJ0T3B0aW9uU2NvcGVzKCksZS5nZXRDb250ZXh0KCkpLEooZS5zY2FsZXMsKHQ9PntaZS5yZW1vdmVCb3goZSx0KX0pKTtjb25zdCBuPWUuX2FuaW1hdGlvbnNEaXNhYmxlZD0hZS5vcHRpb25zLmFuaW1hdGlvbjtlLmVuc3VyZVNjYWxlc0hhdmVJRHMoKSxlLmJ1aWxkT3JVcGRhdGVTY2FsZXMoKTtjb25zdCBvPW5ldyBTZXQoT2JqZWN0LmtleXMoZS5fbGlzdGVuZXJzKSkscz1uZXcgU2V0KGUub3B0aW9ucy5ldmVudHMpO2lmKHV0KG8scykmJiEhdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycz09PWUub3B0aW9ucy5yZXNwb25zaXZlfHwoZS51bmJpbmRFdmVudHMoKSxlLmJpbmRFdmVudHMoKSksZS5fcGx1Z2lucy5pbnZhbGlkYXRlKCksITE9PT1lLm5vdGlmeVBsdWdpbnMoXCJiZWZvcmVVcGRhdGVcIix7bW9kZTp0LGNhbmNlbGFibGU6ITB9KSlyZXR1cm47Y29uc3QgYT1lLmJ1aWxkT3JVcGRhdGVDb250cm9sbGVycygpO2Uubm90aWZ5UGx1Z2lucyhcImJlZm9yZUVsZW1lbnRzVXBkYXRlXCIpO2xldCByPTA7Zm9yKGxldCB0PTAsaT1lLmRhdGEuZGF0YXNldHMubGVuZ3RoO3Q8aTt0Kyspe2NvbnN0e2NvbnRyb2xsZXI6aX09ZS5nZXREYXRhc2V0TWV0YSh0KSxvPSFuJiYtMT09PWEuaW5kZXhPZihpKTtpLmJ1aWxkT3JVcGRhdGVFbGVtZW50cyhvKSxyPU1hdGgubWF4KCtpLmdldE1heE92ZXJmbG93KCkscil9ZS5fbWluUGFkZGluZz1yLGUuX3VwZGF0ZUxheW91dChyKSxufHxKKGEsKHQ9Pnt0LnJlc2V0KCl9KSksZS5fdXBkYXRlRGF0YXNldHModCksZS5ub3RpZnlQbHVnaW5zKFwiYWZ0ZXJVcGRhdGVcIix7bW9kZTp0fSksZS5fbGF5ZXJzLnNvcnQocW4oXCJ6XCIsXCJfaWR4XCIpKSxlLl9sYXN0RXZlbnQmJmUuX2V2ZW50SGFuZGxlcihlLl9sYXN0RXZlbnQsITApLGUucmVuZGVyKCl9X3VwZGF0ZUxheW91dCh0KXtjb25zdCBlPXRoaXM7aWYoITE9PT1lLm5vdGlmeVBsdWdpbnMoXCJiZWZvcmVMYXlvdXRcIix7Y2FuY2VsYWJsZTohMH0pKXJldHVybjtaZS51cGRhdGUoZSxlLndpZHRoLGUuaGVpZ2h0LHQpO2NvbnN0IGk9ZS5jaGFydEFyZWEsbj1pLndpZHRoPD0wfHxpLmhlaWdodDw9MDtlLl9sYXllcnM9W10sSihlLmJveGVzLCh0PT57biYmXCJjaGFydEFyZWFcIj09PXQucG9zaXRpb258fCh0LmNvbmZpZ3VyZSYmdC5jb25maWd1cmUoKSxlLl9sYXllcnMucHVzaCguLi50Ll9sYXllcnMoKSkpfSksZSksZS5fbGF5ZXJzLmZvckVhY2goKCh0LGUpPT57dC5faWR4PWV9KSksZS5ub3RpZnlQbHVnaW5zKFwiYWZ0ZXJMYXlvdXRcIil9X3VwZGF0ZURhdGFzZXRzKHQpe2NvbnN0IGU9dGhpcyxpPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQ7aWYoITEhPT1lLm5vdGlmeVBsdWdpbnMoXCJiZWZvcmVEYXRhc2V0c1VwZGF0ZVwiLHttb2RlOnQsY2FuY2VsYWJsZTohMH0pKXtmb3IobGV0IG49MCxvPWUuZGF0YS5kYXRhc2V0cy5sZW5ndGg7bjxvOysrbillLl91cGRhdGVEYXRhc2V0KG4saT90KHtkYXRhc2V0SW5kZXg6bn0pOnQpO2Uubm90aWZ5UGx1Z2lucyhcImFmdGVyRGF0YXNldHNVcGRhdGVcIix7bW9kZTp0fSl9fV91cGRhdGVEYXRhc2V0KHQsZSl7Y29uc3QgaT10aGlzLG49aS5nZXREYXRhc2V0TWV0YSh0KSxvPXttZXRhOm4saW5kZXg6dCxtb2RlOmUsY2FuY2VsYWJsZTohMH07ITEhPT1pLm5vdGlmeVBsdWdpbnMoXCJiZWZvcmVEYXRhc2V0VXBkYXRlXCIsbykmJihuLmNvbnRyb2xsZXIuX3VwZGF0ZShlKSxvLmNhbmNlbGFibGU9ITEsaS5ub3RpZnlQbHVnaW5zKFwiYWZ0ZXJEYXRhc2V0VXBkYXRlXCIsbykpfXJlbmRlcigpe2NvbnN0IHQ9dGhpczshMSE9PXQubm90aWZ5UGx1Z2lucyhcImJlZm9yZVJlbmRlclwiLHtjYW5jZWxhYmxlOiEwfSkmJihhLmhhcyh0KT90LmF0dGFjaGVkJiYhYS5ydW5uaW5nKHQpJiZhLnN0YXJ0KHQpOih0LmRyYXcoKSxLbih7Y2hhcnQ6dH0pKSl9ZHJhdygpe2NvbnN0IHQ9dGhpcztsZXQgZTtpZih0Ll9yZXNpemVCZWZvcmVEcmF3KXtjb25zdHt3aWR0aDplLGhlaWdodDppfT10Ll9yZXNpemVCZWZvcmVEcmF3O3QuX3Jlc2l6ZShlLGkpLHQuX3Jlc2l6ZUJlZm9yZURyYXc9bnVsbH1pZih0LmNsZWFyKCksdC53aWR0aDw9MHx8dC5oZWlnaHQ8PTApcmV0dXJuO2lmKCExPT09dC5ub3RpZnlQbHVnaW5zKFwiYmVmb3JlRHJhd1wiLHtjYW5jZWxhYmxlOiEwfSkpcmV0dXJuO2NvbnN0IGk9dC5fbGF5ZXJzO2ZvcihlPTA7ZTxpLmxlbmd0aCYmaVtlXS56PD0wOysrZSlpW2VdLmRyYXcodC5jaGFydEFyZWEpO2Zvcih0Ll9kcmF3RGF0YXNldHMoKTtlPGkubGVuZ3RoOysrZSlpW2VdLmRyYXcodC5jaGFydEFyZWEpO3Qubm90aWZ5UGx1Z2lucyhcImFmdGVyRHJhd1wiKX1fZ2V0U29ydGVkRGF0YXNldE1ldGFzKHQpe2NvbnN0IGU9dGhpcy5fc29ydGVkTWV0YXNldHMsaT1bXTtsZXQgbixvO2ZvcihuPTAsbz1lLmxlbmd0aDtuPG87KytuKXtjb25zdCBvPWVbbl07dCYmIW8udmlzaWJsZXx8aS5wdXNoKG8pfXJldHVybiBpfWdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKXtyZXR1cm4gdGhpcy5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKCEwKX1fZHJhd0RhdGFzZXRzKCl7Y29uc3QgdD10aGlzO2lmKCExPT09dC5ub3RpZnlQbHVnaW5zKFwiYmVmb3JlRGF0YXNldHNEcmF3XCIse2NhbmNlbGFibGU6ITB9KSlyZXR1cm47Y29uc3QgZT10LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtmb3IobGV0IGk9ZS5sZW5ndGgtMTtpPj0wOy0taSl0Ll9kcmF3RGF0YXNldChlW2ldKTt0Lm5vdGlmeVBsdWdpbnMoXCJhZnRlckRhdGFzZXRzRHJhd1wiKX1fZHJhd0RhdGFzZXQodCl7Y29uc3QgZT10aGlzLGk9ZS5jdHgsbj10Ll9jbGlwLG89IW4uZGlzYWJsZWQscz1lLmNoYXJ0QXJlYSxhPXttZXRhOnQsaW5kZXg6dC5pbmRleCxjYW5jZWxhYmxlOiEwfTshMSE9PWUubm90aWZ5UGx1Z2lucyhcImJlZm9yZURhdGFzZXREcmF3XCIsYSkmJihvJiZadChpLHtsZWZ0OiExPT09bi5sZWZ0PzA6cy5sZWZ0LW4ubGVmdCxyaWdodDohMT09PW4ucmlnaHQ/ZS53aWR0aDpzLnJpZ2h0K24ucmlnaHQsdG9wOiExPT09bi50b3A/MDpzLnRvcC1uLnRvcCxib3R0b206ITE9PT1uLmJvdHRvbT9lLmhlaWdodDpzLmJvdHRvbStuLmJvdHRvbX0pLHQuY29udHJvbGxlci5kcmF3KCksbyYmUXQoaSksYS5jYW5jZWxhYmxlPSExLGUubm90aWZ5UGx1Z2lucyhcImFmdGVyRGF0YXNldERyYXdcIixhKSl9Z2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZSh0LGUsaSxuKXtjb25zdCBvPVRlLm1vZGVzW2VdO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG8/byh0aGlzLHQsaSxuKTpbXX1nZXREYXRhc2V0TWV0YSh0KXtjb25zdCBlPXRoaXMuZGF0YS5kYXRhc2V0c1t0XSxpPXRoaXMuX21ldGFzZXRzO2xldCBuPWkuZmlsdGVyKCh0PT50JiZ0Ll9kYXRhc2V0PT09ZSkpLnBvcCgpO3JldHVybiBufHwobj17dHlwZTpudWxsLGRhdGE6W10sZGF0YXNldDpudWxsLGNvbnRyb2xsZXI6bnVsbCxoaWRkZW46bnVsbCx4QXhpc0lEOm51bGwseUF4aXNJRDpudWxsLG9yZGVyOmUmJmUub3JkZXJ8fDAsaW5kZXg6dCxfZGF0YXNldDplLF9wYXJzZWQ6W10sX3NvcnRlZDohMX0saS5wdXNoKG4pKSxufWdldENvbnRleHQoKXtyZXR1cm4gdGhpcy4kY29udGV4dHx8KHRoaXMuJGNvbnRleHQ9e2NoYXJ0OnRoaXMsdHlwZTpcImNoYXJ0XCJ9KX1nZXRWaXNpYmxlRGF0YXNldENvdW50KCl7cmV0dXJuIHRoaXMuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpLmxlbmd0aH1pc0RhdGFzZXRWaXNpYmxlKHQpe2NvbnN0IGU9dGhpcy5kYXRhLmRhdGFzZXRzW3RdO2lmKCFlKXJldHVybiExO2NvbnN0IGk9dGhpcy5nZXREYXRhc2V0TWV0YSh0KTtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGkuaGlkZGVuPyFpLmhpZGRlbjohZS5oaWRkZW59c2V0RGF0YXNldFZpc2liaWxpdHkodCxlKXt0aGlzLmdldERhdGFzZXRNZXRhKHQpLmhpZGRlbj0hZX10b2dnbGVEYXRhVmlzaWJpbGl0eSh0KXt0aGlzLl9oaWRkZW5JbmRpY2VzW3RdPSF0aGlzLl9oaWRkZW5JbmRpY2VzW3RdfWdldERhdGFWaXNpYmlsaXR5KHQpe3JldHVybiF0aGlzLl9oaWRkZW5JbmRpY2VzW3RdfV91cGRhdGVEYXRhc2V0VmlzaWJpbGl0eSh0LGUpe2NvbnN0IGk9dGhpcyxuPWU/XCJzaG93XCI6XCJoaWRlXCIsbz1pLmdldERhdGFzZXRNZXRhKHQpLHM9by5jb250cm9sbGVyLl9yZXNvbHZlQW5pbWF0aW9ucyh2b2lkIDAsbik7aS5zZXREYXRhc2V0VmlzaWJpbGl0eSh0LGUpLHMudXBkYXRlKG8se3Zpc2libGU6ZX0pLGkudXBkYXRlKChlPT5lLmRhdGFzZXRJbmRleD09PXQ/bjp2b2lkIDApKX1oaWRlKHQpe3RoaXMuX3VwZGF0ZURhdGFzZXRWaXNpYmlsaXR5KHQsITEpfXNob3codCl7dGhpcy5fdXBkYXRlRGF0YXNldFZpc2liaWxpdHkodCwhMCl9X2Rlc3Ryb3lEYXRhc2V0TWV0YSh0KXtjb25zdCBlPXRoaXMsaT1lLl9tZXRhc2V0cyYmZS5fbWV0YXNldHNbdF07aSYmaS5jb250cm9sbGVyJiYoaS5jb250cm9sbGVyLl9kZXN0cm95KCksZGVsZXRlIGUuX21ldGFzZXRzW3RdKX1kZXN0cm95KCl7Y29uc3QgdD10aGlzLHtjYW52YXM6ZSxjdHg6aX09dDtsZXQgbixvO2Zvcih0LnN0b3AoKSxhLnJlbW92ZSh0KSxuPTAsbz10LmRhdGEuZGF0YXNldHMubGVuZ3RoO248bzsrK24pdC5fZGVzdHJveURhdGFzZXRNZXRhKG4pO3QuY29uZmlnLmNsZWFyQ2FjaGUoKSxlJiYodC51bmJpbmRFdmVudHMoKSxxdChlLGkpLHQucGxhdGZvcm0ucmVsZWFzZUNvbnRleHQoaSksdC5jYW52YXM9bnVsbCx0LmN0eD1udWxsKSx0Lm5vdGlmeVBsdWdpbnMoXCJkZXN0cm95XCIpLGRlbGV0ZSBKblt0LmlkXX10b0Jhc2U2NEltYWdlKC4uLnQpe3JldHVybiB0aGlzLmNhbnZhcy50b0RhdGFVUkwoLi4udCl9YmluZEV2ZW50cygpe3RoaXMuYmluZFVzZXJFdmVudHMoKSx0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZT90aGlzLmJpbmRSZXNwb25zaXZlRXZlbnRzKCk6dGhpcy5hdHRhY2hlZD0hMH1iaW5kVXNlckV2ZW50cygpe2NvbnN0IHQ9dGhpcyxlPXQuX2xpc3RlbmVycyxpPXQucGxhdGZvcm0sbj1mdW5jdGlvbihlLGksbil7ZS5vZmZzZXRYPWksZS5vZmZzZXRZPW4sdC5fZXZlbnRIYW5kbGVyKGUpfTtKKHQub3B0aW9ucy5ldmVudHMsKG89PigobixvKT0+e2kuYWRkRXZlbnRMaXN0ZW5lcih0LG4sbyksZVtuXT1vfSkobyxuKSkpfWJpbmRSZXNwb25zaXZlRXZlbnRzKCl7Y29uc3QgdD10aGlzO3QuX3Jlc3BvbnNpdmVMaXN0ZW5lcnN8fCh0Ll9yZXNwb25zaXZlTGlzdGVuZXJzPXt9KTtjb25zdCBlPXQuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMsaT10LnBsYXRmb3JtLG49KG4sbyk9PntpLmFkZEV2ZW50TGlzdGVuZXIodCxuLG8pLGVbbl09b30sbz0obixvKT0+e2Vbbl0mJihpLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxuLG8pLGRlbGV0ZSBlW25dKX0scz0oZSxpKT0+e3QuY2FudmFzJiZ0LnJlc2l6ZShlLGkpfTtsZXQgYTtjb25zdCByPSgpPT57byhcImF0dGFjaFwiLHIpLHQuYXR0YWNoZWQ9ITAsdC5yZXNpemUoKSxuKFwicmVzaXplXCIscyksbihcImRldGFjaFwiLGEpfTthPSgpPT57dC5hdHRhY2hlZD0hMSxvKFwicmVzaXplXCIscyksbihcImF0dGFjaFwiLHIpfSxpLmlzQXR0YWNoZWQodC5jYW52YXMpP3IoKTphKCl9dW5iaW5kRXZlbnRzKCl7Y29uc3QgdD10aGlzO0oodC5fbGlzdGVuZXJzLCgoZSxpKT0+e3QucGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LGksZSl9KSksdC5fbGlzdGVuZXJzPXt9LEoodC5fcmVzcG9uc2l2ZUxpc3RlbmVycywoKGUsaSk9Pnt0LnBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxpLGUpfSkpLHQuX3Jlc3BvbnNpdmVMaXN0ZW5lcnM9dm9pZCAwfXVwZGF0ZUhvdmVyU3R5bGUodCxlLGkpe2NvbnN0IG49aT9cInNldFwiOlwicmVtb3ZlXCI7bGV0IG8scyxhLHI7Zm9yKFwiZGF0YXNldFwiPT09ZSYmKG89dGhpcy5nZXREYXRhc2V0TWV0YSh0WzBdLmRhdGFzZXRJbmRleCksby5jb250cm9sbGVyW1wiX1wiK24rXCJEYXRhc2V0SG92ZXJTdHlsZVwiXSgpKSxhPTAscj10Lmxlbmd0aDthPHI7KythKXtzPXRbYV07Y29uc3QgZT1zJiZ0aGlzLmdldERhdGFzZXRNZXRhKHMuZGF0YXNldEluZGV4KS5jb250cm9sbGVyO2UmJmVbbitcIkhvdmVyU3R5bGVcIl0ocy5lbGVtZW50LHMuZGF0YXNldEluZGV4LHMuaW5kZXgpfX1nZXRBY3RpdmVFbGVtZW50cygpe3JldHVybiB0aGlzLl9hY3RpdmV8fFtdfXNldEFjdGl2ZUVsZW1lbnRzKHQpe2NvbnN0IGU9dGhpcyxpPWUuX2FjdGl2ZXx8W10sbj10Lm1hcCgoKHtkYXRhc2V0SW5kZXg6dCxpbmRleDppfSk9Pntjb25zdCBuPWUuZ2V0RGF0YXNldE1ldGEodCk7aWYoIW4pdGhyb3cgbmV3IEVycm9yKFwiTm8gZGF0YXNldCBmb3VuZCBhdCBpbmRleCBcIit0KTtyZXR1cm57ZGF0YXNldEluZGV4OnQsZWxlbWVudDpuLmRhdGFbaV0saW5kZXg6aX19KSk7IXR0KG4saSkmJihlLl9hY3RpdmU9bixlLl91cGRhdGVIb3ZlclN0eWxlcyhuLGkpKX1ub3RpZnlQbHVnaW5zKHQsZSxpKXtyZXR1cm4gdGhpcy5fcGx1Z2lucy5ub3RpZnkodGhpcyx0LGUsaSl9X3VwZGF0ZUhvdmVyU3R5bGVzKHQsZSxpKXtjb25zdCBuPXRoaXMsbz1uLm9wdGlvbnMuaG92ZXIscz0odCxlKT0+dC5maWx0ZXIoKHQ9PiFlLnNvbWUoKGU9PnQuZGF0YXNldEluZGV4PT09ZS5kYXRhc2V0SW5kZXgmJnQuaW5kZXg9PT1lLmluZGV4KSkpKSxhPXMoZSx0KSxyPWk/dDpzKHQsZSk7YS5sZW5ndGgmJm4udXBkYXRlSG92ZXJTdHlsZShhLG8ubW9kZSwhMSksci5sZW5ndGgmJm8ubW9kZSYmbi51cGRhdGVIb3ZlclN0eWxlKHIsby5tb2RlLCEwKX1fZXZlbnRIYW5kbGVyKHQsZSl7Y29uc3QgaT10aGlzLG49e2V2ZW50OnQscmVwbGF5OmUsY2FuY2VsYWJsZTohMH0sbz1lPT4oZS5vcHRpb25zLmV2ZW50c3x8dGhpcy5vcHRpb25zLmV2ZW50cykuaW5jbHVkZXModC50eXBlKTtpZighMT09PWkubm90aWZ5UGx1Z2lucyhcImJlZm9yZUV2ZW50XCIsbixvKSlyZXR1cm47Y29uc3Qgcz1pLl9oYW5kbGVFdmVudCh0LGUpO3JldHVybiBuLmNhbmNlbGFibGU9ITEsaS5ub3RpZnlQbHVnaW5zKFwiYWZ0ZXJFdmVudFwiLG4sbyksKHN8fG4uY2hhbmdlZCkmJmkucmVuZGVyKCksaX1faGFuZGxlRXZlbnQodCxlKXtjb25zdCBpPXRoaXMse19hY3RpdmU6bj1bXSxvcHRpb25zOm99PWkscz1vLmhvdmVyLGE9ZTtsZXQgcj1bXSxsPSExLGM9bnVsbDtyZXR1cm5cIm1vdXNlb3V0XCIhPT10LnR5cGUmJihyPWkuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZSh0LHMubW9kZSxzLGEpLGM9XCJjbGlja1wiPT09dC50eXBlP2kuX2xhc3RFdmVudDp0KSxpLl9sYXN0RXZlbnQ9bnVsbCxHdCh0LGkuY2hhcnRBcmVhLGkuX21pblBhZGRpbmcpJiYoUShvLm9uSG92ZXIsW3QscixpXSxpKSxcIm1vdXNldXBcIiE9PXQudHlwZSYmXCJjbGlja1wiIT09dC50eXBlJiZcImNvbnRleHRtZW51XCIhPT10LnR5cGV8fFEoby5vbkNsaWNrLFt0LHIsaV0saSkpLGw9IXR0KHIsbiksKGx8fGUpJiYoaS5fYWN0aXZlPXIsaS5fdXBkYXRlSG92ZXJTdHlsZXMocixuLGUpKSxpLl9sYXN0RXZlbnQ9YyxsfX1jb25zdCBpbz0oKT0+Sihlby5pbnN0YW5jZXMsKHQ9PnQuX3BsdWdpbnMuaW52YWxpZGF0ZSgpKSksbm89ITA7ZnVuY3Rpb24gb28oKXt0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQ6IENoZWNrIHRoYXQgYSBjb21wbGV0ZSBkYXRlIGFkYXB0ZXIgaXMgcHJvdmlkZWQuXCIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGVvLHtkZWZhdWx0czp7ZW51bWVyYWJsZTpubyx2YWx1ZTp4dH0saW5zdGFuY2VzOntlbnVtZXJhYmxlOm5vLHZhbHVlOkpufSxvdmVycmlkZXM6e2VudW1lcmFibGU6bm8sdmFsdWU6ZnR9LHJlZ2lzdHJ5OntlbnVtZXJhYmxlOm5vLHZhbHVlOkxufSx2ZXJzaW9uOntlbnVtZXJhYmxlOm5vLHZhbHVlOlwiMy40LjFcIn0sZ2V0Q2hhcnQ6e2VudW1lcmFibGU6bm8sdmFsdWU6dG99LHJlZ2lzdGVyOntlbnVtZXJhYmxlOm5vLHZhbHVlOiguLi50KT0+e0xuLmFkZCguLi50KSxpbygpfX0sdW5yZWdpc3Rlcjp7ZW51bWVyYWJsZTpubyx2YWx1ZTooLi4udCk9PntMbi5yZW1vdmUoLi4udCksaW8oKX19fSk7Y2xhc3Mgc297Y29uc3RydWN0b3IodCl7dGhpcy5vcHRpb25zPXR8fHt9fWZvcm1hdHMoKXtyZXR1cm4gb28oKX1wYXJzZSh0LGUpe3JldHVybiBvbygpfWZvcm1hdCh0LGUpe3JldHVybiBvbygpfWFkZCh0LGUsaSl7cmV0dXJuIG9vKCl9ZGlmZih0LGUsaSl7cmV0dXJuIG9vKCl9c3RhcnRPZih0LGUsaSl7cmV0dXJuIG9vKCl9ZW5kT2YodCxlKXtyZXR1cm4gb28oKX19c28ub3ZlcnJpZGU9ZnVuY3Rpb24odCl7T2JqZWN0LmFzc2lnbihzby5wcm90b3R5cGUsdCl9O3ZhciBhbz17X2RhdGU6c299O2Z1bmN0aW9uIHJvKHQpe2NvbnN0IGU9ZnVuY3Rpb24odCl7aWYoIXQuX2NhY2hlLiRiYXIpe2NvbnN0IGU9dC5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyhcImJhclwiKTtsZXQgaT1bXTtmb3IobGV0IG49MCxvPWUubGVuZ3RoO248bztuKyspaT1pLmNvbmNhdChlW25dLmNvbnRyb2xsZXIuZ2V0QWxsUGFyc2VkVmFsdWVzKHQpKTt0Ll9jYWNoZS4kYmFyPWRlKGkuc29ydCgoKHQsZSk9PnQtZSkpKX1yZXR1cm4gdC5fY2FjaGUuJGJhcn0odCk7bGV0IGksbixvLHMsYT10Ll9sZW5ndGg7Y29uc3Qgcj0oKT0+ezMyNzY3IT09byYmLTMyNzY4IT09byYmKGh0KHMpJiYoYT1NYXRoLm1pbihhLE1hdGguYWJzKG8tcyl8fGEpKSxzPW8pfTtmb3IoaT0wLG49ZS5sZW5ndGg7aTxuOysraSlvPXQuZ2V0UGl4ZWxGb3JWYWx1ZShlW2ldKSxyKCk7Zm9yKHM9dm9pZCAwLGk9MCxuPXQudGlja3MubGVuZ3RoO2k8bjsrK2kpbz10LmdldFBpeGVsRm9yVGljayhpKSxyKCk7cmV0dXJuIGF9ZnVuY3Rpb24gbG8odCxlLGksbil7cmV0dXJuIFkodCk/ZnVuY3Rpb24odCxlLGksbil7Y29uc3Qgbz1pLnBhcnNlKHRbMF0sbikscz1pLnBhcnNlKHRbMV0sbiksYT1NYXRoLm1pbihvLHMpLHI9TWF0aC5tYXgobyxzKTtsZXQgbD1hLGM9cjtNYXRoLmFicyhhKT5NYXRoLmFicyhyKSYmKGw9cixjPWEpLGVbaS5heGlzXT1jLGUuX2N1c3RvbT17YmFyU3RhcnQ6bCxiYXJFbmQ6YyxzdGFydDpvLGVuZDpzLG1pbjphLG1heDpyfX0odCxlLGksbik6ZVtpLmF4aXNdPWkucGFyc2UodCxuKSxlfWZ1bmN0aW9uIGNvKHQsZSxpLG4pe2NvbnN0IG89dC5pU2NhbGUscz10LnZTY2FsZSxhPW8uZ2V0TGFiZWxzKCkscj1vPT09cyxsPVtdO2xldCBjLGgsZCx1O2ZvcihjPWksaD1pK247YzxoOysrYyl1PWVbY10sZD17fSxkW28uYXhpc109cnx8by5wYXJzZShhW2NdLGMpLGwucHVzaChsbyh1LGQscyxjKSk7cmV0dXJuIGx9ZnVuY3Rpb24gaG8odCl7cmV0dXJuIHQmJnZvaWQgMCE9PXQuYmFyU3RhcnQmJnZvaWQgMCE9PXQuYmFyRW5kfWNsYXNzIHVvIGV4dGVuZHMgRWl7cGFyc2VQcmltaXRpdmVEYXRhKHQsZSxpLG4pe3JldHVybiBjbyh0LGUsaSxuKX1wYXJzZUFycmF5RGF0YSh0LGUsaSxuKXtyZXR1cm4gY28odCxlLGksbil9cGFyc2VPYmplY3REYXRhKHQsZSxpLG4pe2NvbnN0e2lTY2FsZTpvLHZTY2FsZTpzfT10LHt4QXhpc0tleTphPVwieFwiLHlBeGlzS2V5OnI9XCJ5XCJ9PXRoaXMuX3BhcnNpbmcsbD1cInhcIj09PW8uYXhpcz9hOnIsYz1cInhcIj09PXMuYXhpcz9hOnIsaD1bXTtsZXQgZCx1LGYsZztmb3IoZD1pLHU9aStuO2Q8dTsrK2QpZz1lW2RdLGY9e30sZltvLmF4aXNdPW8ucGFyc2UobHQoZyxsKSxkKSxoLnB1c2gobG8obHQoZyxjKSxmLHMsZCkpO3JldHVybiBofXVwZGF0ZVJhbmdlRnJvbVBhcnNlZCh0LGUsaSxuKXtzdXBlci51cGRhdGVSYW5nZUZyb21QYXJzZWQodCxlLGksbik7Y29uc3Qgbz1pLl9jdXN0b207byYmZT09PXRoaXMuX2NhY2hlZE1ldGEudlNjYWxlJiYodC5taW49TWF0aC5taW4odC5taW4sby5taW4pLHQubWF4PU1hdGgubWF4KHQubWF4LG8ubWF4KSl9Z2V0TWF4T3ZlcmZsb3coKXtyZXR1cm4gMH1nZXRMYWJlbEFuZFZhbHVlKHQpe2NvbnN0IGU9dGhpcy5fY2FjaGVkTWV0YSx7aVNjYWxlOmksdlNjYWxlOm59PWUsbz10aGlzLmdldFBhcnNlZCh0KSxzPW8uX2N1c3RvbSxhPWhvKHMpP1wiW1wiK3Muc3RhcnQrXCIsIFwiK3MuZW5kK1wiXVwiOlwiXCIrbi5nZXRMYWJlbEZvclZhbHVlKG9bbi5heGlzXSk7cmV0dXJue2xhYmVsOlwiXCIraS5nZXRMYWJlbEZvclZhbHVlKG9baS5heGlzXSksdmFsdWU6YX19aW5pdGlhbGl6ZSgpe2NvbnN0IHQ9dGhpczt0LmVuYWJsZU9wdGlvblNoYXJpbmc9ITAsc3VwZXIuaW5pdGlhbGl6ZSgpO3QuX2NhY2hlZE1ldGEuc3RhY2s9dC5nZXREYXRhc2V0KCkuc3RhY2t9dXBkYXRlKHQpe2NvbnN0IGU9dGhpcy5fY2FjaGVkTWV0YTt0aGlzLnVwZGF0ZUVsZW1lbnRzKGUuZGF0YSwwLGUuZGF0YS5sZW5ndGgsdCl9dXBkYXRlRWxlbWVudHModCxlLGksbil7Y29uc3Qgbz10aGlzLHM9XCJyZXNldFwiPT09bixhPW8uX2NhY2hlZE1ldGEudlNjYWxlLHI9YS5nZXRCYXNlUGl4ZWwoKSxsPWEuaXNIb3Jpem9udGFsKCksYz1vLl9nZXRSdWxlcigpLGg9by5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGUsbiksZD1vLmdldFNoYXJlZE9wdGlvbnMoaCksdT1vLmluY2x1ZGVPcHRpb25zKG4sZCk7by51cGRhdGVTaGFyZWRPcHRpb25zKGQsbixoKTtmb3IobGV0IGg9ZTtoPGUraTtoKyspe2NvbnN0IGU9by5nZXRQYXJzZWQoaCksaT1zfHwkKGVbYS5heGlzXSk/e2Jhc2U6cixoZWFkOnJ9Om8uX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzKGgpLGY9by5fY2FsY3VsYXRlQmFySW5kZXhQaXhlbHMoaCxjKSxnPShlLl9zdGFja3N8fHt9KVthLmF4aXNdLHA9e2hvcml6b250YWw6bCxiYXNlOmkuYmFzZSxlbmFibGVCb3JkZXJSYWRpdXM6IWd8fGhvKGUuX2N1c3RvbSl8fG8uaW5kZXg9PT1nLl90b3B8fG8uaW5kZXg9PT1nLl9ib3R0b20seDpsP2kuaGVhZDpmLmNlbnRlcix5Omw/Zi5jZW50ZXI6aS5oZWFkLGhlaWdodDpsP2Yuc2l6ZTpNYXRoLmFicyhpLnNpemUpLHdpZHRoOmw/TWF0aC5hYnMoaS5zaXplKTpmLnNpemV9O3UmJihwLm9wdGlvbnM9ZHx8by5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGgsdFtoXS5hY3RpdmU/XCJhY3RpdmVcIjpuKSksby51cGRhdGVFbGVtZW50KHRbaF0saCxwLG4pfX1fZ2V0U3RhY2tzKHQsZSl7Y29uc3QgaT10aGlzLl9jYWNoZWRNZXRhLmlTY2FsZSxuPWkuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModGhpcy5fdHlwZSksbz1pLm9wdGlvbnMuc3RhY2tlZCxzPW4ubGVuZ3RoLGE9W107bGV0IHIsbDtmb3Iocj0wO3I8czsrK3IpaWYobD1uW3JdLGwuY29udHJvbGxlci5vcHRpb25zLmdyb3VwZWQpe2lmKHZvaWQgMCE9PWUpe2NvbnN0IHQ9bC5jb250cm9sbGVyLmdldFBhcnNlZChlKVtsLmNvbnRyb2xsZXIuX2NhY2hlZE1ldGEudlNjYWxlLmF4aXNdO2lmKCQodCl8fGlzTmFOKHQpKWNvbnRpbnVlfWlmKCghMT09PW98fC0xPT09YS5pbmRleE9mKGwuc3RhY2spfHx2b2lkIDA9PT1vJiZ2b2lkIDA9PT1sLnN0YWNrKSYmYS5wdXNoKGwuc3RhY2spLGwuaW5kZXg9PT10KWJyZWFrfXJldHVybiBhLmxlbmd0aHx8YS5wdXNoKHZvaWQgMCksYX1fZ2V0U3RhY2tDb3VudCh0KXtyZXR1cm4gdGhpcy5fZ2V0U3RhY2tzKHZvaWQgMCx0KS5sZW5ndGh9X2dldFN0YWNrSW5kZXgodCxlLGkpe2NvbnN0IG49dGhpcy5fZ2V0U3RhY2tzKHQsaSksbz12b2lkIDAhPT1lP24uaW5kZXhPZihlKTotMTtyZXR1cm4tMT09PW8/bi5sZW5ndGgtMTpvfV9nZXRSdWxlcigpe2NvbnN0IHQ9dGhpcyxlPXQub3B0aW9ucyxpPXQuX2NhY2hlZE1ldGEsbj1pLmlTY2FsZSxvPVtdO2xldCBzLGE7Zm9yKHM9MCxhPWkuZGF0YS5sZW5ndGg7czxhOysrcylvLnB1c2gobi5nZXRQaXhlbEZvclZhbHVlKHQuZ2V0UGFyc2VkKHMpW24uYXhpc10scykpO2NvbnN0IHI9ZS5iYXJUaGlja25lc3M7cmV0dXJue21pbjpyfHxybyhuKSxwaXhlbHM6byxzdGFydDpuLl9zdGFydFBpeGVsLGVuZDpuLl9lbmRQaXhlbCxzdGFja0NvdW50OnQuX2dldFN0YWNrQ291bnQoKSxzY2FsZTpuLGdyb3VwZWQ6ZS5ncm91cGVkLHJhdGlvOnI/MTplLmNhdGVnb3J5UGVyY2VudGFnZSplLmJhclBlcmNlbnRhZ2V9fV9jYWxjdWxhdGVCYXJWYWx1ZVBpeGVscyh0KXtjb25zdCBlPXRoaXMse3ZTY2FsZTppLF9zdGFja2VkOm59PWUuX2NhY2hlZE1ldGEse2Jhc2U6byxtaW5CYXJMZW5ndGg6c309ZS5vcHRpb25zLGE9ZS5nZXRQYXJzZWQodCkscj1hLl9jdXN0b20sbD1obyhyKTtsZXQgYyxoLGQ9YVtpLmF4aXNdLHU9MCxmPW4/ZS5hcHBseVN0YWNrKGksYSxuKTpkO2YhPT1kJiYodT1mLWQsZj1kKSxsJiYoZD1yLmJhclN0YXJ0LGY9ci5iYXJFbmQtci5iYXJTdGFydCwwIT09ZCYmRHQoZCkhPT1EdChyLmJhckVuZCkmJih1PTApLHUrPWQpO2NvbnN0IGc9JChvKXx8bD91Om87bGV0IHA9aS5nZXRQaXhlbEZvclZhbHVlKGcpO2M9dGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eSh0KT9pLmdldFBpeGVsRm9yVmFsdWUodStmKTpwLGg9Yy1wLHZvaWQgMCE9PXMmJk1hdGguYWJzKGgpPHMmJihoPWg8MD8tczpzLDA9PT1kJiYocC09aC8yKSxjPXAraCk7Y29uc3QgbT1vfHwwO2lmKHA9PT1pLmdldFBpeGVsRm9yVmFsdWUobSkpe2NvbnN0IHQ9aS5nZXRMaW5lV2lkdGhGb3JWYWx1ZShtKS8yO2g+MD8ocCs9dCxoLT10KTpoPDAmJihwLT10LGgrPXQpfXJldHVybntzaXplOmgsYmFzZTpwLGhlYWQ6YyxjZW50ZXI6YytoLzJ9fV9jYWxjdWxhdGVCYXJJbmRleFBpeGVscyh0LGUpe2NvbnN0IGk9dGhpcyxuPWUuc2NhbGUsbz1pLm9wdGlvbnMscz1vLnNraXBOdWxsLGE9SyhvLm1heEJhclRoaWNrbmVzcywxLzApO2xldCByLGw7aWYoZS5ncm91cGVkKXtjb25zdCBuPXM/aS5fZ2V0U3RhY2tDb3VudCh0KTplLnN0YWNrQ291bnQsYz1cImZsZXhcIj09PW8uYmFyVGhpY2tuZXNzP2Z1bmN0aW9uKHQsZSxpLG4pe2NvbnN0IG89ZS5waXhlbHMscz1vW3RdO2xldCBhPXQ+MD9vW3QtMV06bnVsbCxyPXQ8by5sZW5ndGgtMT9vW3QrMV06bnVsbDtjb25zdCBsPWkuY2F0ZWdvcnlQZXJjZW50YWdlO251bGw9PT1hJiYoYT1zLShudWxsPT09cj9lLmVuZC1lLnN0YXJ0OnItcykpLG51bGw9PT1yJiYocj1zK3MtYSk7Y29uc3QgYz1zLShzLU1hdGgubWluKGEscikpLzIqbDtyZXR1cm57Y2h1bms6TWF0aC5hYnMoci1hKS8yKmwvbixyYXRpbzppLmJhclBlcmNlbnRhZ2Usc3RhcnQ6Y319KHQsZSxvLG4pOmZ1bmN0aW9uKHQsZSxpLG4pe2NvbnN0IG89aS5iYXJUaGlja25lc3M7bGV0IHMsYTtyZXR1cm4gJChvKT8ocz1lLm1pbippLmNhdGVnb3J5UGVyY2VudGFnZSxhPWkuYmFyUGVyY2VudGFnZSk6KHM9bypuLGE9MSkse2NodW5rOnMvbixyYXRpbzphLHN0YXJ0OmUucGl4ZWxzW3RdLXMvMn19KHQsZSxvLG4pLGg9aS5fZ2V0U3RhY2tJbmRleChpLmluZGV4LGkuX2NhY2hlZE1ldGEuc3RhY2sscz90OnZvaWQgMCk7cj1jLnN0YXJ0K2MuY2h1bmsqaCtjLmNodW5rLzIsbD1NYXRoLm1pbihhLGMuY2h1bmsqYy5yYXRpbyl9ZWxzZSByPW4uZ2V0UGl4ZWxGb3JWYWx1ZShpLmdldFBhcnNlZCh0KVtuLmF4aXNdLHQpLGw9TWF0aC5taW4oYSxlLm1pbiplLnJhdGlvKTtyZXR1cm57YmFzZTpyLWwvMixoZWFkOnIrbC8yLGNlbnRlcjpyLHNpemU6bH19ZHJhdygpe2NvbnN0IHQ9dGhpcyxlPXQuX2NhY2hlZE1ldGEsaT1lLnZTY2FsZSxuPWUuZGF0YSxvPW4ubGVuZ3RoO2xldCBzPTA7Zm9yKDtzPG87KytzKW51bGwhPT10LmdldFBhcnNlZChzKVtpLmF4aXNdJiZuW3NdLmRyYXcodC5fY3R4KX19dW8uaWQ9XCJiYXJcIix1by5kZWZhdWx0cz17ZGF0YXNldEVsZW1lbnRUeXBlOiExLGRhdGFFbGVtZW50VHlwZTpcImJhclwiLGNhdGVnb3J5UGVyY2VudGFnZTouOCxiYXJQZXJjZW50YWdlOi45LGdyb3VwZWQ6ITAsYW5pbWF0aW9uczp7bnVtYmVyczp7dHlwZTpcIm51bWJlclwiLHByb3BlcnRpZXM6W1wieFwiLFwieVwiLFwiYmFzZVwiLFwid2lkdGhcIixcImhlaWdodFwiXX19fSx1by5vdmVycmlkZXM9e2ludGVyYWN0aW9uOnttb2RlOlwiaW5kZXhcIn0sc2NhbGVzOntfaW5kZXhfOnt0eXBlOlwiY2F0ZWdvcnlcIixvZmZzZXQ6ITAsZ3JpZDp7b2Zmc2V0OiEwfX0sX3ZhbHVlXzp7dHlwZTpcImxpbmVhclwiLGJlZ2luQXRaZXJvOiEwfX19O2NsYXNzIGZvIGV4dGVuZHMgRWl7aW5pdGlhbGl6ZSgpe3RoaXMuZW5hYmxlT3B0aW9uU2hhcmluZz0hMCxzdXBlci5pbml0aWFsaXplKCl9cGFyc2VPYmplY3REYXRhKHQsZSxpLG4pe2NvbnN0e3hTY2FsZTpvLHlTY2FsZTpzfT10LHt4QXhpc0tleTphPVwieFwiLHlBeGlzS2V5OnI9XCJ5XCJ9PXRoaXMuX3BhcnNpbmcsbD1bXTtsZXQgYyxoLGQ7Zm9yKGM9aSxoPWkrbjtjPGg7KytjKWQ9ZVtjXSxsLnB1c2goe3g6by5wYXJzZShsdChkLGEpLGMpLHk6cy5wYXJzZShsdChkLHIpLGMpLF9jdXN0b206ZCYmZC5yJiYrZC5yfSk7cmV0dXJuIGx9Z2V0TWF4T3ZlcmZsb3coKXtjb25zdHtkYXRhOnQsX3BhcnNlZDplfT10aGlzLl9jYWNoZWRNZXRhO2xldCBpPTA7Zm9yKGxldCBuPXQubGVuZ3RoLTE7bj49MDstLW4paT1NYXRoLm1heChpLHRbbl0uc2l6ZSgpLzIsZVtuXS5fY3VzdG9tKTtyZXR1cm4gaT4wJiZpfWdldExhYmVsQW5kVmFsdWUodCl7Y29uc3QgZT10aGlzLl9jYWNoZWRNZXRhLHt4U2NhbGU6aSx5U2NhbGU6bn09ZSxvPXRoaXMuZ2V0UGFyc2VkKHQpLHM9aS5nZXRMYWJlbEZvclZhbHVlKG8ueCksYT1uLmdldExhYmVsRm9yVmFsdWUoby55KSxyPW8uX2N1c3RvbTtyZXR1cm57bGFiZWw6ZS5sYWJlbCx2YWx1ZTpcIihcIitzK1wiLCBcIithKyhyP1wiLCBcIityOlwiXCIpK1wiKVwifX11cGRhdGUodCl7Y29uc3QgZT10aGlzLl9jYWNoZWRNZXRhLmRhdGE7dGhpcy51cGRhdGVFbGVtZW50cyhlLDAsZS5sZW5ndGgsdCl9dXBkYXRlRWxlbWVudHModCxlLGksbil7Y29uc3Qgbz10aGlzLHM9XCJyZXNldFwiPT09bix7aVNjYWxlOmEsdlNjYWxlOnJ9PW8uX2NhY2hlZE1ldGEsbD1vLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoZSxuKSxjPW8uZ2V0U2hhcmVkT3B0aW9ucyhsKSxoPW8uaW5jbHVkZU9wdGlvbnMobixjKSxkPWEuYXhpcyx1PXIuYXhpcztmb3IobGV0IGw9ZTtsPGUraTtsKyspe2NvbnN0IGU9dFtsXSxpPSFzJiZvLmdldFBhcnNlZChsKSxjPXt9LGY9Y1tkXT1zP2EuZ2V0UGl4ZWxGb3JEZWNpbWFsKC41KTphLmdldFBpeGVsRm9yVmFsdWUoaVtkXSksZz1jW3VdPXM/ci5nZXRCYXNlUGl4ZWwoKTpyLmdldFBpeGVsRm9yVmFsdWUoaVt1XSk7Yy5za2lwPWlzTmFOKGYpfHxpc05hTihnKSxoJiYoYy5vcHRpb25zPW8ucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhsLGUuYWN0aXZlP1wiYWN0aXZlXCI6bikscyYmKGMub3B0aW9ucy5yYWRpdXM9MCkpLG8udXBkYXRlRWxlbWVudChlLGwsYyxuKX1vLnVwZGF0ZVNoYXJlZE9wdGlvbnMoYyxuLGwpfXJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnModCxlKXtjb25zdCBpPXRoaXMuZ2V0UGFyc2VkKHQpO2xldCBuPXN1cGVyLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnModCxlKTtuLiRzaGFyZWQmJihuPU9iamVjdC5hc3NpZ24oe30sbix7JHNoYXJlZDohMX0pKTtjb25zdCBvPW4ucmFkaXVzO3JldHVyblwiYWN0aXZlXCIhPT1lJiYobi5yYWRpdXM9MCksbi5yYWRpdXMrPUsoaSYmaS5fY3VzdG9tLG8pLG59fWZvLmlkPVwiYnViYmxlXCIsZm8uZGVmYXVsdHM9e2RhdGFzZXRFbGVtZW50VHlwZTohMSxkYXRhRWxlbWVudFR5cGU6XCJwb2ludFwiLGFuaW1hdGlvbnM6e251bWJlcnM6e3R5cGU6XCJudW1iZXJcIixwcm9wZXJ0aWVzOltcInhcIixcInlcIixcImJvcmRlcldpZHRoXCIsXCJyYWRpdXNcIl19fX0sZm8ub3ZlcnJpZGVzPXtzY2FsZXM6e3g6e3R5cGU6XCJsaW5lYXJcIn0seTp7dHlwZTpcImxpbmVhclwifX0scGx1Z2luczp7dG9vbHRpcDp7Y2FsbGJhY2tzOnt0aXRsZTooKT0+XCJcIn19fX07Y2xhc3MgZ28gZXh0ZW5kcyBFaXtjb25zdHJ1Y3Rvcih0LGUpe3N1cGVyKHQsZSksdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nPSEwLHRoaXMuaW5uZXJSYWRpdXM9dm9pZCAwLHRoaXMub3V0ZXJSYWRpdXM9dm9pZCAwLHRoaXMub2Zmc2V0WD12b2lkIDAsdGhpcy5vZmZzZXRZPXZvaWQgMH1saW5rU2NhbGVzKCl7fXBhcnNlKHQsZSl7Y29uc3QgaT10aGlzLmdldERhdGFzZXQoKS5kYXRhLG49dGhpcy5fY2FjaGVkTWV0YTtsZXQgbyxzO2ZvcihvPXQscz10K2U7bzxzOysrbyluLl9wYXJzZWRbb109K2lbb119X2dldFJvdGF0aW9uKCl7cmV0dXJuIEV0KHRoaXMub3B0aW9ucy5yb3RhdGlvbi05MCl9X2dldENpcmN1bWZlcmVuY2UoKXtyZXR1cm4gRXQodGhpcy5vcHRpb25zLmNpcmN1bWZlcmVuY2UpfV9nZXRSb3RhdGlvbkV4dGVudHMoKXtsZXQgdD1fdCxlPS1fdDtjb25zdCBpPXRoaXM7Zm9yKGxldCBuPTA7bjxpLmNoYXJ0LmRhdGEuZGF0YXNldHMubGVuZ3RoOysrbilpZihpLmNoYXJ0LmlzRGF0YXNldFZpc2libGUobikpe2NvbnN0IG89aS5jaGFydC5nZXREYXRhc2V0TWV0YShuKS5jb250cm9sbGVyLHM9by5fZ2V0Um90YXRpb24oKSxhPW8uX2dldENpcmN1bWZlcmVuY2UoKTt0PU1hdGgubWluKHQscyksZT1NYXRoLm1heChlLHMrYSl9cmV0dXJue3JvdGF0aW9uOnQsY2lyY3VtZmVyZW5jZTplLXR9fXVwZGF0ZSh0KXtjb25zdCBlPXRoaXMsaT1lLmNoYXJ0LHtjaGFydEFyZWE6bn09aSxvPWUuX2NhY2hlZE1ldGEscz1vLmRhdGEsYT1lLmdldE1heEJvcmRlcldpZHRoKCkrZS5nZXRNYXhPZmZzZXQocykrZS5vcHRpb25zLnNwYWNpbmcscj1NYXRoLm1heCgoTWF0aC5taW4obi53aWR0aCxuLmhlaWdodCktYSkvMiwwKSxsPU1hdGgubWluKEcoZS5vcHRpb25zLmN1dG91dCxyKSwxKSxjPWUuX2dldFJpbmdXZWlnaHQoZS5pbmRleCkse2NpcmN1bWZlcmVuY2U6aCxyb3RhdGlvbjpkfT1lLl9nZXRSb3RhdGlvbkV4dGVudHMoKSx7cmF0aW9YOnUscmF0aW9ZOmYsb2Zmc2V0WDpnLG9mZnNldFk6cH09ZnVuY3Rpb24odCxlLGkpe2xldCBuPTEsbz0xLHM9MCxhPTA7aWYoZTxfdCl7Y29uc3Qgcj10LGw9citlLGM9TWF0aC5jb3MociksaD1NYXRoLnNpbihyKSxkPU1hdGguY29zKGwpLHU9TWF0aC5zaW4obCksZj0odCxlLG4pPT5OdCh0LHIsbCwhMCk/MTpNYXRoLm1heChlLGUqaSxuLG4qaSksZz0odCxlLG4pPT5OdCh0LHIsbCwhMCk/LTE6TWF0aC5taW4oZSxlKmksbixuKmkpLHA9ZigwLGMsZCksbT1mKE10LGgsdSkseD1nKGJ0LGMsZCksYj1nKGJ0K010LGgsdSk7bj0ocC14KS8yLG89KG0tYikvMixzPS0ocCt4KS8yLGE9LShtK2IpLzJ9cmV0dXJue3JhdGlvWDpuLHJhdGlvWTpvLG9mZnNldFg6cyxvZmZzZXRZOmF9fShkLGgsbCksbT0obi53aWR0aC1hKS91LHg9KG4uaGVpZ2h0LWEpL2YsYj1NYXRoLm1heChNYXRoLm1pbihtLHgpLzIsMCksXz1aKGUub3B0aW9ucy5yYWRpdXMsYikseT0oXy1NYXRoLm1heChfKmwsMCkpL2UuX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwoKTtlLm9mZnNldFg9ZypfLGUub2Zmc2V0WT1wKl8sby50b3RhbD1lLmNhbGN1bGF0ZVRvdGFsKCksZS5vdXRlclJhZGl1cz1fLXkqZS5fZ2V0UmluZ1dlaWdodE9mZnNldChlLmluZGV4KSxlLmlubmVyUmFkaXVzPU1hdGgubWF4KGUub3V0ZXJSYWRpdXMteSpjLDApLGUudXBkYXRlRWxlbWVudHMocywwLHMubGVuZ3RoLHQpfV9jaXJjdW1mZXJlbmNlKHQsZSl7Y29uc3QgaT10aGlzLG49aS5vcHRpb25zLG89aS5fY2FjaGVkTWV0YSxzPWkuX2dldENpcmN1bWZlcmVuY2UoKTtyZXR1cm4gZSYmbi5hbmltYXRpb24uYW5pbWF0ZVJvdGF0ZXx8IXRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkodCl8fG51bGw9PT1vLl9wYXJzZWRbdF0/MDppLmNhbGN1bGF0ZUNpcmN1bWZlcmVuY2Uoby5fcGFyc2VkW3RdKnMvX3QpfXVwZGF0ZUVsZW1lbnRzKHQsZSxpLG4pe2NvbnN0IG89dGhpcyxzPVwicmVzZXRcIj09PW4sYT1vLmNoYXJ0LHI9YS5jaGFydEFyZWEsbD1hLm9wdGlvbnMuYW5pbWF0aW9uLGM9KHIubGVmdCtyLnJpZ2h0KS8yLGg9KHIudG9wK3IuYm90dG9tKS8yLGQ9cyYmbC5hbmltYXRlU2NhbGUsdT1kPzA6by5pbm5lclJhZGl1cyxmPWQ/MDpvLm91dGVyUmFkaXVzLGc9by5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGUsbikscD1vLmdldFNoYXJlZE9wdGlvbnMoZyksbT1vLmluY2x1ZGVPcHRpb25zKG4scCk7bGV0IHgsYj1vLl9nZXRSb3RhdGlvbigpO2Zvcih4PTA7eDxlOysreCliKz1vLl9jaXJjdW1mZXJlbmNlKHgscyk7Zm9yKHg9ZTt4PGUraTsrK3gpe2NvbnN0IGU9by5fY2lyY3VtZmVyZW5jZSh4LHMpLGk9dFt4XSxhPXt4OmMrby5vZmZzZXRYLHk6aCtvLm9mZnNldFksc3RhcnRBbmdsZTpiLGVuZEFuZ2xlOmIrZSxjaXJjdW1mZXJlbmNlOmUsb3V0ZXJSYWRpdXM6Zixpbm5lclJhZGl1czp1fTttJiYoYS5vcHRpb25zPXB8fG8ucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyh4LGkuYWN0aXZlP1wiYWN0aXZlXCI6bikpLGIrPWUsby51cGRhdGVFbGVtZW50KGkseCxhLG4pfW8udXBkYXRlU2hhcmVkT3B0aW9ucyhwLG4sZyl9Y2FsY3VsYXRlVG90YWwoKXtjb25zdCB0PXRoaXMuX2NhY2hlZE1ldGEsZT10LmRhdGE7bGV0IGksbj0wO2ZvcihpPTA7aTxlLmxlbmd0aDtpKyspe2NvbnN0IGU9dC5fcGFyc2VkW2ldO251bGwhPT1lJiYhaXNOYU4oZSkmJnRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSkmJihuKz1NYXRoLmFicyhlKSl9cmV0dXJuIG59Y2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSh0KXtjb25zdCBlPXRoaXMuX2NhY2hlZE1ldGEudG90YWw7cmV0dXJuIGU+MCYmIWlzTmFOKHQpP190KihNYXRoLmFicyh0KS9lKTowfWdldExhYmVsQW5kVmFsdWUodCl7Y29uc3QgZT10aGlzLl9jYWNoZWRNZXRhLGk9dGhpcy5jaGFydCxuPWkuZGF0YS5sYWJlbHN8fFtdLG89RmkoZS5fcGFyc2VkW3RdLGkub3B0aW9ucy5sb2NhbGUpO3JldHVybntsYWJlbDpuW3RdfHxcIlwiLHZhbHVlOm99fWdldE1heEJvcmRlcldpZHRoKHQpe2NvbnN0IGU9dGhpcztsZXQgaT0wO2NvbnN0IG49ZS5jaGFydDtsZXQgbyxzLGEscixsO2lmKCF0KWZvcihvPTAscz1uLmRhdGEuZGF0YXNldHMubGVuZ3RoO288czsrK28paWYobi5pc0RhdGFzZXRWaXNpYmxlKG8pKXthPW4uZ2V0RGF0YXNldE1ldGEobyksdD1hLmRhdGEscj1hLmNvbnRyb2xsZXIsciE9PWUmJnIuY29uZmlndXJlKCk7YnJlYWt9aWYoIXQpcmV0dXJuIDA7Zm9yKG89MCxzPXQubGVuZ3RoO288czsrK28pbD1yLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMobyksXCJpbm5lclwiIT09bC5ib3JkZXJBbGlnbiYmKGk9TWF0aC5tYXgoaSxsLmJvcmRlcldpZHRofHwwLGwuaG92ZXJCb3JkZXJXaWR0aHx8MCkpO3JldHVybiBpfWdldE1heE9mZnNldCh0KXtsZXQgZT0wO2ZvcihsZXQgaT0wLG49dC5sZW5ndGg7aTxuOysraSl7Y29uc3QgdD10aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSk7ZT1NYXRoLm1heChlLHQub2Zmc2V0fHwwLHQuaG92ZXJPZmZzZXR8fDApfXJldHVybiBlfV9nZXRSaW5nV2VpZ2h0T2Zmc2V0KHQpe2xldCBlPTA7Zm9yKGxldCBpPTA7aTx0OysraSl0aGlzLmNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkmJihlKz10aGlzLl9nZXRSaW5nV2VpZ2h0KGkpKTtyZXR1cm4gZX1fZ2V0UmluZ1dlaWdodCh0KXtyZXR1cm4gTWF0aC5tYXgoSyh0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbdF0ud2VpZ2h0LDEpLDApfV9nZXRWaXNpYmxlRGF0YXNldFdlaWdodFRvdGFsKCl7cmV0dXJuIHRoaXMuX2dldFJpbmdXZWlnaHRPZmZzZXQodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aCl8fDF9fWdvLmlkPVwiZG91Z2hudXRcIixnby5kZWZhdWx0cz17ZGF0YXNldEVsZW1lbnRUeXBlOiExLGRhdGFFbGVtZW50VHlwZTpcImFyY1wiLGFuaW1hdGlvbjp7YW5pbWF0ZVJvdGF0ZTohMCxhbmltYXRlU2NhbGU6ITF9LGFuaW1hdGlvbnM6e251bWJlcnM6e3R5cGU6XCJudW1iZXJcIixwcm9wZXJ0aWVzOltcImNpcmN1bWZlcmVuY2VcIixcImVuZEFuZ2xlXCIsXCJpbm5lclJhZGl1c1wiLFwib3V0ZXJSYWRpdXNcIixcInN0YXJ0QW5nbGVcIixcInhcIixcInlcIixcIm9mZnNldFwiLFwiYm9yZGVyV2lkdGhcIixcInNwYWNpbmdcIl19fSxjdXRvdXQ6XCI1MCVcIixyb3RhdGlvbjowLGNpcmN1bWZlcmVuY2U6MzYwLHJhZGl1czpcIjEwMCVcIixzcGFjaW5nOjAsaW5kZXhBeGlzOlwiclwifSxnby5kZXNjcmlwdG9ycz17X3NjcmlwdGFibGU6dD0+XCJzcGFjaW5nXCIhPT10LF9pbmRleGFibGU6dD0+XCJzcGFjaW5nXCIhPT10fSxnby5vdmVycmlkZXM9e2FzcGVjdFJhdGlvOjEscGx1Z2luczp7bGVnZW5kOntsYWJlbHM6e2dlbmVyYXRlTGFiZWxzKHQpe2NvbnN0IGU9dC5kYXRhO2lmKGUubGFiZWxzLmxlbmd0aCYmZS5kYXRhc2V0cy5sZW5ndGgpe2NvbnN0e2xhYmVsczp7cG9pbnRTdHlsZTppfX09dC5sZWdlbmQub3B0aW9ucztyZXR1cm4gZS5sYWJlbHMubWFwKCgoZSxuKT0+e2NvbnN0IG89dC5nZXREYXRhc2V0TWV0YSgwKS5jb250cm9sbGVyLmdldFN0eWxlKG4pO3JldHVybnt0ZXh0OmUsZmlsbFN0eWxlOm8uYmFja2dyb3VuZENvbG9yLHN0cm9rZVN0eWxlOm8uYm9yZGVyQ29sb3IsbGluZVdpZHRoOm8uYm9yZGVyV2lkdGgscG9pbnRTdHlsZTppLGhpZGRlbjohdC5nZXREYXRhVmlzaWJpbGl0eShuKSxpbmRleDpufX0pKX1yZXR1cm5bXX19LG9uQ2xpY2sodCxlLGkpe2kuY2hhcnQudG9nZ2xlRGF0YVZpc2liaWxpdHkoZS5pbmRleCksaS5jaGFydC51cGRhdGUoKX19LHRvb2x0aXA6e2NhbGxiYWNrczp7dGl0bGU6KCk9PlwiXCIsbGFiZWwodCl7bGV0IGU9dC5sYWJlbDtjb25zdCBpPVwiOiBcIit0LmZvcm1hdHRlZFZhbHVlO3JldHVybiBZKGUpPyhlPWUuc2xpY2UoKSxlWzBdKz1pKTplKz1pLGV9fX19fTtjbGFzcyBwbyBleHRlbmRzIEVpe2luaXRpYWxpemUoKXt0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmc9ITAsc3VwZXIuaW5pdGlhbGl6ZSgpfXVwZGF0ZSh0KXtjb25zdCBlPXRoaXMsaT1lLl9jYWNoZWRNZXRhLHtkYXRhc2V0Om4sZGF0YTpvPVtdLF9kYXRhc2V0OnN9PWksYT1lLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQ7bGV0e3N0YXJ0OnIsY291bnQ6bH09ZnVuY3Rpb24odCxlLGkpe2NvbnN0IG49ZS5sZW5ndGg7bGV0IG89MCxzPW47aWYodC5fc29ydGVkKXtjb25zdHtpU2NhbGU6YSxfcGFyc2VkOnJ9PXQsbD1hLmF4aXMse21pbjpjLG1heDpoLG1pbkRlZmluZWQ6ZCxtYXhEZWZpbmVkOnV9PWEuZ2V0VXNlckJvdW5kcygpO2QmJihvPUh0KE1hdGgubWluKHNlKHIsYS5heGlzLGMpLmxvLGk/bjpzZShlLGwsYS5nZXRQaXhlbEZvclZhbHVlKGMpKS5sbyksMCxuLTEpKSxzPXU/SHQoTWF0aC5tYXgoc2UocixhLmF4aXMsaCkuaGkrMSxpPzA6c2UoZSxsLGEuZ2V0UGl4ZWxGb3JWYWx1ZShoKSkuaGkrMSksbyxuKS1vOm4tb31yZXR1cm57c3RhcnQ6byxjb3VudDpzfX0oaSxvLGEpO2UuX2RyYXdTdGFydD1yLGUuX2RyYXdDb3VudD1sLGZ1bmN0aW9uKHQpe2NvbnN0e3hTY2FsZTplLHlTY2FsZTppLF9zY2FsZVJhbmdlczpufT10LG89e3htaW46ZS5taW4seG1heDplLm1heCx5bWluOmkubWluLHltYXg6aS5tYXh9O2lmKCFuKXJldHVybiB0Ll9zY2FsZVJhbmdlcz1vLCEwO2NvbnN0IHM9bi54bWluIT09ZS5taW58fG4ueG1heCE9PWUubWF4fHxuLnltaW4hPT1pLm1pbnx8bi55bWF4IT09aS5tYXg7cmV0dXJuIE9iamVjdC5hc3NpZ24obixvKSxzfShpKSYmKHI9MCxsPW8ubGVuZ3RoKSxuLl9kZWNpbWF0ZWQ9ISFzLl9kZWNpbWF0ZWQsbi5wb2ludHM9bztjb25zdCBjPWUucmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyh0KTtlLm9wdGlvbnMuc2hvd0xpbmV8fChjLmJvcmRlcldpZHRoPTApLGMuc2VnbWVudD1lLm9wdGlvbnMuc2VnbWVudCxlLnVwZGF0ZUVsZW1lbnQobix2b2lkIDAse2FuaW1hdGVkOiFhLG9wdGlvbnM6Y30sdCksZS51cGRhdGVFbGVtZW50cyhvLHIsbCx0KX11cGRhdGVFbGVtZW50cyh0LGUsaSxuKXtjb25zdCBvPXRoaXMscz1cInJlc2V0XCI9PT1uLHtpU2NhbGU6YSx2U2NhbGU6cixfc3RhY2tlZDpsfT1vLl9jYWNoZWRNZXRhLGM9by5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGUsbiksaD1vLmdldFNoYXJlZE9wdGlvbnMoYyksZD1vLmluY2x1ZGVPcHRpb25zKG4saCksdT1hLmF4aXMsZj1yLmF4aXMsZz1vLm9wdGlvbnMuc3BhbkdhcHMscD1UdChnKT9nOk51bWJlci5QT1NJVElWRV9JTkZJTklUWSxtPW8uY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZHx8c3x8XCJub25lXCI9PT1uO2xldCB4PWU+MCYmby5nZXRQYXJzZWQoZS0xKTtmb3IobGV0IGM9ZTtjPGUraTsrK2Mpe2NvbnN0IGU9dFtjXSxpPW8uZ2V0UGFyc2VkKGMpLGc9bT9lOnt9LGI9JChpW2ZdKSxfPWdbdV09YS5nZXRQaXhlbEZvclZhbHVlKGlbdV0sYykseT1nW2ZdPXN8fGI/ci5nZXRCYXNlUGl4ZWwoKTpyLmdldFBpeGVsRm9yVmFsdWUobD9vLmFwcGx5U3RhY2socixpLGwpOmlbZl0sYyk7Zy5za2lwPWlzTmFOKF8pfHxpc05hTih5KXx8YixnLnN0b3A9Yz4wJiZpW3VdLXhbdV0+cCxnLnBhcnNlZD1pLGQmJihnLm9wdGlvbnM9aHx8by5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGMsZS5hY3RpdmU/XCJhY3RpdmVcIjpuKSksbXx8by51cGRhdGVFbGVtZW50KGUsYyxnLG4pLHg9aX1vLnVwZGF0ZVNoYXJlZE9wdGlvbnMoaCxuLGMpfWdldE1heE92ZXJmbG93KCl7Y29uc3QgdD10aGlzLGU9dC5fY2FjaGVkTWV0YSxpPWUuZGF0YXNldCxuPWkub3B0aW9ucyYmaS5vcHRpb25zLmJvcmRlcldpZHRofHwwLG89ZS5kYXRhfHxbXTtpZighby5sZW5ndGgpcmV0dXJuIG47Y29uc3Qgcz1vWzBdLnNpemUodC5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKDApKSxhPW9bby5sZW5ndGgtMV0uc2l6ZSh0LnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoby5sZW5ndGgtMSkpO3JldHVybiBNYXRoLm1heChuLHMsYSkvMn1kcmF3KCl7Y29uc3QgdD10aGlzLl9jYWNoZWRNZXRhO3QuZGF0YXNldC51cGRhdGVDb250cm9sUG9pbnRzKHRoaXMuY2hhcnQuY2hhcnRBcmVhLHQuaVNjYWxlLmF4aXMpLHN1cGVyLmRyYXcoKX19cG8uaWQ9XCJsaW5lXCIscG8uZGVmYXVsdHM9e2RhdGFzZXRFbGVtZW50VHlwZTpcImxpbmVcIixkYXRhRWxlbWVudFR5cGU6XCJwb2ludFwiLHNob3dMaW5lOiEwLHNwYW5HYXBzOiExfSxwby5vdmVycmlkZXM9e3NjYWxlczp7X2luZGV4Xzp7dHlwZTpcImNhdGVnb3J5XCJ9LF92YWx1ZV86e3R5cGU6XCJsaW5lYXJcIn19fTtjbGFzcyBtbyBleHRlbmRzIEVpe2NvbnN0cnVjdG9yKHQsZSl7c3VwZXIodCxlKSx0aGlzLmlubmVyUmFkaXVzPXZvaWQgMCx0aGlzLm91dGVyUmFkaXVzPXZvaWQgMH1nZXRMYWJlbEFuZFZhbHVlKHQpe2NvbnN0IGU9dGhpcy5fY2FjaGVkTWV0YSxpPXRoaXMuY2hhcnQsbj1pLmRhdGEubGFiZWxzfHxbXSxvPUZpKGUuX3BhcnNlZFt0XS5yLGkub3B0aW9ucy5sb2NhbGUpO3JldHVybntsYWJlbDpuW3RdfHxcIlwiLHZhbHVlOm99fXVwZGF0ZSh0KXtjb25zdCBlPXRoaXMuX2NhY2hlZE1ldGEuZGF0YTt0aGlzLl91cGRhdGVSYWRpdXMoKSx0aGlzLnVwZGF0ZUVsZW1lbnRzKGUsMCxlLmxlbmd0aCx0KX1fdXBkYXRlUmFkaXVzKCl7Y29uc3QgdD10aGlzLGU9dC5jaGFydCxpPWUuY2hhcnRBcmVhLG49ZS5vcHRpb25zLG89TWF0aC5taW4oaS5yaWdodC1pLmxlZnQsaS5ib3R0b20taS50b3ApLHM9TWF0aC5tYXgoby8yLDApLGE9KHMtTWF0aC5tYXgobi5jdXRvdXRQZXJjZW50YWdlP3MvMTAwKm4uY3V0b3V0UGVyY2VudGFnZToxLDApKS9lLmdldFZpc2libGVEYXRhc2V0Q291bnQoKTt0Lm91dGVyUmFkaXVzPXMtYSp0LmluZGV4LHQuaW5uZXJSYWRpdXM9dC5vdXRlclJhZGl1cy1hfXVwZGF0ZUVsZW1lbnRzKHQsZSxpLG4pe2NvbnN0IG89dGhpcyxzPVwicmVzZXRcIj09PW4sYT1vLmNoYXJ0LHI9by5nZXREYXRhc2V0KCksbD1hLm9wdGlvbnMuYW5pbWF0aW9uLGM9by5fY2FjaGVkTWV0YS5yU2NhbGUsaD1jLnhDZW50ZXIsZD1jLnlDZW50ZXIsdT1jLmdldEluZGV4QW5nbGUoMCktLjUqYnQ7bGV0IGYsZz11O2NvbnN0IHA9MzYwL28uY291bnRWaXNpYmxlRWxlbWVudHMoKTtmb3IoZj0wO2Y8ZTsrK2YpZys9by5fY29tcHV0ZUFuZ2xlKGYsbixwKTtmb3IoZj1lO2Y8ZStpO2YrKyl7Y29uc3QgZT10W2ZdO2xldCBpPWcsbT1nK28uX2NvbXB1dGVBbmdsZShmLG4scCkseD1hLmdldERhdGFWaXNpYmlsaXR5KGYpP2MuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUoci5kYXRhW2ZdKTowO2c9bSxzJiYobC5hbmltYXRlU2NhbGUmJih4PTApLGwuYW5pbWF0ZVJvdGF0ZSYmKGk9bT11KSk7Y29uc3QgYj17eDpoLHk6ZCxpbm5lclJhZGl1czowLG91dGVyUmFkaXVzOngsc3RhcnRBbmdsZTppLGVuZEFuZ2xlOm0sb3B0aW9uczpvLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoZixlLmFjdGl2ZT9cImFjdGl2ZVwiOm4pfTtvLnVwZGF0ZUVsZW1lbnQoZSxmLGIsbil9fWNvdW50VmlzaWJsZUVsZW1lbnRzKCl7Y29uc3QgdD10aGlzLmdldERhdGFzZXQoKSxlPXRoaXMuX2NhY2hlZE1ldGE7bGV0IGk9MDtyZXR1cm4gZS5kYXRhLmZvckVhY2goKChlLG4pPT57IWlzTmFOKHQuZGF0YVtuXSkmJnRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkobikmJmkrK30pKSxpfV9jb21wdXRlQW5nbGUodCxlLGkpe3JldHVybiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KHQpP0V0KHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyh0LGUpLmFuZ2xlfHxpKTowfX1tby5pZD1cInBvbGFyQXJlYVwiLG1vLmRlZmF1bHRzPXtkYXRhRWxlbWVudFR5cGU6XCJhcmNcIixhbmltYXRpb246e2FuaW1hdGVSb3RhdGU6ITAsYW5pbWF0ZVNjYWxlOiEwfSxhbmltYXRpb25zOntudW1iZXJzOnt0eXBlOlwibnVtYmVyXCIscHJvcGVydGllczpbXCJ4XCIsXCJ5XCIsXCJzdGFydEFuZ2xlXCIsXCJlbmRBbmdsZVwiLFwiaW5uZXJSYWRpdXNcIixcIm91dGVyUmFkaXVzXCJdfX0saW5kZXhBeGlzOlwiclwiLHN0YXJ0QW5nbGU6MH0sbW8ub3ZlcnJpZGVzPXthc3BlY3RSYXRpbzoxLHBsdWdpbnM6e2xlZ2VuZDp7bGFiZWxzOntnZW5lcmF0ZUxhYmVscyh0KXtjb25zdCBlPXQuZGF0YTtpZihlLmxhYmVscy5sZW5ndGgmJmUuZGF0YXNldHMubGVuZ3RoKXtjb25zdHtsYWJlbHM6e3BvaW50U3R5bGU6aX19PXQubGVnZW5kLm9wdGlvbnM7cmV0dXJuIGUubGFiZWxzLm1hcCgoKGUsbik9Pntjb25zdCBvPXQuZ2V0RGF0YXNldE1ldGEoMCkuY29udHJvbGxlci5nZXRTdHlsZShuKTtyZXR1cm57dGV4dDplLGZpbGxTdHlsZTpvLmJhY2tncm91bmRDb2xvcixzdHJva2VTdHlsZTpvLmJvcmRlckNvbG9yLGxpbmVXaWR0aDpvLmJvcmRlcldpZHRoLHBvaW50U3R5bGU6aSxoaWRkZW46IXQuZ2V0RGF0YVZpc2liaWxpdHkobiksaW5kZXg6bn19KSl9cmV0dXJuW119fSxvbkNsaWNrKHQsZSxpKXtpLmNoYXJ0LnRvZ2dsZURhdGFWaXNpYmlsaXR5KGUuaW5kZXgpLGkuY2hhcnQudXBkYXRlKCl9fSx0b29sdGlwOntjYWxsYmFja3M6e3RpdGxlOigpPT5cIlwiLGxhYmVsOnQ9PnQuY2hhcnQuZGF0YS5sYWJlbHNbdC5kYXRhSW5kZXhdK1wiOiBcIit0LmZvcm1hdHRlZFZhbHVlfX19LHNjYWxlczp7cjp7dHlwZTpcInJhZGlhbExpbmVhclwiLGFuZ2xlTGluZXM6e2Rpc3BsYXk6ITF9LGJlZ2luQXRaZXJvOiEwLGdyaWQ6e2NpcmN1bGFyOiEwfSxwb2ludExhYmVsczp7ZGlzcGxheTohMX0sc3RhcnRBbmdsZTowfX19O2NsYXNzIHhvIGV4dGVuZHMgZ297fXhvLmlkPVwicGllXCIseG8uZGVmYXVsdHM9e2N1dG91dDowLHJvdGF0aW9uOjAsY2lyY3VtZmVyZW5jZTozNjAscmFkaXVzOlwiMTAwJVwifTtjbGFzcyBibyBleHRlbmRzIEVpe2dldExhYmVsQW5kVmFsdWUodCl7Y29uc3QgZT10aGlzLl9jYWNoZWRNZXRhLnZTY2FsZSxpPXRoaXMuZ2V0UGFyc2VkKHQpO3JldHVybntsYWJlbDplLmdldExhYmVscygpW3RdLHZhbHVlOlwiXCIrZS5nZXRMYWJlbEZvclZhbHVlKGlbZS5heGlzXSl9fXVwZGF0ZSh0KXtjb25zdCBlPXRoaXMsaT1lLl9jYWNoZWRNZXRhLG49aS5kYXRhc2V0LG89aS5kYXRhfHxbXSxzPWkuaVNjYWxlLmdldExhYmVscygpO2lmKG4ucG9pbnRzPW8sXCJyZXNpemVcIiE9PXQpe2NvbnN0IGk9ZS5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKHQpO2Uub3B0aW9ucy5zaG93TGluZXx8KGkuYm9yZGVyV2lkdGg9MCk7Y29uc3QgYT17X2xvb3A6ITAsX2Z1bGxMb29wOnMubGVuZ3RoPT09by5sZW5ndGgsb3B0aW9uczppfTtlLnVwZGF0ZUVsZW1lbnQobix2b2lkIDAsYSx0KX1lLnVwZGF0ZUVsZW1lbnRzKG8sMCxvLmxlbmd0aCx0KX11cGRhdGVFbGVtZW50cyh0LGUsaSxuKXtjb25zdCBvPXRoaXMscz1vLmdldERhdGFzZXQoKSxhPW8uX2NhY2hlZE1ldGEuclNjYWxlLHI9XCJyZXNldFwiPT09bjtmb3IobGV0IGw9ZTtsPGUraTtsKyspe2NvbnN0IGU9dFtsXSxpPW8ucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhsLGUuYWN0aXZlP1wiYWN0aXZlXCI6biksYz1hLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShsLHMuZGF0YVtsXSksaD1yP2EueENlbnRlcjpjLngsZD1yP2EueUNlbnRlcjpjLnksdT17eDpoLHk6ZCxhbmdsZTpjLmFuZ2xlLHNraXA6aXNOYU4oaCl8fGlzTmFOKGQpLG9wdGlvbnM6aX07by51cGRhdGVFbGVtZW50KGUsbCx1LG4pfX19Ym8uaWQ9XCJyYWRhclwiLGJvLmRlZmF1bHRzPXtkYXRhc2V0RWxlbWVudFR5cGU6XCJsaW5lXCIsZGF0YUVsZW1lbnRUeXBlOlwicG9pbnRcIixpbmRleEF4aXM6XCJyXCIsc2hvd0xpbmU6ITAsZWxlbWVudHM6e2xpbmU6e2ZpbGw6XCJzdGFydFwifX19LGJvLm92ZXJyaWRlcz17YXNwZWN0UmF0aW86MSxzY2FsZXM6e3I6e3R5cGU6XCJyYWRpYWxMaW5lYXJcIn19fTtjbGFzcyBfbyBleHRlbmRzIHBve31fby5pZD1cInNjYXR0ZXJcIixfby5kZWZhdWx0cz17c2hvd0xpbmU6ITEsZmlsbDohMX0sX28ub3ZlcnJpZGVzPXtpbnRlcmFjdGlvbjp7bW9kZTpcInBvaW50XCJ9LHBsdWdpbnM6e3Rvb2x0aXA6e2NhbGxiYWNrczp7dGl0bGU6KCk9PlwiXCIsbGFiZWw6dD0+XCIoXCIrdC5sYWJlbCtcIiwgXCIrdC5mb3JtYXR0ZWRWYWx1ZStcIilcIn19fSxzY2FsZXM6e3g6e3R5cGU6XCJsaW5lYXJcIn0seTp7dHlwZTpcImxpbmVhclwifX19O3ZhciB5bz1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxCYXJDb250cm9sbGVyOnVvLEJ1YmJsZUNvbnRyb2xsZXI6Zm8sRG91Z2hudXRDb250cm9sbGVyOmdvLExpbmVDb250cm9sbGVyOnBvLFBvbGFyQXJlYUNvbnRyb2xsZXI6bW8sUGllQ29udHJvbGxlcjp4byxSYWRhckNvbnRyb2xsZXI6Ym8sU2NhdHRlckNvbnRyb2xsZXI6X299KTtmdW5jdGlvbiB2byh0LGUsaSl7Y29uc3R7c3RhcnRBbmdsZTpuLHBpeGVsTWFyZ2luOm8seDpzLHk6YSxvdXRlclJhZGl1czpyLGlubmVyUmFkaXVzOmx9PWU7bGV0IGM9by9yO3QuYmVnaW5QYXRoKCksdC5hcmMocyxhLHIsbi1jLGkrYyksbD5vPyhjPW8vbCx0LmFyYyhzLGEsbCxpK2Msbi1jLCEwKSk6dC5hcmMocyxhLG8saStNdCxuLU10KSx0LmNsb3NlUGF0aCgpLHQuY2xpcCgpfWZ1bmN0aW9uIHdvKHQsZSxpLG4pe2NvbnN0IG89RWUodC5vcHRpb25zLmJvcmRlclJhZGl1cyxbXCJvdXRlclN0YXJ0XCIsXCJvdXRlckVuZFwiLFwiaW5uZXJTdGFydFwiLFwiaW5uZXJFbmRcIl0pO2NvbnN0IHM9KGktZSkvMixhPU1hdGgubWluKHMsbiplLzIpLHI9dD0+e2NvbnN0IGU9KGktTWF0aC5taW4ocyx0KSkqbi8yO3JldHVybiBIdCh0LDAsTWF0aC5taW4ocyxlKSl9O3JldHVybntvdXRlclN0YXJ0OnIoby5vdXRlclN0YXJ0KSxvdXRlckVuZDpyKG8ub3V0ZXJFbmQpLGlubmVyU3RhcnQ6SHQoby5pbm5lclN0YXJ0LDAsYSksaW5uZXJFbmQ6SHQoby5pbm5lckVuZCwwLGEpfX1mdW5jdGlvbiBNbyh0LGUsaSxuKXtyZXR1cm57eDppK3QqTWF0aC5jb3MoZSkseTpuK3QqTWF0aC5zaW4oZSl9fWZ1bmN0aW9uIGtvKHQsZSxpLG4sbyl7Y29uc3R7eDpzLHk6YSxzdGFydEFuZ2xlOnIscGl4ZWxNYXJnaW46bCxpbm5lclJhZGl1czpjfT1lLGg9TWF0aC5tYXgoZS5vdXRlclJhZGl1cytuK2ktbCwwKSxkPWM+MD9jK24raStsOjA7bGV0IHU9MDtjb25zdCBmPW8tcjtpZihuKXtjb25zdCB0PSgoYz4wP2MtbjowKSsoaD4wP2gtbjowKSkvMjt1PShmLSgwIT09dD9mKnQvKHQrbik6ZikpLzJ9Y29uc3QgZz0oZi1NYXRoLm1heCguMDAxLGYqaC1pL2J0KS9oKS8yLHA9citnK3UsbT1vLWctdSx7b3V0ZXJTdGFydDp4LG91dGVyRW5kOmIsaW5uZXJTdGFydDpfLGlubmVyRW5kOnl9PXdvKGUsZCxoLG0tcCksdj1oLXgsdz1oLWIsTT1wK3gvdixrPW0tYi93LFM9ZCtfLFA9ZCt5LEQ9cCtfL1MsQz1tLXkvUDtpZih0LmJlZ2luUGF0aCgpLHQuYXJjKHMsYSxoLE0sayksYj4wKXtjb25zdCBlPU1vKHcsayxzLGEpO3QuYXJjKGUueCxlLnksYixrLG0rTXQpfWNvbnN0IE89TW8oUCxtLHMsYSk7aWYodC5saW5lVG8oTy54LE8ueSkseT4wKXtjb25zdCBlPU1vKFAsQyxzLGEpO3QuYXJjKGUueCxlLnkseSxtK010LEMrTWF0aC5QSSl9aWYodC5hcmMocyxhLGQsbS15L2QscCtfL2QsITApLF8+MCl7Y29uc3QgZT1NbyhTLEQscyxhKTt0LmFyYyhlLngsZS55LF8sRCtNYXRoLlBJLHAtTXQpfWNvbnN0IFQ9TW8odixwLHMsYSk7aWYodC5saW5lVG8oVC54LFQueSkseD4wKXtjb25zdCBlPU1vKHYsTSxzLGEpO3QuYXJjKGUueCxlLnkseCxwLU10LE0pfXQuY2xvc2VQYXRoKCl9ZnVuY3Rpb24gU28odCxlLGksbixvKXtjb25zdHtvcHRpb25zOnN9PWUsYT1cImlubmVyXCI9PT1zLmJvcmRlckFsaWduO3MuYm9yZGVyV2lkdGgmJihhPyh0LmxpbmVXaWR0aD0yKnMuYm9yZGVyV2lkdGgsdC5saW5lSm9pbj1cInJvdW5kXCIpOih0LmxpbmVXaWR0aD1zLmJvcmRlcldpZHRoLHQubGluZUpvaW49XCJiZXZlbFwiKSxlLmZ1bGxDaXJjbGVzJiZmdW5jdGlvbih0LGUsaSl7Y29uc3R7eDpuLHk6byxzdGFydEFuZ2xlOnMscGl4ZWxNYXJnaW46YSxmdWxsQ2lyY2xlczpyfT1lLGw9TWF0aC5tYXgoZS5vdXRlclJhZGl1cy1hLDApLGM9ZS5pbm5lclJhZGl1cythO2xldCBoO2ZvcihpJiZ2byh0LGUscytfdCksdC5iZWdpblBhdGgoKSx0LmFyYyhuLG8sYyxzK190LHMsITApLGg9MDtoPHI7KytoKXQuc3Ryb2tlKCk7Zm9yKHQuYmVnaW5QYXRoKCksdC5hcmMobixvLGwscyxzK190KSxoPTA7aDxyOysraCl0LnN0cm9rZSgpfSh0LGUsYSksYSYmdm8odCxlLG8pLGtvKHQsZSxpLG4sbyksdC5zdHJva2UoKSl9Y2xhc3MgUG8gZXh0ZW5kcyB6aXtjb25zdHJ1Y3Rvcih0KXtzdXBlcigpLHRoaXMub3B0aW9ucz12b2lkIDAsdGhpcy5jaXJjdW1mZXJlbmNlPXZvaWQgMCx0aGlzLnN0YXJ0QW5nbGU9dm9pZCAwLHRoaXMuZW5kQW5nbGU9dm9pZCAwLHRoaXMuaW5uZXJSYWRpdXM9dm9pZCAwLHRoaXMub3V0ZXJSYWRpdXM9dm9pZCAwLHRoaXMucGl4ZWxNYXJnaW49MCx0aGlzLmZ1bGxDaXJjbGVzPTAsdCYmT2JqZWN0LmFzc2lnbih0aGlzLHQpfWluUmFuZ2UodCxlLGkpe2NvbnN0IG49dGhpcy5nZXRQcm9wcyhbXCJ4XCIsXCJ5XCJdLGkpLHthbmdsZTpvLGRpc3RhbmNlOnN9PUZ0KG4se3g6dCx5OmV9KSx7c3RhcnRBbmdsZTphLGVuZEFuZ2xlOnIsaW5uZXJSYWRpdXM6bCxvdXRlclJhZGl1czpjLGNpcmN1bWZlcmVuY2U6aH09dGhpcy5nZXRQcm9wcyhbXCJzdGFydEFuZ2xlXCIsXCJlbmRBbmdsZVwiLFwiaW5uZXJSYWRpdXNcIixcIm91dGVyUmFkaXVzXCIsXCJjaXJjdW1mZXJlbmNlXCJdLGkpLGQ9dGhpcy5vcHRpb25zLnNwYWNpbmcvMjtyZXR1cm4oaD49X3R8fE50KG8sYSxyKSkmJihzPj1sK2QmJnM8PWMrZCl9Z2V0Q2VudGVyUG9pbnQodCl7Y29uc3R7eDplLHk6aSxzdGFydEFuZ2xlOm4sZW5kQW5nbGU6byxpbm5lclJhZGl1czpzLG91dGVyUmFkaXVzOmF9PXRoaXMuZ2V0UHJvcHMoW1wieFwiLFwieVwiLFwic3RhcnRBbmdsZVwiLFwiZW5kQW5nbGVcIixcImlubmVyUmFkaXVzXCIsXCJvdXRlclJhZGl1c1wiLFwiY2lyY3VtZmVyZW5jZVwiXSx0KSx7b2Zmc2V0OnIsc3BhY2luZzpsfT10aGlzLm9wdGlvbnMsYz0obitvKS8yLGg9KHMrYStsK3IpLzI7cmV0dXJue3g6ZStNYXRoLmNvcyhjKSpoLHk6aStNYXRoLnNpbihjKSpofX10b29sdGlwUG9zaXRpb24odCl7cmV0dXJuIHRoaXMuZ2V0Q2VudGVyUG9pbnQodCl9ZHJhdyh0KXtjb25zdCBlPXRoaXMse29wdGlvbnM6aSxjaXJjdW1mZXJlbmNlOm59PWUsbz0oaS5vZmZzZXR8fDApLzIscz0oaS5zcGFjaW5nfHwwKS8yO2lmKGUucGl4ZWxNYXJnaW49XCJpbm5lclwiPT09aS5ib3JkZXJBbGlnbj8uMzM6MCxlLmZ1bGxDaXJjbGVzPW4+X3Q/TWF0aC5mbG9vcihuL190KTowLDA9PT1ufHxlLmlubmVyUmFkaXVzPDB8fGUub3V0ZXJSYWRpdXM8MClyZXR1cm47dC5zYXZlKCk7bGV0IGE9MDtpZihvKXthPW8vMjtjb25zdCBpPShlLnN0YXJ0QW5nbGUrZS5lbmRBbmdsZSkvMjt0LnRyYW5zbGF0ZShNYXRoLmNvcyhpKSphLE1hdGguc2luKGkpKmEpLGUuY2lyY3VtZmVyZW5jZT49YnQmJihhPW8pfXQuZmlsbFN0eWxlPWkuYmFja2dyb3VuZENvbG9yLHQuc3Ryb2tlU3R5bGU9aS5ib3JkZXJDb2xvcjtjb25zdCByPWZ1bmN0aW9uKHQsZSxpLG4pe2NvbnN0e2Z1bGxDaXJjbGVzOm8sc3RhcnRBbmdsZTpzLGNpcmN1bWZlcmVuY2U6YX09ZTtsZXQgcj1lLmVuZEFuZ2xlO2lmKG8pe2tvKHQsZSxpLG4scytfdCk7Zm9yKGxldCBlPTA7ZTxvOysrZSl0LmZpbGwoKTtpc05hTihhKXx8KHI9cythJV90LGElX3Q9PTAmJihyKz1fdCkpfXJldHVybiBrbyh0LGUsaSxuLHIpLHQuZmlsbCgpLHJ9KHQsZSxhLHMpO1NvKHQsZSxhLHMsciksdC5yZXN0b3JlKCl9fWZ1bmN0aW9uIERvKHQsZSxpPWUpe3QubGluZUNhcD1LKGkuYm9yZGVyQ2FwU3R5bGUsZS5ib3JkZXJDYXBTdHlsZSksdC5zZXRMaW5lRGFzaChLKGkuYm9yZGVyRGFzaCxlLmJvcmRlckRhc2gpKSx0LmxpbmVEYXNoT2Zmc2V0PUsoaS5ib3JkZXJEYXNoT2Zmc2V0LGUuYm9yZGVyRGFzaE9mZnNldCksdC5saW5lSm9pbj1LKGkuYm9yZGVySm9pblN0eWxlLGUuYm9yZGVySm9pblN0eWxlKSx0LmxpbmVXaWR0aD1LKGkuYm9yZGVyV2lkdGgsZS5ib3JkZXJXaWR0aCksdC5zdHJva2VTdHlsZT1LKGkuYm9yZGVyQ29sb3IsZS5ib3JkZXJDb2xvcil9ZnVuY3Rpb24gQ28odCxlLGkpe3QubGluZVRvKGkueCxpLnkpfWZ1bmN0aW9uIE9vKHQsZSxpPXt9KXtjb25zdCBuPXQubGVuZ3RoLHtzdGFydDpvPTAsZW5kOnM9bi0xfT1pLHtzdGFydDphLGVuZDpyfT1lLGw9TWF0aC5tYXgobyxhKSxjPU1hdGgubWluKHMsciksaD1vPGEmJnM8YXx8bz5yJiZzPnI7cmV0dXJue2NvdW50Om4sc3RhcnQ6bCxsb29wOmUubG9vcCxpbGVuOmM8bCYmIWg/bitjLWw6Yy1sfX1mdW5jdGlvbiBUbyh0LGUsaSxuKXtjb25zdHtwb2ludHM6byxvcHRpb25zOnN9PWUse2NvdW50OmEsc3RhcnQ6cixsb29wOmwsaWxlbjpjfT1PbyhvLGksbiksaD1mdW5jdGlvbih0KXtyZXR1cm4gdC5zdGVwcGVkP0p0OnQudGVuc2lvbnx8XCJtb25vdG9uZVwiPT09dC5jdWJpY0ludGVycG9sYXRpb25Nb2RlP3RlOkNvfShzKTtsZXQgZCx1LGYse21vdmU6Zz0hMCxyZXZlcnNlOnB9PW58fHt9O2ZvcihkPTA7ZDw9YzsrK2QpdT1vWyhyKyhwP2MtZDpkKSklYV0sdS5za2lwfHwoZz8odC5tb3ZlVG8odS54LHUueSksZz0hMSk6aCh0LGYsdSxwLHMuc3RlcHBlZCksZj11KTtyZXR1cm4gbCYmKHU9b1socisocD9jOjApKSVhXSxoKHQsZix1LHAscy5zdGVwcGVkKSksISFsfWZ1bmN0aW9uIEFvKHQsZSxpLG4pe2NvbnN0IG89ZS5wb2ludHMse2NvdW50OnMsc3RhcnQ6YSxpbGVuOnJ9PU9vKG8saSxuKSx7bW92ZTpsPSEwLHJldmVyc2U6Y309bnx8e307bGV0IGgsZCx1LGYsZyxwLG09MCx4PTA7Y29uc3QgYj10PT4oYSsoYz9yLXQ6dCkpJXMsXz0oKT0+e2YhPT1nJiYodC5saW5lVG8obSxnKSx0LmxpbmVUbyhtLGYpLHQubGluZVRvKG0scCkpfTtmb3IobCYmKGQ9b1tiKDApXSx0Lm1vdmVUbyhkLngsZC55KSksaD0wO2g8PXI7KytoKXtpZihkPW9bYihoKV0sZC5za2lwKWNvbnRpbnVlO2NvbnN0IGU9ZC54LGk9ZC55LG49MHxlO249PT11PyhpPGY/Zj1pOmk+ZyYmKGc9aSksbT0oeCptK2UpLysreCk6KF8oKSx0LmxpbmVUbyhlLGkpLHU9bix4PTAsZj1nPWkpLHA9aX1fKCl9ZnVuY3Rpb24gTG8odCl7Y29uc3QgZT10Lm9wdGlvbnMsaT1lLmJvcmRlckRhc2gmJmUuYm9yZGVyRGFzaC5sZW5ndGg7cmV0dXJuISh0Ll9kZWNpbWF0ZWR8fHQuX2xvb3B8fGUudGVuc2lvbnx8XCJtb25vdG9uZVwiPT09ZS5jdWJpY0ludGVycG9sYXRpb25Nb2RlfHxlLnN0ZXBwZWR8fGkpP0FvOlRvfVBvLmlkPVwiYXJjXCIsUG8uZGVmYXVsdHM9e2JvcmRlckFsaWduOlwiY2VudGVyXCIsYm9yZGVyQ29sb3I6XCIjZmZmXCIsYm9yZGVyUmFkaXVzOjAsYm9yZGVyV2lkdGg6MixvZmZzZXQ6MCxzcGFjaW5nOjAsYW5nbGU6dm9pZCAwfSxQby5kZWZhdWx0Um91dGVzPXtiYWNrZ3JvdW5kQ29sb3I6XCJiYWNrZ3JvdW5kQ29sb3JcIn07Y29uc3QgUm89XCJmdW5jdGlvblwiPT10eXBlb2YgUGF0aDJEO2Z1bmN0aW9uIEVvKHQsZSxpLG4pe1JvJiYxPT09ZS5zZWdtZW50cy5sZW5ndGg/ZnVuY3Rpb24odCxlLGksbil7bGV0IG89ZS5fcGF0aDtvfHwobz1lLl9wYXRoPW5ldyBQYXRoMkQsZS5wYXRoKG8saSxuKSYmby5jbG9zZVBhdGgoKSksRG8odCxlLm9wdGlvbnMpLHQuc3Ryb2tlKG8pfSh0LGUsaSxuKTpmdW5jdGlvbih0LGUsaSxuKXtjb25zdHtzZWdtZW50czpvLG9wdGlvbnM6c309ZSxhPUxvKGUpO2Zvcihjb25zdCByIG9mIG8pRG8odCxzLHIuc3R5bGUpLHQuYmVnaW5QYXRoKCksYSh0LGUscix7c3RhcnQ6aSxlbmQ6aStuLTF9KSYmdC5jbG9zZVBhdGgoKSx0LnN0cm9rZSgpfSh0LGUsaSxuKX1jbGFzcyB6byBleHRlbmRzIHppe2NvbnN0cnVjdG9yKHQpe3N1cGVyKCksdGhpcy5hbmltYXRlZD0hMCx0aGlzLm9wdGlvbnM9dm9pZCAwLHRoaXMuX2xvb3A9dm9pZCAwLHRoaXMuX2Z1bGxMb29wPXZvaWQgMCx0aGlzLl9wYXRoPXZvaWQgMCx0aGlzLl9wb2ludHM9dm9pZCAwLHRoaXMuX3NlZ21lbnRzPXZvaWQgMCx0aGlzLl9kZWNpbWF0ZWQ9ITEsdGhpcy5fcG9pbnRzVXBkYXRlZD0hMSx0JiZPYmplY3QuYXNzaWduKHRoaXMsdCl9dXBkYXRlQ29udHJvbFBvaW50cyh0LGUpe2NvbnN0IGk9dGhpcyxuPWkub3B0aW9ucztpZigobi50ZW5zaW9ufHxcIm1vbm90b25lXCI9PT1uLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUpJiYhbi5zdGVwcGVkJiYhaS5fcG9pbnRzVXBkYXRlZCl7Y29uc3Qgbz1uLnNwYW5HYXBzP2kuX2xvb3A6aS5fZnVsbExvb3A7cG4oaS5fcG9pbnRzLG4sdCxvLGUpLGkuX3BvaW50c1VwZGF0ZWQ9ITB9fXNldCBwb2ludHModCl7Y29uc3QgZT10aGlzO2UuX3BvaW50cz10LGRlbGV0ZSBlLl9zZWdtZW50cyxkZWxldGUgZS5fcGF0aCxlLl9wb2ludHNVcGRhdGVkPSExfWdldCBwb2ludHMoKXtyZXR1cm4gdGhpcy5fcG9pbnRzfWdldCBzZWdtZW50cygpe3JldHVybiB0aGlzLl9zZWdtZW50c3x8KHRoaXMuX3NlZ21lbnRzPVBuKHRoaXMsdGhpcy5vcHRpb25zLnNlZ21lbnQpKX1maXJzdCgpe2NvbnN0IHQ9dGhpcy5zZWdtZW50cyxlPXRoaXMucG9pbnRzO3JldHVybiB0Lmxlbmd0aCYmZVt0WzBdLnN0YXJ0XX1sYXN0KCl7Y29uc3QgdD10aGlzLnNlZ21lbnRzLGU9dGhpcy5wb2ludHMsaT10Lmxlbmd0aDtyZXR1cm4gaSYmZVt0W2ktMV0uZW5kXX1pbnRlcnBvbGF0ZSh0LGUpe2NvbnN0IGk9dGhpcyxuPWkub3B0aW9ucyxvPXRbZV0scz1pLnBvaW50cyxhPVNuKGkse3Byb3BlcnR5OmUsc3RhcnQ6byxlbmQ6b30pO2lmKCFhLmxlbmd0aClyZXR1cm47Y29uc3Qgcj1bXSxsPWZ1bmN0aW9uKHQpe3JldHVybiB0LnN0ZXBwZWQ/eG46dC50ZW5zaW9ufHxcIm1vbm90b25lXCI9PT10LmN1YmljSW50ZXJwb2xhdGlvbk1vZGU/Ym46bW59KG4pO2xldCBjLGg7Zm9yKGM9MCxoPWEubGVuZ3RoO2M8aDsrK2Mpe2NvbnN0e3N0YXJ0OmksZW5kOmh9PWFbY10sZD1zW2ldLHU9c1toXTtpZihkPT09dSl7ci5wdXNoKGQpO2NvbnRpbnVlfWNvbnN0IGY9bChkLHUsTWF0aC5hYnMoKG8tZFtlXSkvKHVbZV0tZFtlXSkpLG4uc3RlcHBlZCk7ZltlXT10W2VdLHIucHVzaChmKX1yZXR1cm4gMT09PXIubGVuZ3RoP3JbMF06cn1wYXRoU2VnbWVudCh0LGUsaSl7cmV0dXJuIExvKHRoaXMpKHQsdGhpcyxlLGkpfXBhdGgodCxlLGkpe2NvbnN0IG49dGhpcyxvPW4uc2VnbWVudHMscz1MbyhuKTtsZXQgYT1uLl9sb29wO2U9ZXx8MCxpPWl8fG4ucG9pbnRzLmxlbmd0aC1lO2Zvcihjb25zdCByIG9mIG8pYSY9cyh0LG4scix7c3RhcnQ6ZSxlbmQ6ZStpLTF9KTtyZXR1cm4hIWF9ZHJhdyh0LGUsaSxuKXtjb25zdCBvPXRoaXMscz1vLm9wdGlvbnN8fHt9OyhvLnBvaW50c3x8W10pLmxlbmd0aCYmcy5ib3JkZXJXaWR0aCYmKHQuc2F2ZSgpLEVvKHQsbyxpLG4pLHQucmVzdG9yZSgpLG8uYW5pbWF0ZWQmJihvLl9wb2ludHNVcGRhdGVkPSExLG8uX3BhdGg9dm9pZCAwKSl9fWZ1bmN0aW9uIElvKHQsZSxpLG4pe2NvbnN0IG89dC5vcHRpb25zLHtbaV06c309dC5nZXRQcm9wcyhbaV0sbik7cmV0dXJuIE1hdGguYWJzKGUtcyk8by5yYWRpdXMrby5oaXRSYWRpdXN9em8uaWQ9XCJsaW5lXCIsem8uZGVmYXVsdHM9e2JvcmRlckNhcFN0eWxlOlwiYnV0dFwiLGJvcmRlckRhc2g6W10sYm9yZGVyRGFzaE9mZnNldDowLGJvcmRlckpvaW5TdHlsZTpcIm1pdGVyXCIsYm9yZGVyV2lkdGg6MyxjYXBCZXppZXJQb2ludHM6ITAsY3ViaWNJbnRlcnBvbGF0aW9uTW9kZTpcImRlZmF1bHRcIixmaWxsOiExLHNwYW5HYXBzOiExLHN0ZXBwZWQ6ITEsdGVuc2lvbjowfSx6by5kZWZhdWx0Um91dGVzPXtiYWNrZ3JvdW5kQ29sb3I6XCJiYWNrZ3JvdW5kQ29sb3JcIixib3JkZXJDb2xvcjpcImJvcmRlckNvbG9yXCJ9LHpvLmRlc2NyaXB0b3JzPXtfc2NyaXB0YWJsZTohMCxfaW5kZXhhYmxlOnQ9PlwiYm9yZGVyRGFzaFwiIT09dCYmXCJmaWxsXCIhPT10fTtjbGFzcyBGbyBleHRlbmRzIHppe2NvbnN0cnVjdG9yKHQpe3N1cGVyKCksdGhpcy5vcHRpb25zPXZvaWQgMCx0aGlzLnBhcnNlZD12b2lkIDAsdGhpcy5za2lwPXZvaWQgMCx0aGlzLnN0b3A9dm9pZCAwLHQmJk9iamVjdC5hc3NpZ24odGhpcyx0KX1pblJhbmdlKHQsZSxpKXtjb25zdCBuPXRoaXMub3B0aW9ucyx7eDpvLHk6c309dGhpcy5nZXRQcm9wcyhbXCJ4XCIsXCJ5XCJdLGkpO3JldHVybiBNYXRoLnBvdyh0LW8sMikrTWF0aC5wb3coZS1zLDIpPE1hdGgucG93KG4uaGl0UmFkaXVzK24ucmFkaXVzLDIpfWluWFJhbmdlKHQsZSl7cmV0dXJuIElvKHRoaXMsdCxcInhcIixlKX1pbllSYW5nZSh0LGUpe3JldHVybiBJbyh0aGlzLHQsXCJ5XCIsZSl9Z2V0Q2VudGVyUG9pbnQodCl7Y29uc3R7eDplLHk6aX09dGhpcy5nZXRQcm9wcyhbXCJ4XCIsXCJ5XCJdLHQpO3JldHVybnt4OmUseTppfX1zaXplKHQpe2xldCBlPSh0PXR8fHRoaXMub3B0aW9uc3x8e30pLnJhZGl1c3x8MDtlPU1hdGgubWF4KGUsZSYmdC5ob3ZlclJhZGl1c3x8MCk7cmV0dXJuIDIqKGUrKGUmJnQuYm9yZGVyV2lkdGh8fDApKX1kcmF3KHQpe2NvbnN0IGU9dGhpcyxpPWUub3B0aW9ucztlLnNraXB8fGkucmFkaXVzPC4xfHwodC5zdHJva2VTdHlsZT1pLmJvcmRlckNvbG9yLHQubGluZVdpZHRoPWkuYm9yZGVyV2lkdGgsdC5maWxsU3R5bGU9aS5iYWNrZ3JvdW5kQ29sb3IsS3QodCxpLGUueCxlLnkpKX1nZXRSYW5nZSgpe2NvbnN0IHQ9dGhpcy5vcHRpb25zfHx7fTtyZXR1cm4gdC5yYWRpdXMrdC5oaXRSYWRpdXN9fWZ1bmN0aW9uIEJvKHQsZSl7Y29uc3R7eDppLHk6bixiYXNlOm8sd2lkdGg6cyxoZWlnaHQ6YX09dC5nZXRQcm9wcyhbXCJ4XCIsXCJ5XCIsXCJiYXNlXCIsXCJ3aWR0aFwiLFwiaGVpZ2h0XCJdLGUpO2xldCByLGwsYyxoLGQ7cmV0dXJuIHQuaG9yaXpvbnRhbD8oZD1hLzIscj1NYXRoLm1pbihpLG8pLGw9TWF0aC5tYXgoaSxvKSxjPW4tZCxoPW4rZCk6KGQ9cy8yLHI9aS1kLGw9aStkLGM9TWF0aC5taW4obixvKSxoPU1hdGgubWF4KG4sbykpLHtsZWZ0OnIsdG9wOmMscmlnaHQ6bCxib3R0b206aH19ZnVuY3Rpb24gVm8odCl7bGV0IGU9dC5vcHRpb25zLmJvcmRlclNraXBwZWQ7Y29uc3QgaT17fTtyZXR1cm4gZT8oZT10Lmhvcml6b250YWw/V28oZSxcImxlZnRcIixcInJpZ2h0XCIsdC5iYXNlPnQueCk6V28oZSxcImJvdHRvbVwiLFwidG9wXCIsdC5iYXNlPHQueSksaVtlXT0hMCxpKTppfWZ1bmN0aW9uIFdvKHQsZSxpLG4pe3ZhciBvLHMsYTtyZXR1cm4gbj8oYT1pLHQ9Tm8odD0obz10KT09PShzPWUpP2E6bz09PWE/czpvLGksZSkpOnQ9Tm8odCxlLGkpLHR9ZnVuY3Rpb24gTm8odCxlLGkpe3JldHVyblwic3RhcnRcIj09PXQ/ZTpcImVuZFwiPT09dD9pOnR9ZnVuY3Rpb24gSG8odCxlLGksbil7cmV0dXJuIHQ/MDpNYXRoLm1heChNYXRoLm1pbihlLG4pLGkpfWZ1bmN0aW9uIGpvKHQpe2NvbnN0IGU9Qm8odCksaT1lLnJpZ2h0LWUubGVmdCxuPWUuYm90dG9tLWUudG9wLG89ZnVuY3Rpb24odCxlLGkpe2NvbnN0IG49dC5vcHRpb25zLmJvcmRlcldpZHRoLG89Vm8odCkscz16ZShuKTtyZXR1cm57dDpIbyhvLnRvcCxzLnRvcCwwLGkpLHI6SG8oby5yaWdodCxzLnJpZ2h0LDAsZSksYjpIbyhvLmJvdHRvbSxzLmJvdHRvbSwwLGkpLGw6SG8oby5sZWZ0LHMubGVmdCwwLGUpfX0odCxpLzIsbi8yKSxzPWZ1bmN0aW9uKHQsZSxpKXtjb25zdHtlbmFibGVCb3JkZXJSYWRpdXM6bn09dC5nZXRQcm9wcyhbXCJlbmFibGVCb3JkZXJSYWRpdXNcIl0pLG89dC5vcHRpb25zLmJvcmRlclJhZGl1cyxzPUllKG8pLGE9TWF0aC5taW4oZSxpKSxyPVZvKHQpLGw9bnx8VShvKTtyZXR1cm57dG9wTGVmdDpIbyghbHx8ci50b3B8fHIubGVmdCxzLnRvcExlZnQsMCxhKSx0b3BSaWdodDpIbyghbHx8ci50b3B8fHIucmlnaHQscy50b3BSaWdodCwwLGEpLGJvdHRvbUxlZnQ6SG8oIWx8fHIuYm90dG9tfHxyLmxlZnQscy5ib3R0b21MZWZ0LDAsYSksYm90dG9tUmlnaHQ6SG8oIWx8fHIuYm90dG9tfHxyLnJpZ2h0LHMuYm90dG9tUmlnaHQsMCxhKX19KHQsaS8yLG4vMik7cmV0dXJue291dGVyOnt4OmUubGVmdCx5OmUudG9wLHc6aSxoOm4scmFkaXVzOnN9LGlubmVyOnt4OmUubGVmdCtvLmwseTplLnRvcCtvLnQsdzppLW8ubC1vLnIsaDpuLW8udC1vLmIscmFkaXVzOnt0b3BMZWZ0Ok1hdGgubWF4KDAscy50b3BMZWZ0LU1hdGgubWF4KG8udCxvLmwpKSx0b3BSaWdodDpNYXRoLm1heCgwLHMudG9wUmlnaHQtTWF0aC5tYXgoby50LG8ucikpLGJvdHRvbUxlZnQ6TWF0aC5tYXgoMCxzLmJvdHRvbUxlZnQtTWF0aC5tYXgoby5iLG8ubCkpLGJvdHRvbVJpZ2h0Ok1hdGgubWF4KDAscy5ib3R0b21SaWdodC1NYXRoLm1heChvLmIsby5yKSl9fX19ZnVuY3Rpb24gJG8odCxlLGksbil7Y29uc3Qgbz1udWxsPT09ZSxzPW51bGw9PT1pLGE9dCYmIShvJiZzKSYmQm8odCxuKTtyZXR1cm4gYSYmKG98fGU+PWEubGVmdCYmZTw9YS5yaWdodCkmJihzfHxpPj1hLnRvcCYmaTw9YS5ib3R0b20pfWZ1bmN0aW9uIFlvKHQsZSl7dC5yZWN0KGUueCxlLnksZS53LGUuaCl9Rm8uaWQ9XCJwb2ludFwiLEZvLmRlZmF1bHRzPXtib3JkZXJXaWR0aDoxLGhpdFJhZGl1czoxLGhvdmVyQm9yZGVyV2lkdGg6MSxob3ZlclJhZGl1czo0LHBvaW50U3R5bGU6XCJjaXJjbGVcIixyYWRpdXM6Myxyb3RhdGlvbjowfSxGby5kZWZhdWx0Um91dGVzPXtiYWNrZ3JvdW5kQ29sb3I6XCJiYWNrZ3JvdW5kQ29sb3JcIixib3JkZXJDb2xvcjpcImJvcmRlckNvbG9yXCJ9O2NsYXNzIFVvIGV4dGVuZHMgeml7Y29uc3RydWN0b3IodCl7c3VwZXIoKSx0aGlzLm9wdGlvbnM9dm9pZCAwLHRoaXMuaG9yaXpvbnRhbD12b2lkIDAsdGhpcy5iYXNlPXZvaWQgMCx0aGlzLndpZHRoPXZvaWQgMCx0aGlzLmhlaWdodD12b2lkIDAsdCYmT2JqZWN0LmFzc2lnbih0aGlzLHQpfWRyYXcodCl7Y29uc3QgZT10aGlzLm9wdGlvbnMse2lubmVyOmksb3V0ZXI6bn09am8odGhpcyksbz0ocz1uLnJhZGl1cykudG9wTGVmdHx8cy50b3BSaWdodHx8cy5ib3R0b21MZWZ0fHxzLmJvdHRvbVJpZ2h0P25lOllvO3ZhciBzO3Quc2F2ZSgpLG4udz09PWkudyYmbi5oPT09aS5ofHwodC5iZWdpblBhdGgoKSxvKHQsbiksdC5jbGlwKCksbyh0LGkpLHQuZmlsbFN0eWxlPWUuYm9yZGVyQ29sb3IsdC5maWxsKFwiZXZlbm9kZFwiKSksdC5iZWdpblBhdGgoKSxvKHQsaSksdC5maWxsU3R5bGU9ZS5iYWNrZ3JvdW5kQ29sb3IsdC5maWxsKCksdC5yZXN0b3JlKCl9aW5SYW5nZSh0LGUsaSl7cmV0dXJuICRvKHRoaXMsdCxlLGkpfWluWFJhbmdlKHQsZSl7cmV0dXJuICRvKHRoaXMsdCxudWxsLGUpfWluWVJhbmdlKHQsZSl7cmV0dXJuICRvKHRoaXMsbnVsbCx0LGUpfWdldENlbnRlclBvaW50KHQpe2NvbnN0e3g6ZSx5OmksYmFzZTpuLGhvcml6b250YWw6b309dGhpcy5nZXRQcm9wcyhbXCJ4XCIsXCJ5XCIsXCJiYXNlXCIsXCJob3Jpem9udGFsXCJdLHQpO3JldHVybnt4Om8/KGUrbikvMjplLHk6bz9pOihpK24pLzJ9fWdldFJhbmdlKHQpe3JldHVyblwieFwiPT09dD90aGlzLndpZHRoLzI6dGhpcy5oZWlnaHQvMn19VW8uaWQ9XCJiYXJcIixVby5kZWZhdWx0cz17Ym9yZGVyU2tpcHBlZDpcInN0YXJ0XCIsYm9yZGVyV2lkdGg6MCxib3JkZXJSYWRpdXM6MCxlbmFibGVCb3JkZXJSYWRpdXM6ITAscG9pbnRTdHlsZTp2b2lkIDB9LFVvLmRlZmF1bHRSb3V0ZXM9e2JhY2tncm91bmRDb2xvcjpcImJhY2tncm91bmRDb2xvclwiLGJvcmRlckNvbG9yOlwiYm9yZGVyQ29sb3JcIn07dmFyIFhvPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLEFyY0VsZW1lbnQ6UG8sTGluZUVsZW1lbnQ6em8sUG9pbnRFbGVtZW50OkZvLEJhckVsZW1lbnQ6VW99KTtmdW5jdGlvbiBxbyh0KXtpZih0Ll9kZWNpbWF0ZWQpe2NvbnN0IGU9dC5fZGF0YTtkZWxldGUgdC5fZGVjaW1hdGVkLGRlbGV0ZSB0Ll9kYXRhLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiZGF0YVwiLHt2YWx1ZTplfSl9fWZ1bmN0aW9uIEtvKHQpe3QuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKCh0PT57cW8odCl9KSl9dmFyIEdvPXtpZDpcImRlY2ltYXRpb25cIixkZWZhdWx0czp7YWxnb3JpdGhtOlwibWluLW1heFwiLGVuYWJsZWQ6ITF9LGJlZm9yZUVsZW1lbnRzVXBkYXRlOih0LGUsaSk9PntpZighaS5lbmFibGVkKXJldHVybiB2b2lkIEtvKHQpO2NvbnN0IG49dC53aWR0aDt0LmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoKGUsbyk9Pntjb25zdHtfZGF0YTpzLGluZGV4QXhpczphfT1lLHI9dC5nZXREYXRhc2V0TWV0YShvKSxsPXN8fGUuZGF0YTtpZihcInlcIj09PVZlKFthLHQub3B0aW9ucy5pbmRleEF4aXNdKSlyZXR1cm47aWYoXCJsaW5lXCIhPT1yLnR5cGUpcmV0dXJuO2NvbnN0IGM9dC5zY2FsZXNbci54QXhpc0lEXTtpZihcImxpbmVhclwiIT09Yy50eXBlJiZcInRpbWVcIiE9PWMudHlwZSlyZXR1cm47aWYodC5vcHRpb25zLnBhcnNpbmcpcmV0dXJuO2xldCBoLHtzdGFydDpkLGNvdW50OnV9PWZ1bmN0aW9uKHQsZSl7Y29uc3QgaT1lLmxlbmd0aDtsZXQgbixvPTA7Y29uc3R7aVNjYWxlOnN9PXQse21pbjphLG1heDpyLG1pbkRlZmluZWQ6bCxtYXhEZWZpbmVkOmN9PXMuZ2V0VXNlckJvdW5kcygpO3JldHVybiBsJiYobz1IdChzZShlLHMuYXhpcyxhKS5sbywwLGktMSkpLG49Yz9IdChzZShlLHMuYXhpcyxyKS5oaSsxLG8saSktbzppLW8se3N0YXJ0Om8sY291bnQ6bn19KHIsbCk7aWYodTw9NCpuKXFvKGUpO2Vsc2V7c3dpdGNoKCQocykmJihlLl9kYXRhPWwsZGVsZXRlIGUuZGF0YSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImRhdGFcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RlY2ltYXRlZH0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX2RhdGE9dH19KSksaS5hbGdvcml0aG0pe2Nhc2VcImx0dGJcIjpoPWZ1bmN0aW9uKHQsZSxpLG4sbyl7Y29uc3Qgcz1vLnNhbXBsZXN8fG47aWYocz49aSlyZXR1cm4gdC5zbGljZShlLGUraSk7Y29uc3QgYT1bXSxyPShpLTIpLyhzLTIpO2xldCBsPTA7Y29uc3QgYz1lK2ktMTtsZXQgaCxkLHUsZixnLHA9ZTtmb3IoYVtsKytdPXRbcF0saD0wO2g8cy0yO2grKyl7bGV0IG4sbz0wLHM9MDtjb25zdCBjPU1hdGguZmxvb3IoKGgrMSkqcikrMStlLG09TWF0aC5taW4oTWF0aC5mbG9vcigoaCsyKSpyKSsxLGkpK2UseD1tLWM7Zm9yKG49YztuPG07bisrKW8rPXRbbl0ueCxzKz10W25dLnk7by89eCxzLz14O2NvbnN0IGI9TWF0aC5mbG9vcihoKnIpKzErZSxfPU1hdGguZmxvb3IoKGgrMSkqcikrMStlLHt4OnkseTp2fT10W3BdO2Zvcih1PWY9LTEsbj1iO248XztuKyspZj0uNSpNYXRoLmFicygoeS1vKSoodFtuXS55LXYpLSh5LXRbbl0ueCkqKHMtdikpLGY+dSYmKHU9ZixkPXRbbl0sZz1uKTthW2wrK109ZCxwPWd9cmV0dXJuIGFbbCsrXT10W2NdLGF9KGwsZCx1LG4saSk7YnJlYWs7Y2FzZVwibWluLW1heFwiOmg9ZnVuY3Rpb24odCxlLGksbil7bGV0IG8scyxhLHIsbCxjLGgsZCx1LGYsZz0wLHA9MDtjb25zdCBtPVtdLHg9ZStpLTEsYj10W2VdLngsXz10W3hdLngtYjtmb3Iobz1lO288ZStpOysrbyl7cz10W29dLGE9KHMueC1iKS9fKm4scj1zLnk7Y29uc3QgZT0wfGE7aWYoZT09PWwpcjx1Pyh1PXIsYz1vKTpyPmYmJihmPXIsaD1vKSxnPShwKmcrcy54KS8rK3A7ZWxzZXtjb25zdCBpPW8tMTtpZighJChjKSYmISQoaCkpe2NvbnN0IGU9TWF0aC5taW4oYyxoKSxuPU1hdGgubWF4KGMsaCk7ZSE9PWQmJmUhPT1pJiZtLnB1c2goey4uLnRbZV0seDpnfSksbiE9PWQmJm4hPT1pJiZtLnB1c2goey4uLnRbbl0seDpnfSl9bz4wJiZpIT09ZCYmbS5wdXNoKHRbaV0pLG0ucHVzaChzKSxsPWUscD0wLHU9Zj1yLGM9aD1kPW99fXJldHVybiBtfShsLGQsdSxuKTticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZGVjaW1hdGlvbiBhbGdvcml0aG0gJyR7aS5hbGdvcml0aG19J2ApfWUuX2RlY2ltYXRlZD1ofX0pKX0sZGVzdHJveSh0KXtLbyh0KX19O2Z1bmN0aW9uIFpvKHQsZSxpKXtjb25zdCBuPWZ1bmN0aW9uKHQpe2NvbnN0IGU9dC5vcHRpb25zLGk9ZS5maWxsO2xldCBuPUsoaSYmaS50YXJnZXQsaSk7cmV0dXJuIHZvaWQgMD09PW4mJihuPSEhZS5iYWNrZ3JvdW5kQ29sb3IpLCExIT09biYmbnVsbCE9PW4mJighMD09PW4/XCJvcmlnaW5cIjpuKX0odCk7aWYoVShuKSlyZXR1cm4haXNOYU4obi52YWx1ZSkmJm47bGV0IG89cGFyc2VGbG9hdChuKTtyZXR1cm4gWChvKSYmTWF0aC5mbG9vcihvKT09PW8/KFwiLVwiIT09blswXSYmXCIrXCIhPT1uWzBdfHwobz1lK28pLCEobz09PWV8fG88MHx8bz49aSkmJm8pOltcIm9yaWdpblwiLFwic3RhcnRcIixcImVuZFwiLFwic3RhY2tcIl0uaW5kZXhPZihuKT49MCYmbn1jbGFzcyBRb3tjb25zdHJ1Y3Rvcih0KXt0aGlzLng9dC54LHRoaXMueT10LnksdGhpcy5yYWRpdXM9dC5yYWRpdXN9cGF0aFNlZ21lbnQodCxlLGkpe2NvbnN0e3g6bix5Om8scmFkaXVzOnN9PXRoaXM7cmV0dXJuIGU9ZXx8e3N0YXJ0OjAsZW5kOl90fSx0LmFyYyhuLG8scyxlLmVuZCxlLnN0YXJ0LCEwKSwhaS5ib3VuZHN9aW50ZXJwb2xhdGUodCl7Y29uc3R7eDplLHk6aSxyYWRpdXM6bn09dGhpcyxvPXQuYW5nbGU7cmV0dXJue3g6ZStNYXRoLmNvcyhvKSpuLHk6aStNYXRoLnNpbihvKSpuLGFuZ2xlOm99fX1mdW5jdGlvbiBKbyh0KXtyZXR1cm4odC5zY2FsZXx8e30pLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZT9mdW5jdGlvbih0KXtjb25zdHtzY2FsZTplLGZpbGw6aX09dCxuPWUub3B0aW9ucyxvPWUuZ2V0TGFiZWxzKCkubGVuZ3RoLHM9W10sYT1uLnJldmVyc2U/ZS5tYXg6ZS5taW4scj1uLnJldmVyc2U/ZS5taW46ZS5tYXg7bGV0IGwsYyxoO2lmKGg9XCJzdGFydFwiPT09aT9hOlwiZW5kXCI9PT1pP3I6VShpKT9pLnZhbHVlOmUuZ2V0QmFzZVZhbHVlKCksbi5ncmlkLmNpcmN1bGFyKXJldHVybiBjPWUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKDAsYSksbmV3IFFvKHt4OmMueCx5OmMueSxyYWRpdXM6ZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShoKX0pO2ZvcihsPTA7bDxvOysrbClzLnB1c2goZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUobCxoKSk7cmV0dXJuIHN9KHQpOmZ1bmN0aW9uKHQpe2NvbnN0e3NjYWxlOmU9e30sZmlsbDppfT10O2xldCBuLG89bnVsbDtyZXR1cm5cInN0YXJ0XCI9PT1pP289ZS5ib3R0b206XCJlbmRcIj09PWk/bz1lLnRvcDpVKGkpP289ZS5nZXRQaXhlbEZvclZhbHVlKGkudmFsdWUpOmUuZ2V0QmFzZVBpeGVsJiYobz1lLmdldEJhc2VQaXhlbCgpKSxYKG8pPyhuPWUuaXNIb3Jpem9udGFsKCkse3g6bj9vOm51bGwseTpuP251bGw6b30pOm51bGx9KHQpfWZ1bmN0aW9uIHRzKHQsZSxpKXtmb3IoO2U+dDtlLS0pe2NvbnN0IHQ9aVtlXTtpZighaXNOYU4odC54KSYmIWlzTmFOKHQueSkpYnJlYWt9cmV0dXJuIGV9ZnVuY3Rpb24gZXModCl7Y29uc3R7Y2hhcnQ6ZSxzY2FsZTppLGluZGV4Om4sbGluZTpvfT10LHM9W10sYT1vLnNlZ21lbnRzLHI9by5wb2ludHMsbD1mdW5jdGlvbih0LGUpe2NvbnN0IGk9W10sbj10LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtmb3IobGV0IHQ9MDt0PG4ubGVuZ3RoO3QrKyl7Y29uc3Qgbz1uW3RdO2lmKG8uaW5kZXg9PT1lKWJyZWFrO2lzKG8pJiZpLnVuc2hpZnQoby5kYXRhc2V0KX1yZXR1cm4gaX0oZSxuKTtsLnB1c2goc3Moe3g6bnVsbCx5OmkuYm90dG9tfSxvKSk7Zm9yKGxldCB0PTA7dDxhLmxlbmd0aDt0Kyspe2NvbnN0IGU9YVt0XTtmb3IobGV0IHQ9ZS5zdGFydDt0PD1lLmVuZDt0KyspbnMocyxyW3RdLGwpfXJldHVybiBuZXcgem8oe3BvaW50czpzLG9wdGlvbnM6e319KX1jb25zdCBpcz10PT5cImxpbmVcIj09PXQudHlwZSYmIXQuaGlkZGVuO2Z1bmN0aW9uIG5zKHQsZSxpKXtjb25zdCBuPVtdO2ZvcihsZXQgbz0wO288aS5sZW5ndGg7bysrKXtjb25zdCBzPWlbb10se2ZpcnN0OmEsbGFzdDpyLHBvaW50Omx9PW9zKHMsZSxcInhcIik7aWYoISghbHx8YSYmcikpaWYoYSluLnVuc2hpZnQobCk7ZWxzZSBpZih0LnB1c2gobCksIXIpYnJlYWt9dC5wdXNoKC4uLm4pfWZ1bmN0aW9uIG9zKHQsZSxpKXtjb25zdCBuPXQuaW50ZXJwb2xhdGUoZSxpKTtpZighbilyZXR1cm57fTtjb25zdCBvPW5baV0scz10LnNlZ21lbnRzLGE9dC5wb2ludHM7bGV0IHI9ITEsbD0hMTtmb3IobGV0IHQ9MDt0PHMubGVuZ3RoO3QrKyl7Y29uc3QgZT1zW3RdLG49YVtlLnN0YXJ0XVtpXSxjPWFbZS5lbmRdW2ldO2lmKG8+PW4mJm88PWMpe3I9bz09PW4sbD1vPT09YzticmVha319cmV0dXJue2ZpcnN0OnIsbGFzdDpsLHBvaW50Om59fWZ1bmN0aW9uIHNzKHQsZSl7bGV0IGk9W10sbj0hMTtyZXR1cm4gWSh0KT8obj0hMCxpPXQpOmk9ZnVuY3Rpb24odCxlKXtjb25zdHt4Omk9bnVsbCx5Om49bnVsbH09dHx8e30sbz1lLnBvaW50cyxzPVtdO3JldHVybiBlLnNlZ21lbnRzLmZvckVhY2goKCh7c3RhcnQ6dCxlbmQ6ZX0pPT57ZT10cyh0LGUsbyk7Y29uc3QgYT1vW3RdLHI9b1tlXTtudWxsIT09bj8ocy5wdXNoKHt4OmEueCx5Om59KSxzLnB1c2goe3g6ci54LHk6bn0pKTpudWxsIT09aSYmKHMucHVzaCh7eDppLHk6YS55fSkscy5wdXNoKHt4OmkseTpyLnl9KSl9KSksc30odCxlKSxpLmxlbmd0aD9uZXcgem8oe3BvaW50czppLG9wdGlvbnM6e3RlbnNpb246MH0sX2xvb3A6bixfZnVsbExvb3A6bn0pOm51bGx9ZnVuY3Rpb24gYXModCxlLGkpe2xldCBuPXRbZV0uZmlsbDtjb25zdCBvPVtlXTtsZXQgcztpZighaSlyZXR1cm4gbjtmb3IoOyExIT09biYmLTE9PT1vLmluZGV4T2Yobik7KXtpZighWChuKSlyZXR1cm4gbjtpZihzPXRbbl0sIXMpcmV0dXJuITE7aWYocy52aXNpYmxlKXJldHVybiBuO28ucHVzaChuKSxuPXMuZmlsbH1yZXR1cm4hMX1mdW5jdGlvbiBycyh0LGUsaSl7dC5iZWdpblBhdGgoKSxlLnBhdGgodCksdC5saW5lVG8oZS5sYXN0KCkueCxpKSx0LmxpbmVUbyhlLmZpcnN0KCkueCxpKSx0LmNsb3NlUGF0aCgpLHQuY2xpcCgpfWZ1bmN0aW9uIGxzKHQsZSxpLG4pe2lmKG4pcmV0dXJuO2xldCBvPWVbdF0scz1pW3RdO3JldHVyblwiYW5nbGVcIj09PXQmJihvPVd0KG8pLHM9V3QocykpLHtwcm9wZXJ0eTp0LHN0YXJ0Om8sZW5kOnN9fWZ1bmN0aW9uIGNzKHQsZSxpLG4pe3JldHVybiB0JiZlP24odFtpXSxlW2ldKTp0P3RbaV06ZT9lW2ldOjB9ZnVuY3Rpb24gaHModCxlLGkpe2NvbnN0e3RvcDpuLGJvdHRvbTpvfT1lLmNoYXJ0LmNoYXJ0QXJlYSx7cHJvcGVydHk6cyxzdGFydDphLGVuZDpyfT1pfHx7fTtcInhcIj09PXMmJih0LmJlZ2luUGF0aCgpLHQucmVjdChhLG4sci1hLG8tbiksdC5jbGlwKCkpfWZ1bmN0aW9uIGRzKHQsZSxpLG4pe2NvbnN0IG89ZS5pbnRlcnBvbGF0ZShpLG4pO28mJnQubGluZVRvKG8ueCxvLnkpfWZ1bmN0aW9uIHVzKHQsZSl7Y29uc3R7bGluZTppLHRhcmdldDpuLHByb3BlcnR5Om8sY29sb3I6cyxzY2FsZTphfT1lLHI9ZnVuY3Rpb24odCxlLGkpe2NvbnN0IG49dC5zZWdtZW50cyxvPXQucG9pbnRzLHM9ZS5wb2ludHMsYT1bXTtmb3IoY29uc3QgdCBvZiBuKXtsZXR7c3RhcnQ6bixlbmQ6cn09dDtyPXRzKG4scixvKTtjb25zdCBsPWxzKGksb1tuXSxvW3JdLHQubG9vcCk7aWYoIWUuc2VnbWVudHMpe2EucHVzaCh7c291cmNlOnQsdGFyZ2V0Omwsc3RhcnQ6b1tuXSxlbmQ6b1tyXX0pO2NvbnRpbnVlfWNvbnN0IGM9U24oZSxsKTtmb3IoY29uc3QgZSBvZiBjKXtjb25zdCBuPWxzKGksc1tlLnN0YXJ0XSxzW2UuZW5kXSxlLmxvb3ApLHI9a24odCxvLG4pO2Zvcihjb25zdCB0IG9mIHIpYS5wdXNoKHtzb3VyY2U6dCx0YXJnZXQ6ZSxzdGFydDp7W2ldOmNzKGwsbixcInN0YXJ0XCIsTWF0aC5tYXgpfSxlbmQ6e1tpXTpjcyhsLG4sXCJlbmRcIixNYXRoLm1pbil9fSl9fXJldHVybiBhfShpLG4sbyk7Zm9yKGNvbnN0e3NvdXJjZTplLHRhcmdldDpsLHN0YXJ0OmMsZW5kOmh9b2Ygcil7Y29uc3R7c3R5bGU6e2JhY2tncm91bmRDb2xvcjpyPXN9PXt9fT1lO3Quc2F2ZSgpLHQuZmlsbFN0eWxlPXIsaHModCxhLGxzKG8sYyxoKSksdC5iZWdpblBhdGgoKTtjb25zdCBkPSEhaS5wYXRoU2VnbWVudCh0LGUpO2Q/dC5jbG9zZVBhdGgoKTpkcyh0LG4saCxvKTtjb25zdCB1PSEhbi5wYXRoU2VnbWVudCh0LGwse21vdmU6ZCxyZXZlcnNlOiEwfSksZj1kJiZ1O2Z8fGRzKHQsbixjLG8pLHQuY2xvc2VQYXRoKCksdC5maWxsKGY/XCJldmVub2RkXCI6XCJub256ZXJvXCIpLHQucmVzdG9yZSgpfX1mdW5jdGlvbiBmcyh0LGUsaSl7Y29uc3Qgbj1mdW5jdGlvbih0KXtjb25zdHtjaGFydDplLGZpbGw6aSxsaW5lOm59PXQ7aWYoWChpKSlyZXR1cm4gZnVuY3Rpb24odCxlKXtjb25zdCBpPXQuZ2V0RGF0YXNldE1ldGEoZSk7cmV0dXJuIGkmJnQuaXNEYXRhc2V0VmlzaWJsZShlKT9pLmRhdGFzZXQ6bnVsbH0oZSxpKTtpZihcInN0YWNrXCI9PT1pKXJldHVybiBlcyh0KTtjb25zdCBvPUpvKHQpO3JldHVybiBvIGluc3RhbmNlb2YgUW8/bzpzcyhvLG4pfShlKSx7bGluZTpvLHNjYWxlOnMsYXhpczphfT1lLHI9by5vcHRpb25zLGw9ci5maWxsLGM9ci5iYWNrZ3JvdW5kQ29sb3Ise2Fib3ZlOmg9YyxiZWxvdzpkPWN9PWx8fHt9O24mJm8ucG9pbnRzLmxlbmd0aCYmKFp0KHQsaSksZnVuY3Rpb24odCxlKXtjb25zdHtsaW5lOmksdGFyZ2V0Om4sYWJvdmU6byxiZWxvdzpzLGFyZWE6YSxzY2FsZTpyfT1lLGw9aS5fbG9vcD9cImFuZ2xlXCI6ZS5heGlzO3Quc2F2ZSgpLFwieFwiPT09bCYmcyE9PW8mJihycyh0LG4sYS50b3ApLHVzKHQse2xpbmU6aSx0YXJnZXQ6bixjb2xvcjpvLHNjYWxlOnIscHJvcGVydHk6bH0pLHQucmVzdG9yZSgpLHQuc2F2ZSgpLHJzKHQsbixhLmJvdHRvbSkpLHVzKHQse2xpbmU6aSx0YXJnZXQ6bixjb2xvcjpzLHNjYWxlOnIscHJvcGVydHk6bH0pLHQucmVzdG9yZSgpfSh0LHtsaW5lOm8sdGFyZ2V0Om4sYWJvdmU6aCxiZWxvdzpkLGFyZWE6aSxzY2FsZTpzLGF4aXM6YX0pLFF0KHQpKX12YXIgZ3M9e2lkOlwiZmlsbGVyXCIsYWZ0ZXJEYXRhc2V0c1VwZGF0ZSh0LGUsaSl7Y29uc3Qgbj0odC5kYXRhLmRhdGFzZXRzfHxbXSkubGVuZ3RoLG89W107bGV0IHMsYSxyLGw7Zm9yKGE9MDthPG47KythKXM9dC5nZXREYXRhc2V0TWV0YShhKSxyPXMuZGF0YXNldCxsPW51bGwsciYmci5vcHRpb25zJiZyIGluc3RhbmNlb2Ygem8mJihsPXt2aXNpYmxlOnQuaXNEYXRhc2V0VmlzaWJsZShhKSxpbmRleDphLGZpbGw6Wm8ocixhLG4pLGNoYXJ0OnQsYXhpczpzLmNvbnRyb2xsZXIub3B0aW9ucy5pbmRleEF4aXMsc2NhbGU6cy52U2NhbGUsbGluZTpyfSkscy4kZmlsbGVyPWwsby5wdXNoKGwpO2ZvcihhPTA7YTxuOysrYSlsPW9bYV0sbCYmITEhPT1sLmZpbGwmJihsLmZpbGw9YXMobyxhLGkucHJvcGFnYXRlKSl9LGJlZm9yZURyYXcodCxlLGkpe2NvbnN0IG49XCJiZWZvcmVEcmF3XCI9PT1pLmRyYXdUaW1lLG89dC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCkscz10LmNoYXJ0QXJlYTtmb3IobGV0IGU9by5sZW5ndGgtMTtlPj0wOy0tZSl7Y29uc3QgaT1vW2VdLiRmaWxsZXI7aSYmKGkubGluZS51cGRhdGVDb250cm9sUG9pbnRzKHMsaS5heGlzKSxuJiZmcyh0LmN0eCxpLHMpKX19LGJlZm9yZURhdGFzZXRzRHJhdyh0LGUsaSl7aWYoXCJiZWZvcmVEYXRhc2V0c0RyYXdcIiE9PWkuZHJhd1RpbWUpcmV0dXJuO2NvbnN0IG49dC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7Zm9yKGxldCBlPW4ubGVuZ3RoLTE7ZT49MDstLWUpe2NvbnN0IGk9bltlXS4kZmlsbGVyO2kmJmZzKHQuY3R4LGksdC5jaGFydEFyZWEpfX0sYmVmb3JlRGF0YXNldERyYXcodCxlLGkpe2NvbnN0IG49ZS5tZXRhLiRmaWxsZXI7biYmITEhPT1uLmZpbGwmJlwiYmVmb3JlRGF0YXNldERyYXdcIj09PWkuZHJhd1RpbWUmJmZzKHQuY3R4LG4sdC5jaGFydEFyZWEpfSxkZWZhdWx0czp7cHJvcGFnYXRlOiEwLGRyYXdUaW1lOlwiYmVmb3JlRGF0YXNldERyYXdcIn19O2NvbnN0IHBzPSh0LGUpPT57bGV0e2JveEhlaWdodDppPWUsYm94V2lkdGg6bj1lfT10O3JldHVybiB0LnVzZVBvaW50U3R5bGUmJihpPU1hdGgubWluKGksZSksbj1NYXRoLm1pbihuLGUpKSx7Ym94V2lkdGg6bixib3hIZWlnaHQ6aSxpdGVtSGVpZ2h0Ok1hdGgubWF4KGUsaSl9fTtjbGFzcyBtcyBleHRlbmRzIHppe2NvbnN0cnVjdG9yKHQpe3N1cGVyKCksdGhpcy5fYWRkZWQ9ITEsdGhpcy5sZWdlbmRIaXRCb3hlcz1bXSx0aGlzLl9ob3ZlcmVkSXRlbT1udWxsLHRoaXMuZG91Z2hudXRNb2RlPSExLHRoaXMuY2hhcnQ9dC5jaGFydCx0aGlzLm9wdGlvbnM9dC5vcHRpb25zLHRoaXMuY3R4PXQuY3R4LHRoaXMubGVnZW5kSXRlbXM9dm9pZCAwLHRoaXMuY29sdW1uU2l6ZXM9dm9pZCAwLHRoaXMubGluZVdpZHRocz12b2lkIDAsdGhpcy5tYXhIZWlnaHQ9dm9pZCAwLHRoaXMubWF4V2lkdGg9dm9pZCAwLHRoaXMudG9wPXZvaWQgMCx0aGlzLmJvdHRvbT12b2lkIDAsdGhpcy5sZWZ0PXZvaWQgMCx0aGlzLnJpZ2h0PXZvaWQgMCx0aGlzLmhlaWdodD12b2lkIDAsdGhpcy53aWR0aD12b2lkIDAsdGhpcy5fbWFyZ2lucz12b2lkIDAsdGhpcy5wb3NpdGlvbj12b2lkIDAsdGhpcy53ZWlnaHQ9dm9pZCAwLHRoaXMuZnVsbFNpemU9dm9pZCAwfXVwZGF0ZSh0LGUsaSl7Y29uc3Qgbj10aGlzO24ubWF4V2lkdGg9dCxuLm1heEhlaWdodD1lLG4uX21hcmdpbnM9aSxuLnNldERpbWVuc2lvbnMoKSxuLmJ1aWxkTGFiZWxzKCksbi5maXQoKX1zZXREaW1lbnNpb25zKCl7Y29uc3QgdD10aGlzO3QuaXNIb3Jpem9udGFsKCk/KHQud2lkdGg9dC5tYXhXaWR0aCx0LmxlZnQ9dC5fbWFyZ2lucy5sZWZ0LHQucmlnaHQ9dC53aWR0aCk6KHQuaGVpZ2h0PXQubWF4SGVpZ2h0LHQudG9wPXQuX21hcmdpbnMudG9wLHQuYm90dG9tPXQuaGVpZ2h0KX1idWlsZExhYmVscygpe2NvbnN0IHQ9dGhpcyxlPXQub3B0aW9ucy5sYWJlbHN8fHt9O2xldCBpPVEoZS5nZW5lcmF0ZUxhYmVscyxbdC5jaGFydF0sdCl8fFtdO2UuZmlsdGVyJiYoaT1pLmZpbHRlcigoaT0+ZS5maWx0ZXIoaSx0LmNoYXJ0LmRhdGEpKSkpLGUuc29ydCYmKGk9aS5zb3J0KCgoaSxuKT0+ZS5zb3J0KGksbix0LmNoYXJ0LmRhdGEpKSkpLHQub3B0aW9ucy5yZXZlcnNlJiZpLnJldmVyc2UoKSx0LmxlZ2VuZEl0ZW1zPWl9Zml0KCl7Y29uc3QgdD10aGlzLHtvcHRpb25zOmUsY3R4Oml9PXQ7aWYoIWUuZGlzcGxheSlyZXR1cm4gdm9pZCh0LndpZHRoPXQuaGVpZ2h0PTApO2NvbnN0IG49ZS5sYWJlbHMsbz1CZShuLmZvbnQpLHM9by5zaXplLGE9dC5fY29tcHV0ZVRpdGxlSGVpZ2h0KCkse2JveFdpZHRoOnIsaXRlbUhlaWdodDpsfT1wcyhuLHMpO2xldCBjLGg7aS5mb250PW8uc3RyaW5nLHQuaXNIb3Jpem9udGFsKCk/KGM9dC5tYXhXaWR0aCxoPXQuX2ZpdFJvd3MoYSxzLHIsbCkrMTApOihoPXQubWF4SGVpZ2h0LGM9dC5fZml0Q29scyhhLHMscixsKSsxMCksdC53aWR0aD1NYXRoLm1pbihjLGUubWF4V2lkdGh8fHQubWF4V2lkdGgpLHQuaGVpZ2h0PU1hdGgubWluKGgsZS5tYXhIZWlnaHR8fHQubWF4SGVpZ2h0KX1fZml0Um93cyh0LGUsaSxuKXtjb25zdCBvPXRoaXMse2N0eDpzLG1heFdpZHRoOmEsb3B0aW9uczp7bGFiZWxzOntwYWRkaW5nOnJ9fX09byxsPW8ubGVnZW5kSGl0Qm94ZXM9W10sYz1vLmxpbmVXaWR0aHM9WzBdLGg9bityO2xldCBkPXQ7cy50ZXh0QWxpZ249XCJsZWZ0XCIscy50ZXh0QmFzZWxpbmU9XCJtaWRkbGVcIjtsZXQgdT0tMSxmPS1oO3JldHVybiBvLmxlZ2VuZEl0ZW1zLmZvckVhY2goKCh0LG8pPT57Y29uc3QgZz1pK2UvMitzLm1lYXN1cmVUZXh0KHQudGV4dCkud2lkdGg7KDA9PT1vfHxjW2MubGVuZ3RoLTFdK2crMipyPmEpJiYoZCs9aCxjW2MubGVuZ3RoLShvPjA/MDoxKV09MCxmKz1oLHUrKyksbFtvXT17bGVmdDowLHRvcDpmLHJvdzp1LHdpZHRoOmcsaGVpZ2h0Om59LGNbYy5sZW5ndGgtMV0rPWcrcn0pKSxkfV9maXRDb2xzKHQsZSxpLG4pe2NvbnN0IG89dGhpcyx7Y3R4OnMsbWF4SGVpZ2h0OmEsb3B0aW9uczp7bGFiZWxzOntwYWRkaW5nOnJ9fX09byxsPW8ubGVnZW5kSGl0Qm94ZXM9W10sYz1vLmNvbHVtblNpemVzPVtdLGg9YS10O2xldCBkPXIsdT0wLGY9MCxnPTAscD0wO3JldHVybiBvLmxlZ2VuZEl0ZW1zLmZvckVhY2goKCh0LG8pPT57Y29uc3QgYT1pK2UvMitzLm1lYXN1cmVUZXh0KHQudGV4dCkud2lkdGg7bz4wJiZmK24rMipyPmgmJihkKz11K3IsYy5wdXNoKHt3aWR0aDp1LGhlaWdodDpmfSksZys9dStyLHArKyx1PWY9MCksbFtvXT17bGVmdDpnLHRvcDpmLGNvbDpwLHdpZHRoOmEsaGVpZ2h0Om59LHU9TWF0aC5tYXgodSxhKSxmKz1uK3J9KSksZCs9dSxjLnB1c2goe3dpZHRoOnUsaGVpZ2h0OmZ9KSxkfWFkanVzdEhpdEJveGVzKCl7Y29uc3QgdD10aGlzO2lmKCF0Lm9wdGlvbnMuZGlzcGxheSlyZXR1cm47Y29uc3QgZT10Ll9jb21wdXRlVGl0bGVIZWlnaHQoKSx7bGVnZW5kSGl0Qm94ZXM6aSxvcHRpb25zOnthbGlnbjpuLGxhYmVsczp7cGFkZGluZzpzfSxydGw6YX19PXQ7aWYodGhpcy5pc0hvcml6b250YWwoKSl7bGV0IHI9MCxsPW8obix0LmxlZnQrcyx0LnJpZ2h0LXQubGluZVdpZHRoc1tyXSk7Zm9yKGNvbnN0IGEgb2YgaSlyIT09YS5yb3cmJihyPWEucm93LGw9byhuLHQubGVmdCtzLHQucmlnaHQtdC5saW5lV2lkdGhzW3JdKSksYS50b3ArPXQudG9wK2UrcyxhLmxlZnQ9bCxsKz1hLndpZHRoK3M7aWYoYSl7Y29uc3QgZT1pLnJlZHVjZSgoKHQsZSk9Pih0W2Uucm93XT10W2Uucm93XXx8W10sdFtlLnJvd10ucHVzaChlKSx0KSkse30pLG49W107T2JqZWN0LmtleXMoZSkuZm9yRWFjaCgodD0+e2VbdF0ucmV2ZXJzZSgpLG4ucHVzaCguLi5lW3RdKX0pKSx0LmxlZ2VuZEhpdEJveGVzPW59fWVsc2V7bGV0IGE9MCxyPW8obix0LnRvcCtlK3MsdC5ib3R0b20tdC5jb2x1bW5TaXplc1thXS5oZWlnaHQpO2Zvcihjb25zdCBsIG9mIGkpbC5jb2whPT1hJiYoYT1sLmNvbCxyPW8obix0LnRvcCtlK3MsdC5ib3R0b20tdC5jb2x1bW5TaXplc1thXS5oZWlnaHQpKSxsLnRvcD1yLGwubGVmdCs9dC5sZWZ0K3Mscis9bC5oZWlnaHQrc319aXNIb3Jpem9udGFsKCl7cmV0dXJuXCJ0b3BcIj09PXRoaXMub3B0aW9ucy5wb3NpdGlvbnx8XCJib3R0b21cIj09PXRoaXMub3B0aW9ucy5wb3NpdGlvbn1kcmF3KCl7Y29uc3QgdD10aGlzO2lmKHQub3B0aW9ucy5kaXNwbGF5KXtjb25zdCBlPXQuY3R4O1p0KGUsdCksdC5fZHJhdygpLFF0KGUpfX1fZHJhdygpe2NvbnN0IHQ9dGhpcyx7b3B0aW9uczplLGNvbHVtblNpemVzOmksbGluZVdpZHRoczpuLGN0eDphfT10LHthbGlnbjpyLGxhYmVsczpsfT1lLGM9eHQuY29sb3IsaD1fbihlLnJ0bCx0LmxlZnQsdC53aWR0aCksZD1CZShsLmZvbnQpLHtjb2xvcjp1LHBhZGRpbmc6Zn09bCxnPWQuc2l6ZSxwPWcvMjtsZXQgbTt0LmRyYXdUaXRsZSgpLGEudGV4dEFsaWduPWgudGV4dEFsaWduKFwibGVmdFwiKSxhLnRleHRCYXNlbGluZT1cIm1pZGRsZVwiLGEubGluZVdpZHRoPS41LGEuZm9udD1kLnN0cmluZztjb25zdHtib3hXaWR0aDp4LGJveEhlaWdodDpiLGl0ZW1IZWlnaHQ6X309cHMobCxnKSx5PXQuaXNIb3Jpem9udGFsKCksdj10aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKTttPXk/e3g6byhyLHQubGVmdCtmLHQucmlnaHQtblswXSkseTp0LnRvcCtmK3YsbGluZTowfTp7eDp0LmxlZnQrZix5Om8ocix0LnRvcCt2K2YsdC5ib3R0b20taVswXS5oZWlnaHQpLGxpbmU6MH0seW4odC5jdHgsZS50ZXh0RGlyZWN0aW9uKTtjb25zdCB3PV8rZjt0LmxlZ2VuZEl0ZW1zLmZvckVhY2goKChNLGspPT57YS5zdHJva2VTdHlsZT1NLmZvbnRDb2xvcnx8dSxhLmZpbGxTdHlsZT1NLmZvbnRDb2xvcnx8dTtjb25zdCBTPWEubWVhc3VyZVRleHQoTS50ZXh0KS53aWR0aCxQPWgudGV4dEFsaWduKE0udGV4dEFsaWdufHwoTS50ZXh0QWxpZ249bC50ZXh0QWxpZ24pKSxEPXgrcCtTO2xldCBDPW0ueCxPPW0ueTtoLnNldFdpZHRoKHQud2lkdGgpLHk/az4wJiZDK0QrZj50LnJpZ2h0JiYoTz1tLnkrPXcsbS5saW5lKyssQz1tLng9byhyLHQubGVmdCtmLHQucmlnaHQtblttLmxpbmVdKSk6az4wJiZPK3c+dC5ib3R0b20mJihDPW0ueD1DK2lbbS5saW5lXS53aWR0aCtmLG0ubGluZSsrLE89bS55PW8ocix0LnRvcCt2K2YsdC5ib3R0b20taVttLmxpbmVdLmhlaWdodCkpOyFmdW5jdGlvbih0LGUsaSl7aWYoaXNOYU4oeCl8fHg8PTB8fGlzTmFOKGIpfHxiPDApcmV0dXJuO2Euc2F2ZSgpO2NvbnN0IG49SyhpLmxpbmVXaWR0aCwxKTtpZihhLmZpbGxTdHlsZT1LKGkuZmlsbFN0eWxlLGMpLGEubGluZUNhcD1LKGkubGluZUNhcCxcImJ1dHRcIiksYS5saW5lRGFzaE9mZnNldD1LKGkubGluZURhc2hPZmZzZXQsMCksYS5saW5lSm9pbj1LKGkubGluZUpvaW4sXCJtaXRlclwiKSxhLmxpbmVXaWR0aD1uLGEuc3Ryb2tlU3R5bGU9SyhpLnN0cm9rZVN0eWxlLGMpLGEuc2V0TGluZURhc2goSyhpLmxpbmVEYXNoLFtdKSksbC51c2VQb2ludFN0eWxlKXtjb25zdCBvPXtyYWRpdXM6eCpNYXRoLlNRUlQyLzIscG9pbnRTdHlsZTppLnBvaW50U3R5bGUscm90YXRpb246aS5yb3RhdGlvbixib3JkZXJXaWR0aDpufSxzPWgueFBsdXModCx4LzIpO0t0KGEsbyxzLGUrcCl9ZWxzZXtjb25zdCBvPWUrTWF0aC5tYXgoKGctYikvMiwwKSxzPWgubGVmdEZvckx0cih0LHgpLHI9SWUoaS5ib3JkZXJSYWRpdXMpO2EuYmVnaW5QYXRoKCksT2JqZWN0LnZhbHVlcyhyKS5zb21lKCh0PT4wIT09dCkpP25lKGEse3g6cyx5Om8sdzp4LGg6YixyYWRpdXM6cn0pOmEucmVjdChzLG8seCxiKSxhLmZpbGwoKSwwIT09biYmYS5zdHJva2UoKX1hLnJlc3RvcmUoKX0oaC54KEMpLE8sTSksQz1zKFAsQyt4K3AseT9DK0Q6dC5yaWdodCxlLnJ0bCksZnVuY3Rpb24odCxlLGkpe2VlKGEsaS50ZXh0LHQsZStfLzIsZCx7c3RyaWtldGhyb3VnaDppLmhpZGRlbix0ZXh0QWxpZ246aC50ZXh0QWxpZ24oaS50ZXh0QWxpZ24pfSl9KGgueChDKSxPLE0pLHk/bS54Kz1EK2Y6bS55Kz13fSkpLHZuKHQuY3R4LGUudGV4dERpcmVjdGlvbil9ZHJhd1RpdGxlKCl7Y29uc3QgdD10aGlzLGU9dC5vcHRpb25zLGk9ZS50aXRsZSxzPUJlKGkuZm9udCksYT1GZShpLnBhZGRpbmcpO2lmKCFpLmRpc3BsYXkpcmV0dXJuO2NvbnN0IHI9X24oZS5ydGwsdC5sZWZ0LHQud2lkdGgpLGw9dC5jdHgsYz1pLnBvc2l0aW9uLGg9cy5zaXplLzIsZD1hLnRvcCtoO2xldCB1LGY9dC5sZWZ0LGc9dC53aWR0aDtpZih0aGlzLmlzSG9yaXpvbnRhbCgpKWc9TWF0aC5tYXgoLi4udC5saW5lV2lkdGhzKSx1PXQudG9wK2QsZj1vKGUuYWxpZ24sZix0LnJpZ2h0LWcpO2Vsc2V7Y29uc3QgaT10LmNvbHVtblNpemVzLnJlZHVjZSgoKHQsZSk9Pk1hdGgubWF4KHQsZS5oZWlnaHQpKSwwKTt1PWQrbyhlLmFsaWduLHQudG9wLHQuYm90dG9tLWktZS5sYWJlbHMucGFkZGluZy10Ll9jb21wdXRlVGl0bGVIZWlnaHQoKSl9Y29uc3QgcD1vKGMsZixmK2cpO2wudGV4dEFsaWduPXIudGV4dEFsaWduKG4oYykpLGwudGV4dEJhc2VsaW5lPVwibWlkZGxlXCIsbC5zdHJva2VTdHlsZT1pLmNvbG9yLGwuZmlsbFN0eWxlPWkuY29sb3IsbC5mb250PXMuc3RyaW5nLGVlKGwsaS50ZXh0LHAsdSxzKX1fY29tcHV0ZVRpdGxlSGVpZ2h0KCl7Y29uc3QgdD10aGlzLm9wdGlvbnMudGl0bGUsZT1CZSh0LmZvbnQpLGk9RmUodC5wYWRkaW5nKTtyZXR1cm4gdC5kaXNwbGF5P2UubGluZUhlaWdodCtpLmhlaWdodDowfV9nZXRMZWdlbmRJdGVtQXQodCxlKXtjb25zdCBpPXRoaXM7bGV0IG4sbyxzO2lmKHQ+PWkubGVmdCYmdDw9aS5yaWdodCYmZT49aS50b3AmJmU8PWkuYm90dG9tKWZvcihzPWkubGVnZW5kSGl0Qm94ZXMsbj0wO248cy5sZW5ndGg7KytuKWlmKG89c1tuXSx0Pj1vLmxlZnQmJnQ8PW8ubGVmdCtvLndpZHRoJiZlPj1vLnRvcCYmZTw9by50b3Arby5oZWlnaHQpcmV0dXJuIGkubGVnZW5kSXRlbXNbbl07cmV0dXJuIG51bGx9aGFuZGxlRXZlbnQodCl7Y29uc3QgZT10aGlzLGk9ZS5vcHRpb25zO2lmKCFmdW5jdGlvbih0LGUpe2lmKFwibW91c2Vtb3ZlXCI9PT10JiYoZS5vbkhvdmVyfHxlLm9uTGVhdmUpKXJldHVybiEwO2lmKGUub25DbGljayYmKFwiY2xpY2tcIj09PXR8fFwibW91c2V1cFwiPT09dCkpcmV0dXJuITA7cmV0dXJuITF9KHQudHlwZSxpKSlyZXR1cm47Y29uc3Qgbj1lLl9nZXRMZWdlbmRJdGVtQXQodC54LHQueSk7aWYoXCJtb3VzZW1vdmVcIj09PXQudHlwZSl7Y29uc3QgYT1lLl9ob3ZlcmVkSXRlbSxyPShzPW4sbnVsbCE9PShvPWEpJiZudWxsIT09cyYmby5kYXRhc2V0SW5kZXg9PT1zLmRhdGFzZXRJbmRleCYmby5pbmRleD09PXMuaW5kZXgpO2EmJiFyJiZRKGkub25MZWF2ZSxbdCxhLGVdLGUpLGUuX2hvdmVyZWRJdGVtPW4sbiYmIXImJlEoaS5vbkhvdmVyLFt0LG4sZV0sZSl9ZWxzZSBuJiZRKGkub25DbGljayxbdCxuLGVdLGUpO3ZhciBvLHN9fXZhciB4cz17aWQ6XCJsZWdlbmRcIixfZWxlbWVudDptcyxzdGFydCh0LGUsaSl7Y29uc3Qgbj10LmxlZ2VuZD1uZXcgbXMoe2N0eDp0LmN0eCxvcHRpb25zOmksY2hhcnQ6dH0pO1plLmNvbmZpZ3VyZSh0LG4saSksWmUuYWRkQm94KHQsbil9LHN0b3AodCl7WmUucmVtb3ZlQm94KHQsdC5sZWdlbmQpLGRlbGV0ZSB0LmxlZ2VuZH0sYmVmb3JlVXBkYXRlKHQsZSxpKXtjb25zdCBuPXQubGVnZW5kO1plLmNvbmZpZ3VyZSh0LG4saSksbi5vcHRpb25zPWl9LGFmdGVyVXBkYXRlKHQpe2NvbnN0IGU9dC5sZWdlbmQ7ZS5idWlsZExhYmVscygpLGUuYWRqdXN0SGl0Qm94ZXMoKX0sYWZ0ZXJFdmVudCh0LGUpe2UucmVwbGF5fHx0LmxlZ2VuZC5oYW5kbGVFdmVudChlLmV2ZW50KX0sZGVmYXVsdHM6e2Rpc3BsYXk6ITAscG9zaXRpb246XCJ0b3BcIixhbGlnbjpcImNlbnRlclwiLGZ1bGxTaXplOiEwLHJldmVyc2U6ITEsd2VpZ2h0OjFlMyxvbkNsaWNrKHQsZSxpKXtjb25zdCBuPWUuZGF0YXNldEluZGV4LG89aS5jaGFydDtvLmlzRGF0YXNldFZpc2libGUobik/KG8uaGlkZShuKSxlLmhpZGRlbj0hMCk6KG8uc2hvdyhuKSxlLmhpZGRlbj0hMSl9LG9uSG92ZXI6bnVsbCxvbkxlYXZlOm51bGwsbGFiZWxzOntjb2xvcjp0PT50LmNoYXJ0Lm9wdGlvbnMuY29sb3IsYm94V2lkdGg6NDAscGFkZGluZzoxMCxnZW5lcmF0ZUxhYmVscyh0KXtjb25zdCBlPXQuZGF0YS5kYXRhc2V0cyx7bGFiZWxzOnt1c2VQb2ludFN0eWxlOmkscG9pbnRTdHlsZTpuLHRleHRBbGlnbjpvLGNvbG9yOnN9fT10LmxlZ2VuZC5vcHRpb25zO3JldHVybiB0Ll9nZXRTb3J0ZWREYXRhc2V0TWV0YXMoKS5tYXAoKHQ9Pntjb25zdCBhPXQuY29udHJvbGxlci5nZXRTdHlsZShpPzA6dm9pZCAwKSxyPUZlKGEuYm9yZGVyV2lkdGgpO3JldHVybnt0ZXh0OmVbdC5pbmRleF0ubGFiZWwsZmlsbFN0eWxlOmEuYmFja2dyb3VuZENvbG9yLGZvbnRDb2xvcjpzLGhpZGRlbjohdC52aXNpYmxlLGxpbmVDYXA6YS5ib3JkZXJDYXBTdHlsZSxsaW5lRGFzaDphLmJvcmRlckRhc2gsbGluZURhc2hPZmZzZXQ6YS5ib3JkZXJEYXNoT2Zmc2V0LGxpbmVKb2luOmEuYm9yZGVySm9pblN0eWxlLGxpbmVXaWR0aDooci53aWR0aCtyLmhlaWdodCkvNCxzdHJva2VTdHlsZTphLmJvcmRlckNvbG9yLHBvaW50U3R5bGU6bnx8YS5wb2ludFN0eWxlLHJvdGF0aW9uOmEucm90YXRpb24sdGV4dEFsaWduOm98fGEudGV4dEFsaWduLGJvcmRlclJhZGl1czowLGRhdGFzZXRJbmRleDp0LmluZGV4fX0pLHRoaXMpfX0sdGl0bGU6e2NvbG9yOnQ9PnQuY2hhcnQub3B0aW9ucy5jb2xvcixkaXNwbGF5OiExLHBvc2l0aW9uOlwiY2VudGVyXCIsdGV4dDpcIlwifX0sZGVzY3JpcHRvcnM6e19zY3JpcHRhYmxlOnQ9PiF0LnN0YXJ0c1dpdGgoXCJvblwiKSxsYWJlbHM6e19zY3JpcHRhYmxlOnQ9PiFbXCJnZW5lcmF0ZUxhYmVsc1wiLFwiZmlsdGVyXCIsXCJzb3J0XCJdLmluY2x1ZGVzKHQpfX19O2NsYXNzIGJzIGV4dGVuZHMgeml7Y29uc3RydWN0b3IodCl7c3VwZXIoKSx0aGlzLmNoYXJ0PXQuY2hhcnQsdGhpcy5vcHRpb25zPXQub3B0aW9ucyx0aGlzLmN0eD10LmN0eCx0aGlzLl9wYWRkaW5nPXZvaWQgMCx0aGlzLnRvcD12b2lkIDAsdGhpcy5ib3R0b209dm9pZCAwLHRoaXMubGVmdD12b2lkIDAsdGhpcy5yaWdodD12b2lkIDAsdGhpcy53aWR0aD12b2lkIDAsdGhpcy5oZWlnaHQ9dm9pZCAwLHRoaXMucG9zaXRpb249dm9pZCAwLHRoaXMud2VpZ2h0PXZvaWQgMCx0aGlzLmZ1bGxTaXplPXZvaWQgMH11cGRhdGUodCxlKXtjb25zdCBpPXRoaXMsbj1pLm9wdGlvbnM7aWYoaS5sZWZ0PTAsaS50b3A9MCwhbi5kaXNwbGF5KXJldHVybiB2b2lkKGkud2lkdGg9aS5oZWlnaHQ9aS5yaWdodD1pLmJvdHRvbT0wKTtpLndpZHRoPWkucmlnaHQ9dCxpLmhlaWdodD1pLmJvdHRvbT1lO2NvbnN0IG89WShuLnRleHQpP24udGV4dC5sZW5ndGg6MTtpLl9wYWRkaW5nPUZlKG4ucGFkZGluZyk7Y29uc3Qgcz1vKkJlKG4uZm9udCkubGluZUhlaWdodCtpLl9wYWRkaW5nLmhlaWdodDtpLmlzSG9yaXpvbnRhbCgpP2kuaGVpZ2h0PXM6aS53aWR0aD1zfWlzSG9yaXpvbnRhbCgpe2NvbnN0IHQ9dGhpcy5vcHRpb25zLnBvc2l0aW9uO3JldHVyblwidG9wXCI9PT10fHxcImJvdHRvbVwiPT09dH1fZHJhd0FyZ3ModCl7Y29uc3R7dG9wOmUsbGVmdDppLGJvdHRvbTpuLHJpZ2h0OnMsb3B0aW9uczphfT10aGlzLHI9YS5hbGlnbjtsZXQgbCxjLGgsZD0wO3JldHVybiB0aGlzLmlzSG9yaXpvbnRhbCgpPyhjPW8ocixpLHMpLGg9ZSt0LGw9cy1pKTooXCJsZWZ0XCI9PT1hLnBvc2l0aW9uPyhjPWkrdCxoPW8ocixuLGUpLGQ9LS41KmJ0KTooYz1zLXQsaD1vKHIsZSxuKSxkPS41KmJ0KSxsPW4tZSkse3RpdGxlWDpjLHRpdGxlWTpoLG1heFdpZHRoOmwscm90YXRpb246ZH19ZHJhdygpe2NvbnN0IHQ9dGhpcyxlPXQuY3R4LGk9dC5vcHRpb25zO2lmKCFpLmRpc3BsYXkpcmV0dXJuO2NvbnN0IG89QmUoaS5mb250KSxzPW8ubGluZUhlaWdodC8yK3QuX3BhZGRpbmcudG9wLHt0aXRsZVg6YSx0aXRsZVk6cixtYXhXaWR0aDpsLHJvdGF0aW9uOmN9PXQuX2RyYXdBcmdzKHMpO2VlKGUsaS50ZXh0LDAsMCxvLHtjb2xvcjppLmNvbG9yLG1heFdpZHRoOmwscm90YXRpb246Yyx0ZXh0QWxpZ246bihpLmFsaWduKSx0ZXh0QmFzZWxpbmU6XCJtaWRkbGVcIix0cmFuc2xhdGlvbjpbYSxyXX0pfX12YXIgX3M9e2lkOlwidGl0bGVcIixfZWxlbWVudDpicyxzdGFydCh0LGUsaSl7IWZ1bmN0aW9uKHQsZSl7Y29uc3QgaT1uZXcgYnMoe2N0eDp0LmN0eCxvcHRpb25zOmUsY2hhcnQ6dH0pO1plLmNvbmZpZ3VyZSh0LGksZSksWmUuYWRkQm94KHQsaSksdC50aXRsZUJsb2NrPWl9KHQsaSl9LHN0b3AodCl7Y29uc3QgZT10LnRpdGxlQmxvY2s7WmUucmVtb3ZlQm94KHQsZSksZGVsZXRlIHQudGl0bGVCbG9ja30sYmVmb3JlVXBkYXRlKHQsZSxpKXtjb25zdCBuPXQudGl0bGVCbG9jaztaZS5jb25maWd1cmUodCxuLGkpLG4ub3B0aW9ucz1pfSxkZWZhdWx0czp7YWxpZ246XCJjZW50ZXJcIixkaXNwbGF5OiExLGZvbnQ6e3dlaWdodDpcImJvbGRcIn0sZnVsbFNpemU6ITAscGFkZGluZzoxMCxwb3NpdGlvbjpcInRvcFwiLHRleHQ6XCJcIix3ZWlnaHQ6MmUzfSxkZWZhdWx0Um91dGVzOntjb2xvcjpcImNvbG9yXCJ9LGRlc2NyaXB0b3JzOntfc2NyaXB0YWJsZTohMCxfaW5kZXhhYmxlOiExfX07Y29uc3QgeXM9bmV3IFdlYWtNYXA7dmFyIHZzPXtpZDpcInN1YnRpdGxlXCIsc3RhcnQodCxlLGkpe2NvbnN0IG49bmV3IGJzKHtjdHg6dC5jdHgsb3B0aW9uczppLGNoYXJ0OnR9KTtaZS5jb25maWd1cmUodCxuLGkpLFplLmFkZEJveCh0LG4pLHlzLnNldCh0LG4pfSxzdG9wKHQpe1plLnJlbW92ZUJveCh0LHlzLmdldCh0KSkseXMuZGVsZXRlKHQpfSxiZWZvcmVVcGRhdGUodCxlLGkpe2NvbnN0IG49eXMuZ2V0KHQpO1plLmNvbmZpZ3VyZSh0LG4saSksbi5vcHRpb25zPWl9LGRlZmF1bHRzOnthbGlnbjpcImNlbnRlclwiLGRpc3BsYXk6ITEsZm9udDp7d2VpZ2h0Olwibm9ybWFsXCJ9LGZ1bGxTaXplOiEwLHBhZGRpbmc6MCxwb3NpdGlvbjpcInRvcFwiLHRleHQ6XCJcIix3ZWlnaHQ6MTUwMH0sZGVmYXVsdFJvdXRlczp7Y29sb3I6XCJjb2xvclwifSxkZXNjcmlwdG9yczp7X3NjcmlwdGFibGU6ITAsX2luZGV4YWJsZTohMX19O2NvbnN0IHdzPXthdmVyYWdlKHQpe2lmKCF0Lmxlbmd0aClyZXR1cm4hMTtsZXQgZSxpLG49MCxvPTAscz0wO2ZvcihlPTAsaT10Lmxlbmd0aDtlPGk7KytlKXtjb25zdCBpPXRbZV0uZWxlbWVudDtpZihpJiZpLmhhc1ZhbHVlKCkpe2NvbnN0IHQ9aS50b29sdGlwUG9zaXRpb24oKTtuKz10Lngsbys9dC55LCsrc319cmV0dXJue3g6bi9zLHk6by9zfX0sbmVhcmVzdCh0LGUpe2lmKCF0Lmxlbmd0aClyZXR1cm4hMTtsZXQgaSxuLG8scz1lLngsYT1lLnkscj1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7Zm9yKGk9MCxuPXQubGVuZ3RoO2k8bjsrK2kpe2NvbnN0IG49dFtpXS5lbGVtZW50O2lmKG4mJm4uaGFzVmFsdWUoKSl7Y29uc3QgdD1CdChlLG4uZ2V0Q2VudGVyUG9pbnQoKSk7dDxyJiYocj10LG89bil9fWlmKG8pe2NvbnN0IHQ9by50b29sdGlwUG9zaXRpb24oKTtzPXQueCxhPXQueX1yZXR1cm57eDpzLHk6YX19fTtmdW5jdGlvbiBNcyh0LGUpe3JldHVybiBlJiYoWShlKT9BcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0LGUpOnQucHVzaChlKSksdH1mdW5jdGlvbiBrcyh0KXtyZXR1cm4oXCJzdHJpbmdcIj09dHlwZW9mIHR8fHQgaW5zdGFuY2VvZiBTdHJpbmcpJiZ0LmluZGV4T2YoXCJcXG5cIik+LTE/dC5zcGxpdChcIlxcblwiKTp0fWZ1bmN0aW9uIFNzKHQsZSl7Y29uc3R7ZWxlbWVudDppLGRhdGFzZXRJbmRleDpuLGluZGV4Om99PWUscz10LmdldERhdGFzZXRNZXRhKG4pLmNvbnRyb2xsZXIse2xhYmVsOmEsdmFsdWU6cn09cy5nZXRMYWJlbEFuZFZhbHVlKG8pO3JldHVybntjaGFydDp0LGxhYmVsOmEscGFyc2VkOnMuZ2V0UGFyc2VkKG8pLHJhdzp0LmRhdGEuZGF0YXNldHNbbl0uZGF0YVtvXSxmb3JtYXR0ZWRWYWx1ZTpyLGRhdGFzZXQ6cy5nZXREYXRhc2V0KCksZGF0YUluZGV4Om8sZGF0YXNldEluZGV4Om4sZWxlbWVudDppfX1mdW5jdGlvbiBQcyh0LGUpe2NvbnN0IGk9dC5fY2hhcnQuY3R4LHtib2R5Om4sZm9vdGVyOm8sdGl0bGU6c309dCx7Ym94V2lkdGg6YSxib3hIZWlnaHQ6cn09ZSxsPUJlKGUuYm9keUZvbnQpLGM9QmUoZS50aXRsZUZvbnQpLGg9QmUoZS5mb290ZXJGb250KSxkPXMubGVuZ3RoLHU9by5sZW5ndGgsZj1uLmxlbmd0aCxnPUZlKGUucGFkZGluZyk7bGV0IHA9Zy5oZWlnaHQsbT0wLHg9bi5yZWR1Y2UoKCh0LGUpPT50K2UuYmVmb3JlLmxlbmd0aCtlLmxpbmVzLmxlbmd0aCtlLmFmdGVyLmxlbmd0aCksMCk7aWYoeCs9dC5iZWZvcmVCb2R5Lmxlbmd0aCt0LmFmdGVyQm9keS5sZW5ndGgsZCYmKHArPWQqYy5saW5lSGVpZ2h0KyhkLTEpKmUudGl0bGVTcGFjaW5nK2UudGl0bGVNYXJnaW5Cb3R0b20pLHgpe3ArPWYqKGUuZGlzcGxheUNvbG9ycz9NYXRoLm1heChyLGwubGluZUhlaWdodCk6bC5saW5lSGVpZ2h0KSsoeC1mKSpsLmxpbmVIZWlnaHQrKHgtMSkqZS5ib2R5U3BhY2luZ311JiYocCs9ZS5mb290ZXJNYXJnaW5Ub3ArdSpoLmxpbmVIZWlnaHQrKHUtMSkqZS5mb290ZXJTcGFjaW5nKTtsZXQgYj0wO2NvbnN0IF89ZnVuY3Rpb24odCl7bT1NYXRoLm1heChtLGkubWVhc3VyZVRleHQodCkud2lkdGgrYil9O3JldHVybiBpLnNhdmUoKSxpLmZvbnQ9Yy5zdHJpbmcsSih0LnRpdGxlLF8pLGkuZm9udD1sLnN0cmluZyxKKHQuYmVmb3JlQm9keS5jb25jYXQodC5hZnRlckJvZHkpLF8pLGI9ZS5kaXNwbGF5Q29sb3JzP2ErMjowLEoobiwodD0+e0oodC5iZWZvcmUsXyksSih0LmxpbmVzLF8pLEoodC5hZnRlcixfKX0pKSxiPTAsaS5mb250PWguc3RyaW5nLEoodC5mb290ZXIsXyksaS5yZXN0b3JlKCksbSs9Zy53aWR0aCx7d2lkdGg6bSxoZWlnaHQ6cH19ZnVuY3Rpb24gRHModCxlLGksbil7Y29uc3R7eDpvLHdpZHRoOnN9PWkse3dpZHRoOmEsY2hhcnRBcmVhOntsZWZ0OnIscmlnaHQ6bH19PXQ7bGV0IGM9XCJjZW50ZXJcIjtyZXR1cm5cImNlbnRlclwiPT09bj9jPW88PShyK2wpLzI/XCJsZWZ0XCI6XCJyaWdodFwiOm88PXMvMj9jPVwibGVmdFwiOm8+PWEtcy8yJiYoYz1cInJpZ2h0XCIpLGZ1bmN0aW9uKHQsZSxpLG4pe2NvbnN0e3g6byx3aWR0aDpzfT1uLGE9aS5jYXJldFNpemUraS5jYXJldFBhZGRpbmc7cmV0dXJuXCJsZWZ0XCI9PT10JiZvK3MrYT5lLndpZHRofHxcInJpZ2h0XCI9PT10JiZvLXMtYTwwfHx2b2lkIDB9KGMsdCxlLGkpJiYoYz1cImNlbnRlclwiKSxjfWZ1bmN0aW9uIENzKHQsZSxpKXtjb25zdCBuPWUueUFsaWdufHxmdW5jdGlvbih0LGUpe2NvbnN0e3k6aSxoZWlnaHQ6bn09ZTtyZXR1cm4gaTxuLzI/XCJ0b3BcIjppPnQuaGVpZ2h0LW4vMj9cImJvdHRvbVwiOlwiY2VudGVyXCJ9KHQsaSk7cmV0dXJue3hBbGlnbjplLnhBbGlnbnx8RHModCxlLGksbikseUFsaWduOm59fWZ1bmN0aW9uIE9zKHQsZSxpLG4pe2NvbnN0e2NhcmV0U2l6ZTpvLGNhcmV0UGFkZGluZzpzLGNvcm5lclJhZGl1czphfT10LHt4QWxpZ246cix5QWxpZ246bH09aSxjPW8rcyxoPWErcztsZXQgZD1mdW5jdGlvbih0LGUpe2xldHt4Omksd2lkdGg6bn09dDtyZXR1cm5cInJpZ2h0XCI9PT1lP2ktPW46XCJjZW50ZXJcIj09PWUmJihpLT1uLzIpLGl9KGUscik7Y29uc3QgdT1mdW5jdGlvbih0LGUsaSl7bGV0e3k6bixoZWlnaHQ6b309dDtyZXR1cm5cInRvcFwiPT09ZT9uKz1pOm4tPVwiYm90dG9tXCI9PT1lP28raTpvLzIsbn0oZSxsLGMpO3JldHVyblwiY2VudGVyXCI9PT1sP1wibGVmdFwiPT09cj9kKz1jOlwicmlnaHRcIj09PXImJihkLT1jKTpcImxlZnRcIj09PXI/ZC09aDpcInJpZ2h0XCI9PT1yJiYoZCs9aCkse3g6SHQoZCwwLG4ud2lkdGgtZS53aWR0aCkseTpIdCh1LDAsbi5oZWlnaHQtZS5oZWlnaHQpfX1mdW5jdGlvbiBUcyh0LGUsaSl7Y29uc3Qgbj1GZShpLnBhZGRpbmcpO3JldHVyblwiY2VudGVyXCI9PT1lP3QueCt0LndpZHRoLzI6XCJyaWdodFwiPT09ZT90LngrdC53aWR0aC1uLnJpZ2h0OnQueCtuLmxlZnR9ZnVuY3Rpb24gQXModCl7cmV0dXJuIE1zKFtdLGtzKHQpKX1mdW5jdGlvbiBMcyh0LGUpe2NvbnN0IGk9ZSYmZS5kYXRhc2V0JiZlLmRhdGFzZXQudG9vbHRpcCYmZS5kYXRhc2V0LnRvb2x0aXAuY2FsbGJhY2tzO3JldHVybiBpP3Qub3ZlcnJpZGUoaSk6dH1jbGFzcyBScyBleHRlbmRzIHppe2NvbnN0cnVjdG9yKHQpe3N1cGVyKCksdGhpcy5vcGFjaXR5PTAsdGhpcy5fYWN0aXZlPVtdLHRoaXMuX2NoYXJ0PXQuX2NoYXJ0LHRoaXMuX2V2ZW50UG9zaXRpb249dm9pZCAwLHRoaXMuX3NpemU9dm9pZCAwLHRoaXMuX2NhY2hlZEFuaW1hdGlvbnM9dm9pZCAwLHRoaXMuX3Rvb2x0aXBJdGVtcz1bXSx0aGlzLiRhbmltYXRpb25zPXZvaWQgMCx0aGlzLiRjb250ZXh0PXZvaWQgMCx0aGlzLm9wdGlvbnM9dC5vcHRpb25zLHRoaXMuZGF0YVBvaW50cz12b2lkIDAsdGhpcy50aXRsZT12b2lkIDAsdGhpcy5iZWZvcmVCb2R5PXZvaWQgMCx0aGlzLmJvZHk9dm9pZCAwLHRoaXMuYWZ0ZXJCb2R5PXZvaWQgMCx0aGlzLmZvb3Rlcj12b2lkIDAsdGhpcy54QWxpZ249dm9pZCAwLHRoaXMueUFsaWduPXZvaWQgMCx0aGlzLng9dm9pZCAwLHRoaXMueT12b2lkIDAsdGhpcy5oZWlnaHQ9dm9pZCAwLHRoaXMud2lkdGg9dm9pZCAwLHRoaXMuY2FyZXRYPXZvaWQgMCx0aGlzLmNhcmV0WT12b2lkIDAsdGhpcy5sYWJlbENvbG9ycz12b2lkIDAsdGhpcy5sYWJlbFBvaW50U3R5bGVzPXZvaWQgMCx0aGlzLmxhYmVsVGV4dENvbG9ycz12b2lkIDB9aW5pdGlhbGl6ZSh0KXt0aGlzLm9wdGlvbnM9dCx0aGlzLl9jYWNoZWRBbmltYXRpb25zPXZvaWQgMCx0aGlzLiRjb250ZXh0PXZvaWQgMH1fcmVzb2x2ZUFuaW1hdGlvbnMoKXtjb25zdCB0PXRoaXMsZT10Ll9jYWNoZWRBbmltYXRpb25zO2lmKGUpcmV0dXJuIGU7Y29uc3QgaT10Ll9jaGFydCxuPXQub3B0aW9ucy5zZXRDb250ZXh0KHQuZ2V0Q29udGV4dCgpKSxvPW4uZW5hYmxlZCYmaS5vcHRpb25zLmFuaW1hdGlvbiYmbi5hbmltYXRpb25zLHM9bmV3IHdpKHQuX2NoYXJ0LG8pO3JldHVybiBvLl9jYWNoZWFibGUmJih0Ll9jYWNoZWRBbmltYXRpb25zPU9iamVjdC5mcmVlemUocykpLHN9Z2V0Q29udGV4dCgpe2NvbnN0IHQ9dGhpcztyZXR1cm4gdC4kY29udGV4dHx8KHQuJGNvbnRleHQ9KGU9dC5fY2hhcnQuZ2V0Q29udGV4dCgpLGk9dCxuPXQuX3Rvb2x0aXBJdGVtcyxPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoZSkse3Rvb2x0aXA6aSx0b29sdGlwSXRlbXM6bix0eXBlOlwidG9vbHRpcFwifSkpKTt2YXIgZSxpLG59Z2V0VGl0bGUodCxlKXtjb25zdCBpPXRoaXMse2NhbGxiYWNrczpufT1lLG89bi5iZWZvcmVUaXRsZS5hcHBseShpLFt0XSkscz1uLnRpdGxlLmFwcGx5KGksW3RdKSxhPW4uYWZ0ZXJUaXRsZS5hcHBseShpLFt0XSk7bGV0IHI9W107cmV0dXJuIHI9TXMocixrcyhvKSkscj1NcyhyLGtzKHMpKSxyPU1zKHIsa3MoYSkpLHJ9Z2V0QmVmb3JlQm9keSh0LGUpe3JldHVybiBBcyhlLmNhbGxiYWNrcy5iZWZvcmVCb2R5LmFwcGx5KHRoaXMsW3RdKSl9Z2V0Qm9keSh0LGUpe2NvbnN0IGk9dGhpcyx7Y2FsbGJhY2tzOm59PWUsbz1bXTtyZXR1cm4gSih0LCh0PT57Y29uc3QgZT17YmVmb3JlOltdLGxpbmVzOltdLGFmdGVyOltdfSxzPUxzKG4sdCk7TXMoZS5iZWZvcmUsa3Mocy5iZWZvcmVMYWJlbC5jYWxsKGksdCkpKSxNcyhlLmxpbmVzLHMubGFiZWwuY2FsbChpLHQpKSxNcyhlLmFmdGVyLGtzKHMuYWZ0ZXJMYWJlbC5jYWxsKGksdCkpKSxvLnB1c2goZSl9KSksb31nZXRBZnRlckJvZHkodCxlKXtyZXR1cm4gQXMoZS5jYWxsYmFja3MuYWZ0ZXJCb2R5LmFwcGx5KHRoaXMsW3RdKSl9Z2V0Rm9vdGVyKHQsZSl7Y29uc3QgaT10aGlzLHtjYWxsYmFja3M6bn09ZSxvPW4uYmVmb3JlRm9vdGVyLmFwcGx5KGksW3RdKSxzPW4uZm9vdGVyLmFwcGx5KGksW3RdKSxhPW4uYWZ0ZXJGb290ZXIuYXBwbHkoaSxbdF0pO2xldCByPVtdO3JldHVybiByPU1zKHIsa3MobykpLHI9TXMocixrcyhzKSkscj1NcyhyLGtzKGEpKSxyfV9jcmVhdGVJdGVtcyh0KXtjb25zdCBlPXRoaXMsaT1lLl9hY3RpdmUsbj1lLl9jaGFydC5kYXRhLG89W10scz1bXSxhPVtdO2xldCByLGwsYz1bXTtmb3Iocj0wLGw9aS5sZW5ndGg7cjxsOysrciljLnB1c2goU3MoZS5fY2hhcnQsaVtyXSkpO3JldHVybiB0LmZpbHRlciYmKGM9Yy5maWx0ZXIoKChlLGksbyk9PnQuZmlsdGVyKGUsaSxvLG4pKSkpLHQuaXRlbVNvcnQmJihjPWMuc29ydCgoKGUsaSk9PnQuaXRlbVNvcnQoZSxpLG4pKSkpLEooYywoaT0+e2NvbnN0IG49THModC5jYWxsYmFja3MsaSk7by5wdXNoKG4ubGFiZWxDb2xvci5jYWxsKGUsaSkpLHMucHVzaChuLmxhYmVsUG9pbnRTdHlsZS5jYWxsKGUsaSkpLGEucHVzaChuLmxhYmVsVGV4dENvbG9yLmNhbGwoZSxpKSl9KSksZS5sYWJlbENvbG9ycz1vLGUubGFiZWxQb2ludFN0eWxlcz1zLGUubGFiZWxUZXh0Q29sb3JzPWEsZS5kYXRhUG9pbnRzPWMsY311cGRhdGUodCxlKXtjb25zdCBpPXRoaXMsbj1pLm9wdGlvbnMuc2V0Q29udGV4dChpLmdldENvbnRleHQoKSksbz1pLl9hY3RpdmU7bGV0IHMsYT1bXTtpZihvLmxlbmd0aCl7Y29uc3QgdD13c1tuLnBvc2l0aW9uXS5jYWxsKGksbyxpLl9ldmVudFBvc2l0aW9uKTthPWkuX2NyZWF0ZUl0ZW1zKG4pLGkudGl0bGU9aS5nZXRUaXRsZShhLG4pLGkuYmVmb3JlQm9keT1pLmdldEJlZm9yZUJvZHkoYSxuKSxpLmJvZHk9aS5nZXRCb2R5KGEsbiksaS5hZnRlckJvZHk9aS5nZXRBZnRlckJvZHkoYSxuKSxpLmZvb3Rlcj1pLmdldEZvb3RlcihhLG4pO2NvbnN0IGU9aS5fc2l6ZT1QcyhpLG4pLHI9T2JqZWN0LmFzc2lnbih7fSx0LGUpLGw9Q3MoaS5fY2hhcnQsbixyKSxjPU9zKG4scixsLGkuX2NoYXJ0KTtpLnhBbGlnbj1sLnhBbGlnbixpLnlBbGlnbj1sLnlBbGlnbixzPXtvcGFjaXR5OjEseDpjLngseTpjLnksd2lkdGg6ZS53aWR0aCxoZWlnaHQ6ZS5oZWlnaHQsY2FyZXRYOnQueCxjYXJldFk6dC55fX1lbHNlIDAhPT1pLm9wYWNpdHkmJihzPXtvcGFjaXR5OjB9KTtpLl90b29sdGlwSXRlbXM9YSxpLiRjb250ZXh0PXZvaWQgMCxzJiZpLl9yZXNvbHZlQW5pbWF0aW9ucygpLnVwZGF0ZShpLHMpLHQmJm4uZXh0ZXJuYWwmJm4uZXh0ZXJuYWwuY2FsbChpLHtjaGFydDppLl9jaGFydCx0b29sdGlwOmkscmVwbGF5OmV9KX1kcmF3Q2FyZXQodCxlLGksbil7Y29uc3Qgbz10aGlzLmdldENhcmV0UG9zaXRpb24odCxpLG4pO2UubGluZVRvKG8ueDEsby55MSksZS5saW5lVG8oby54MixvLnkyKSxlLmxpbmVUbyhvLngzLG8ueTMpfWdldENhcmV0UG9zaXRpb24odCxlLGkpe2NvbnN0e3hBbGlnbjpuLHlBbGlnbjpvfT10aGlzLHtjb3JuZXJSYWRpdXM6cyxjYXJldFNpemU6YX09aSx7eDpyLHk6bH09dCx7d2lkdGg6YyxoZWlnaHQ6aH09ZTtsZXQgZCx1LGYsZyxwLG07cmV0dXJuXCJjZW50ZXJcIj09PW8/KHA9bCtoLzIsXCJsZWZ0XCI9PT1uPyhkPXIsdT1kLWEsZz1wK2EsbT1wLWEpOihkPXIrYyx1PWQrYSxnPXAtYSxtPXArYSksZj1kKToodT1cImxlZnRcIj09PW4/citzK2E6XCJyaWdodFwiPT09bj9yK2Mtcy1hOnRoaXMuY2FyZXRYLFwidG9wXCI9PT1vPyhnPWwscD1nLWEsZD11LWEsZj11K2EpOihnPWwraCxwPWcrYSxkPXUrYSxmPXUtYSksbT1nKSx7eDE6ZCx4Mjp1LHgzOmYseTE6Zyx5MjpwLHkzOm19fWRyYXdUaXRsZSh0LGUsaSl7Y29uc3Qgbj10aGlzLG89bi50aXRsZSxzPW8ubGVuZ3RoO2xldCBhLHIsbDtpZihzKXtjb25zdCBjPV9uKGkucnRsLG4ueCxuLndpZHRoKTtmb3IodC54PVRzKG4saS50aXRsZUFsaWduLGkpLGUudGV4dEFsaWduPWMudGV4dEFsaWduKGkudGl0bGVBbGlnbiksZS50ZXh0QmFzZWxpbmU9XCJtaWRkbGVcIixhPUJlKGkudGl0bGVGb250KSxyPWkudGl0bGVTcGFjaW5nLGUuZmlsbFN0eWxlPWkudGl0bGVDb2xvcixlLmZvbnQ9YS5zdHJpbmcsbD0wO2w8czsrK2wpZS5maWxsVGV4dChvW2xdLGMueCh0LngpLHQueSthLmxpbmVIZWlnaHQvMiksdC55Kz1hLmxpbmVIZWlnaHQrcixsKzE9PT1zJiYodC55Kz1pLnRpdGxlTWFyZ2luQm90dG9tLXIpfX1fZHJhd0NvbG9yQm94KHQsZSxpLG4sbyl7Y29uc3Qgcz10aGlzLGE9cy5sYWJlbENvbG9yc1tpXSxyPXMubGFiZWxQb2ludFN0eWxlc1tpXSx7Ym94SGVpZ2h0OmwsYm94V2lkdGg6Y309byxoPUJlKG8uYm9keUZvbnQpLGQ9VHMocyxcImxlZnRcIixvKSx1PW4ueChkKSxmPWw8aC5saW5lSGVpZ2h0PyhoLmxpbmVIZWlnaHQtbCkvMjowLGc9ZS55K2Y7aWYoby51c2VQb2ludFN0eWxlKXtjb25zdCBlPXtyYWRpdXM6TWF0aC5taW4oYyxsKS8yLHBvaW50U3R5bGU6ci5wb2ludFN0eWxlLHJvdGF0aW9uOnIucm90YXRpb24sYm9yZGVyV2lkdGg6MX0saT1uLmxlZnRGb3JMdHIodSxjKStjLzIscz1nK2wvMjt0LnN0cm9rZVN0eWxlPW8ubXVsdGlLZXlCYWNrZ3JvdW5kLHQuZmlsbFN0eWxlPW8ubXVsdGlLZXlCYWNrZ3JvdW5kLEt0KHQsZSxpLHMpLHQuc3Ryb2tlU3R5bGU9YS5ib3JkZXJDb2xvcix0LmZpbGxTdHlsZT1hLmJhY2tncm91bmRDb2xvcixLdCh0LGUsaSxzKX1lbHNle3QubGluZVdpZHRoPWEuYm9yZGVyV2lkdGh8fDEsdC5zdHJva2VTdHlsZT1hLmJvcmRlckNvbG9yLHQuc2V0TGluZURhc2goYS5ib3JkZXJEYXNofHxbXSksdC5saW5lRGFzaE9mZnNldD1hLmJvcmRlckRhc2hPZmZzZXR8fDA7Y29uc3QgZT1uLmxlZnRGb3JMdHIodSxjKSxpPW4ubGVmdEZvckx0cihuLnhQbHVzKHUsMSksYy0yKSxzPUllKGEuYm9yZGVyUmFkaXVzKTtPYmplY3QudmFsdWVzKHMpLnNvbWUoKHQ9PjAhPT10KSk/KHQuYmVnaW5QYXRoKCksdC5maWxsU3R5bGU9by5tdWx0aUtleUJhY2tncm91bmQsbmUodCx7eDplLHk6Zyx3OmMsaDpsLHJhZGl1czpzfSksdC5maWxsKCksdC5zdHJva2UoKSx0LmZpbGxTdHlsZT1hLmJhY2tncm91bmRDb2xvcix0LmJlZ2luUGF0aCgpLG5lKHQse3g6aSx5OmcrMSx3OmMtMixoOmwtMixyYWRpdXM6c30pLHQuZmlsbCgpKToodC5maWxsU3R5bGU9by5tdWx0aUtleUJhY2tncm91bmQsdC5maWxsUmVjdChlLGcsYyxsKSx0LnN0cm9rZVJlY3QoZSxnLGMsbCksdC5maWxsU3R5bGU9YS5iYWNrZ3JvdW5kQ29sb3IsdC5maWxsUmVjdChpLGcrMSxjLTIsbC0yKSl9dC5maWxsU3R5bGU9cy5sYWJlbFRleHRDb2xvcnNbaV19ZHJhd0JvZHkodCxlLGkpe2NvbnN0IG49dGhpcyx7Ym9keTpvfT1uLHtib2R5U3BhY2luZzpzLGJvZHlBbGlnbjphLGRpc3BsYXlDb2xvcnM6cixib3hIZWlnaHQ6bCxib3hXaWR0aDpjfT1pLGg9QmUoaS5ib2R5Rm9udCk7bGV0IGQ9aC5saW5lSGVpZ2h0LHU9MDtjb25zdCBmPV9uKGkucnRsLG4ueCxuLndpZHRoKSxnPWZ1bmN0aW9uKGkpe2UuZmlsbFRleHQoaSxmLngodC54K3UpLHQueStkLzIpLHQueSs9ZCtzfSxwPWYudGV4dEFsaWduKGEpO2xldCBtLHgsYixfLHksdix3O2ZvcihlLnRleHRBbGlnbj1hLGUudGV4dEJhc2VsaW5lPVwibWlkZGxlXCIsZS5mb250PWguc3RyaW5nLHQueD1UcyhuLHAsaSksZS5maWxsU3R5bGU9aS5ib2R5Q29sb3IsSihuLmJlZm9yZUJvZHksZyksdT1yJiZcInJpZ2h0XCIhPT1wP1wiY2VudGVyXCI9PT1hP2MvMisxOmMrMjowLF89MCx2PW8ubGVuZ3RoO188djsrK18pe2ZvcihtPW9bX10seD1uLmxhYmVsVGV4dENvbG9yc1tfXSxlLmZpbGxTdHlsZT14LEoobS5iZWZvcmUsZyksYj1tLmxpbmVzLHImJmIubGVuZ3RoJiYobi5fZHJhd0NvbG9yQm94KGUsdCxfLGYsaSksZD1NYXRoLm1heChoLmxpbmVIZWlnaHQsbCkpLHk9MCx3PWIubGVuZ3RoO3k8dzsrK3kpZyhiW3ldKSxkPWgubGluZUhlaWdodDtKKG0uYWZ0ZXIsZyl9dT0wLGQ9aC5saW5lSGVpZ2h0LEoobi5hZnRlckJvZHksZyksdC55LT1zfWRyYXdGb290ZXIodCxlLGkpe2NvbnN0IG49dGhpcyxvPW4uZm9vdGVyLHM9by5sZW5ndGg7bGV0IGEscjtpZihzKXtjb25zdCBsPV9uKGkucnRsLG4ueCxuLndpZHRoKTtmb3IodC54PVRzKG4saS5mb290ZXJBbGlnbixpKSx0LnkrPWkuZm9vdGVyTWFyZ2luVG9wLGUudGV4dEFsaWduPWwudGV4dEFsaWduKGkuZm9vdGVyQWxpZ24pLGUudGV4dEJhc2VsaW5lPVwibWlkZGxlXCIsYT1CZShpLmZvb3RlckZvbnQpLGUuZmlsbFN0eWxlPWkuZm9vdGVyQ29sb3IsZS5mb250PWEuc3RyaW5nLHI9MDtyPHM7KytyKWUuZmlsbFRleHQob1tyXSxsLngodC54KSx0LnkrYS5saW5lSGVpZ2h0LzIpLHQueSs9YS5saW5lSGVpZ2h0K2kuZm9vdGVyU3BhY2luZ319ZHJhd0JhY2tncm91bmQodCxlLGksbil7Y29uc3R7eEFsaWduOm8seUFsaWduOnN9PXRoaXMse3g6YSx5OnJ9PXQse3dpZHRoOmwsaGVpZ2h0OmN9PWksaD1uLmNvcm5lclJhZGl1cztlLmZpbGxTdHlsZT1uLmJhY2tncm91bmRDb2xvcixlLnN0cm9rZVN0eWxlPW4uYm9yZGVyQ29sb3IsZS5saW5lV2lkdGg9bi5ib3JkZXJXaWR0aCxlLmJlZ2luUGF0aCgpLGUubW92ZVRvKGEraCxyKSxcInRvcFwiPT09cyYmdGhpcy5kcmF3Q2FyZXQodCxlLGksbiksZS5saW5lVG8oYStsLWgsciksZS5xdWFkcmF0aWNDdXJ2ZVRvKGErbCxyLGErbCxyK2gpLFwiY2VudGVyXCI9PT1zJiZcInJpZ2h0XCI9PT1vJiZ0aGlzLmRyYXdDYXJldCh0LGUsaSxuKSxlLmxpbmVUbyhhK2wscitjLWgpLGUucXVhZHJhdGljQ3VydmVUbyhhK2wscitjLGErbC1oLHIrYyksXCJib3R0b21cIj09PXMmJnRoaXMuZHJhd0NhcmV0KHQsZSxpLG4pLGUubGluZVRvKGEraCxyK2MpLGUucXVhZHJhdGljQ3VydmVUbyhhLHIrYyxhLHIrYy1oKSxcImNlbnRlclwiPT09cyYmXCJsZWZ0XCI9PT1vJiZ0aGlzLmRyYXdDYXJldCh0LGUsaSxuKSxlLmxpbmVUbyhhLHIraCksZS5xdWFkcmF0aWNDdXJ2ZVRvKGEscixhK2gsciksZS5jbG9zZVBhdGgoKSxlLmZpbGwoKSxuLmJvcmRlcldpZHRoPjAmJmUuc3Ryb2tlKCl9X3VwZGF0ZUFuaW1hdGlvblRhcmdldCh0KXtjb25zdCBlPXRoaXMsaT1lLl9jaGFydCxuPWUuJGFuaW1hdGlvbnMsbz1uJiZuLngscz1uJiZuLnk7aWYob3x8cyl7Y29uc3Qgbj13c1t0LnBvc2l0aW9uXS5jYWxsKGUsZS5fYWN0aXZlLGUuX2V2ZW50UG9zaXRpb24pO2lmKCFuKXJldHVybjtjb25zdCBhPWUuX3NpemU9UHMoZSx0KSxyPU9iamVjdC5hc3NpZ24oe30sbixlLl9zaXplKSxsPUNzKGksdCxyKSxjPU9zKHQscixsLGkpO28uX3RvPT09Yy54JiZzLl90bz09PWMueXx8KGUueEFsaWduPWwueEFsaWduLGUueUFsaWduPWwueUFsaWduLGUud2lkdGg9YS53aWR0aCxlLmhlaWdodD1hLmhlaWdodCxlLmNhcmV0WD1uLngsZS5jYXJldFk9bi55LGUuX3Jlc29sdmVBbmltYXRpb25zKCkudXBkYXRlKGUsYykpfX1kcmF3KHQpe2NvbnN0IGU9dGhpcyxpPWUub3B0aW9ucy5zZXRDb250ZXh0KGUuZ2V0Q29udGV4dCgpKTtsZXQgbj1lLm9wYWNpdHk7aWYoIW4pcmV0dXJuO2UuX3VwZGF0ZUFuaW1hdGlvblRhcmdldChpKTtjb25zdCBvPXt3aWR0aDplLndpZHRoLGhlaWdodDplLmhlaWdodH0scz17eDplLngseTplLnl9O249TWF0aC5hYnMobik8LjAwMT8wOm47Y29uc3QgYT1GZShpLnBhZGRpbmcpLHI9ZS50aXRsZS5sZW5ndGh8fGUuYmVmb3JlQm9keS5sZW5ndGh8fGUuYm9keS5sZW5ndGh8fGUuYWZ0ZXJCb2R5Lmxlbmd0aHx8ZS5mb290ZXIubGVuZ3RoO2kuZW5hYmxlZCYmciYmKHQuc2F2ZSgpLHQuZ2xvYmFsQWxwaGE9bixlLmRyYXdCYWNrZ3JvdW5kKHMsdCxvLGkpLHluKHQsaS50ZXh0RGlyZWN0aW9uKSxzLnkrPWEudG9wLGUuZHJhd1RpdGxlKHMsdCxpKSxlLmRyYXdCb2R5KHMsdCxpKSxlLmRyYXdGb290ZXIocyx0LGkpLHZuKHQsaS50ZXh0RGlyZWN0aW9uKSx0LnJlc3RvcmUoKSl9Z2V0QWN0aXZlRWxlbWVudHMoKXtyZXR1cm4gdGhpcy5fYWN0aXZlfHxbXX1zZXRBY3RpdmVFbGVtZW50cyh0LGUpe2NvbnN0IGk9dGhpcyxuPWkuX2FjdGl2ZSxvPXQubWFwKCgoe2RhdGFzZXRJbmRleDp0LGluZGV4OmV9KT0+e2NvbnN0IG49aS5fY2hhcnQuZ2V0RGF0YXNldE1ldGEodCk7aWYoIW4pdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgYSBkYXRhc2V0IGF0IGluZGV4IFwiK3QpO3JldHVybntkYXRhc2V0SW5kZXg6dCxlbGVtZW50Om4uZGF0YVtlXSxpbmRleDplfX0pKSxzPSF0dChuLG8pLGE9aS5fcG9zaXRpb25DaGFuZ2VkKG8sZSk7KHN8fGEpJiYoaS5fYWN0aXZlPW8saS5fZXZlbnRQb3NpdGlvbj1lLGkudXBkYXRlKCEwKSl9aGFuZGxlRXZlbnQodCxlKXtjb25zdCBpPXRoaXMsbj1pLm9wdGlvbnMsbz1pLl9hY3RpdmV8fFtdO2xldCBzPSExLGE9W107XCJtb3VzZW91dFwiIT09dC50eXBlJiYoYT1pLl9jaGFydC5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKHQsbi5tb2RlLG4sZSksbi5yZXZlcnNlJiZhLnJldmVyc2UoKSk7Y29uc3Qgcj1pLl9wb3NpdGlvbkNoYW5nZWQoYSx0KTtyZXR1cm4gcz1lfHwhdHQoYSxvKXx8cixzJiYoaS5fYWN0aXZlPWEsKG4uZW5hYmxlZHx8bi5leHRlcm5hbCkmJihpLl9ldmVudFBvc2l0aW9uPXt4OnQueCx5OnQueX0saS51cGRhdGUoITAsZSkpKSxzfV9wb3NpdGlvbkNoYW5nZWQodCxlKXtjb25zdHtjYXJldFg6aSxjYXJldFk6bixvcHRpb25zOm99PXRoaXMscz13c1tvLnBvc2l0aW9uXS5jYWxsKHRoaXMsdCxlKTtyZXR1cm4hMSE9PXMmJihpIT09cy54fHxuIT09cy55KX19UnMucG9zaXRpb25lcnM9d3M7dmFyIEVzPXtpZDpcInRvb2x0aXBcIixfZWxlbWVudDpScyxwb3NpdGlvbmVyczp3cyxhZnRlckluaXQodCxlLGkpe2kmJih0LnRvb2x0aXA9bmV3IFJzKHtfY2hhcnQ6dCxvcHRpb25zOml9KSl9LGJlZm9yZVVwZGF0ZSh0LGUsaSl7dC50b29sdGlwJiZ0LnRvb2x0aXAuaW5pdGlhbGl6ZShpKX0scmVzZXQodCxlLGkpe3QudG9vbHRpcCYmdC50b29sdGlwLmluaXRpYWxpemUoaSl9LGFmdGVyRHJhdyh0KXtjb25zdCBlPXQudG9vbHRpcCxpPXt0b29sdGlwOmV9OyExIT09dC5ub3RpZnlQbHVnaW5zKFwiYmVmb3JlVG9vbHRpcERyYXdcIixpKSYmKGUmJmUuZHJhdyh0LmN0eCksdC5ub3RpZnlQbHVnaW5zKFwiYWZ0ZXJUb29sdGlwRHJhd1wiLGkpKX0sYWZ0ZXJFdmVudCh0LGUpe2lmKHQudG9vbHRpcCl7Y29uc3QgaT1lLnJlcGxheTt0LnRvb2x0aXAuaGFuZGxlRXZlbnQoZS5ldmVudCxpKSYmKGUuY2hhbmdlZD0hMCl9fSxkZWZhdWx0czp7ZW5hYmxlZDohMCxleHRlcm5hbDpudWxsLHBvc2l0aW9uOlwiYXZlcmFnZVwiLGJhY2tncm91bmRDb2xvcjpcInJnYmEoMCwwLDAsMC44KVwiLHRpdGxlQ29sb3I6XCIjZmZmXCIsdGl0bGVGb250Ont3ZWlnaHQ6XCJib2xkXCJ9LHRpdGxlU3BhY2luZzoyLHRpdGxlTWFyZ2luQm90dG9tOjYsdGl0bGVBbGlnbjpcImxlZnRcIixib2R5Q29sb3I6XCIjZmZmXCIsYm9keVNwYWNpbmc6Mixib2R5Rm9udDp7fSxib2R5QWxpZ246XCJsZWZ0XCIsZm9vdGVyQ29sb3I6XCIjZmZmXCIsZm9vdGVyU3BhY2luZzoyLGZvb3Rlck1hcmdpblRvcDo2LGZvb3RlckZvbnQ6e3dlaWdodDpcImJvbGRcIn0sZm9vdGVyQWxpZ246XCJsZWZ0XCIscGFkZGluZzo2LGNhcmV0UGFkZGluZzoyLGNhcmV0U2l6ZTo1LGNvcm5lclJhZGl1czo2LGJveEhlaWdodDoodCxlKT0+ZS5ib2R5Rm9udC5zaXplLGJveFdpZHRoOih0LGUpPT5lLmJvZHlGb250LnNpemUsbXVsdGlLZXlCYWNrZ3JvdW5kOlwiI2ZmZlwiLGRpc3BsYXlDb2xvcnM6ITAsYm9yZGVyQ29sb3I6XCJyZ2JhKDAsMCwwLDApXCIsYm9yZGVyV2lkdGg6MCxhbmltYXRpb246e2R1cmF0aW9uOjQwMCxlYXNpbmc6XCJlYXNlT3V0UXVhcnRcIn0sYW5pbWF0aW9uczp7bnVtYmVyczp7dHlwZTpcIm51bWJlclwiLHByb3BlcnRpZXM6W1wieFwiLFwieVwiLFwid2lkdGhcIixcImhlaWdodFwiLFwiY2FyZXRYXCIsXCJjYXJldFlcIl19LG9wYWNpdHk6e2Vhc2luZzpcImxpbmVhclwiLGR1cmF0aW9uOjIwMH19LGNhbGxiYWNrczp7YmVmb3JlVGl0bGU6SCx0aXRsZSh0KXtpZih0Lmxlbmd0aD4wKXtjb25zdCBlPXRbMF0saT1lLmNoYXJ0LmRhdGEubGFiZWxzLG49aT9pLmxlbmd0aDowO2lmKHRoaXMmJnRoaXMub3B0aW9ucyYmXCJkYXRhc2V0XCI9PT10aGlzLm9wdGlvbnMubW9kZSlyZXR1cm4gZS5kYXRhc2V0LmxhYmVsfHxcIlwiO2lmKGUubGFiZWwpcmV0dXJuIGUubGFiZWw7aWYobj4wJiZlLmRhdGFJbmRleDxuKXJldHVybiBpW2UuZGF0YUluZGV4XX1yZXR1cm5cIlwifSxhZnRlclRpdGxlOkgsYmVmb3JlQm9keTpILGJlZm9yZUxhYmVsOkgsbGFiZWwodCl7aWYodGhpcyYmdGhpcy5vcHRpb25zJiZcImRhdGFzZXRcIj09PXRoaXMub3B0aW9ucy5tb2RlKXJldHVybiB0LmxhYmVsK1wiOiBcIit0LmZvcm1hdHRlZFZhbHVlfHx0LmZvcm1hdHRlZFZhbHVlO2xldCBlPXQuZGF0YXNldC5sYWJlbHx8XCJcIjtlJiYoZSs9XCI6IFwiKTtjb25zdCBpPXQuZm9ybWF0dGVkVmFsdWU7cmV0dXJuICQoaSl8fChlKz1pKSxlfSxsYWJlbENvbG9yKHQpe2NvbnN0IGU9dC5jaGFydC5nZXREYXRhc2V0TWV0YSh0LmRhdGFzZXRJbmRleCkuY29udHJvbGxlci5nZXRTdHlsZSh0LmRhdGFJbmRleCk7cmV0dXJue2JvcmRlckNvbG9yOmUuYm9yZGVyQ29sb3IsYmFja2dyb3VuZENvbG9yOmUuYmFja2dyb3VuZENvbG9yLGJvcmRlcldpZHRoOmUuYm9yZGVyV2lkdGgsYm9yZGVyRGFzaDplLmJvcmRlckRhc2gsYm9yZGVyRGFzaE9mZnNldDplLmJvcmRlckRhc2hPZmZzZXQsYm9yZGVyUmFkaXVzOjB9fSxsYWJlbFRleHRDb2xvcigpe3JldHVybiB0aGlzLm9wdGlvbnMuYm9keUNvbG9yfSxsYWJlbFBvaW50U3R5bGUodCl7Y29uc3QgZT10LmNoYXJ0LmdldERhdGFzZXRNZXRhKHQuZGF0YXNldEluZGV4KS5jb250cm9sbGVyLmdldFN0eWxlKHQuZGF0YUluZGV4KTtyZXR1cm57cG9pbnRTdHlsZTplLnBvaW50U3R5bGUscm90YXRpb246ZS5yb3RhdGlvbn19LGFmdGVyTGFiZWw6SCxhZnRlckJvZHk6SCxiZWZvcmVGb290ZXI6SCxmb290ZXI6SCxhZnRlckZvb3RlcjpIfX0sZGVmYXVsdFJvdXRlczp7Ym9keUZvbnQ6XCJmb250XCIsZm9vdGVyRm9udDpcImZvbnRcIix0aXRsZUZvbnQ6XCJmb250XCJ9LGRlc2NyaXB0b3JzOntfc2NyaXB0YWJsZTp0PT5cImZpbHRlclwiIT09dCYmXCJpdGVtU29ydFwiIT09dCYmXCJleHRlcm5hbFwiIT09dCxfaW5kZXhhYmxlOiExLGNhbGxiYWNrczp7X3NjcmlwdGFibGU6ITEsX2luZGV4YWJsZTohMX0sYW5pbWF0aW9uOntfZmFsbGJhY2s6ITF9LGFuaW1hdGlvbnM6e19mYWxsYmFjazpcImFuaW1hdGlvblwifX0sYWRkaXRpb25hbE9wdGlvblNjb3BlczpbXCJpbnRlcmFjdGlvblwiXX0senM9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsRGVjaW1hdGlvbjpHbyxGaWxsZXI6Z3MsTGVnZW5kOnhzLFN1YlRpdGxlOnZzLFRpdGxlOl9zLFRvb2x0aXA6RXN9KTtmdW5jdGlvbiBJcyh0LGUsaSl7Y29uc3Qgbj10LmluZGV4T2YoZSk7aWYoLTE9PT1uKXJldHVybigodCxlLGkpPT5cInN0cmluZ1wiPT10eXBlb2YgZT90LnB1c2goZSktMTppc05hTihlKT9udWxsOmkpKHQsZSxpKTtyZXR1cm4gbiE9PXQubGFzdEluZGV4T2YoZSk/aTpufWNsYXNzIEZzIGV4dGVuZHMgcWl7Y29uc3RydWN0b3IodCl7c3VwZXIodCksdGhpcy5fc3RhcnRWYWx1ZT12b2lkIDAsdGhpcy5fdmFsdWVSYW5nZT0wfXBhcnNlKHQsZSl7aWYoJCh0KSlyZXR1cm4gbnVsbDtjb25zdCBpPXRoaXMuZ2V0TGFiZWxzKCk7cmV0dXJuKCh0LGUpPT5udWxsPT09dD9udWxsOkh0KE1hdGgucm91bmQodCksMCxlKSkoZT1pc0Zpbml0ZShlKSYmaVtlXT09PXQ/ZTpJcyhpLHQsSyhlLHQpKSxpLmxlbmd0aC0xKX1kZXRlcm1pbmVEYXRhTGltaXRzKCl7Y29uc3QgdD10aGlzLHttaW5EZWZpbmVkOmUsbWF4RGVmaW5lZDppfT10LmdldFVzZXJCb3VuZHMoKTtsZXR7bWluOm4sbWF4Om99PXQuZ2V0TWluTWF4KCEwKTtcInRpY2tzXCI9PT10Lm9wdGlvbnMuYm91bmRzJiYoZXx8KG49MCksaXx8KG89dC5nZXRMYWJlbHMoKS5sZW5ndGgtMSkpLHQubWluPW4sdC5tYXg9b31idWlsZFRpY2tzKCl7Y29uc3QgdD10aGlzLGU9dC5taW4saT10Lm1heCxuPXQub3B0aW9ucy5vZmZzZXQsbz1bXTtsZXQgcz10LmdldExhYmVscygpO3M9MD09PWUmJmk9PT1zLmxlbmd0aC0xP3M6cy5zbGljZShlLGkrMSksdC5fdmFsdWVSYW5nZT1NYXRoLm1heChzLmxlbmd0aC0obj8wOjEpLDEpLHQuX3N0YXJ0VmFsdWU9dC5taW4tKG4/LjU6MCk7Zm9yKGxldCB0PWU7dDw9aTt0Kyspby5wdXNoKHt2YWx1ZTp0fSk7cmV0dXJuIG99Z2V0TGFiZWxGb3JWYWx1ZSh0KXtjb25zdCBlPXRoaXMuZ2V0TGFiZWxzKCk7cmV0dXJuIHQ+PTAmJnQ8ZS5sZW5ndGg/ZVt0XTp0fWNvbmZpZ3VyZSgpe2NvbnN0IHQ9dGhpcztzdXBlci5jb25maWd1cmUoKSx0LmlzSG9yaXpvbnRhbCgpfHwodC5fcmV2ZXJzZVBpeGVscz0hdC5fcmV2ZXJzZVBpeGVscyl9Z2V0UGl4ZWxGb3JWYWx1ZSh0KXtjb25zdCBlPXRoaXM7cmV0dXJuXCJudW1iZXJcIiE9dHlwZW9mIHQmJih0PWUucGFyc2UodCkpLG51bGw9PT10P05hTjplLmdldFBpeGVsRm9yRGVjaW1hbCgodC1lLl9zdGFydFZhbHVlKS9lLl92YWx1ZVJhbmdlKX1nZXRQaXhlbEZvclRpY2sodCl7Y29uc3QgZT10aGlzLnRpY2tzO3JldHVybiB0PDB8fHQ+ZS5sZW5ndGgtMT9udWxsOnRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZShlW3RdLnZhbHVlKX1nZXRWYWx1ZUZvclBpeGVsKHQpe2NvbnN0IGU9dGhpcztyZXR1cm4gTWF0aC5yb3VuZChlLl9zdGFydFZhbHVlK2UuZ2V0RGVjaW1hbEZvclBpeGVsKHQpKmUuX3ZhbHVlUmFuZ2UpfWdldEJhc2VQaXhlbCgpe3JldHVybiB0aGlzLmJvdHRvbX19ZnVuY3Rpb24gQnModCxlLHtob3Jpem9udGFsOmksbWluUm90YXRpb246bn0pe2NvbnN0IG89RXQobikscz0oaT9NYXRoLnNpbihvKTpNYXRoLmNvcyhvKSl8fC4wMDEsYT0uNzUqZSooXCJcIit0KS5sZW5ndGg7cmV0dXJuIE1hdGgubWluKGUvcyxhKX1Gcy5pZD1cImNhdGVnb3J5XCIsRnMuZGVmYXVsdHM9e3RpY2tzOntjYWxsYmFjazpGcy5wcm90b3R5cGUuZ2V0TGFiZWxGb3JWYWx1ZX19O2NsYXNzIFZzIGV4dGVuZHMgcWl7Y29uc3RydWN0b3IodCl7c3VwZXIodCksdGhpcy5zdGFydD12b2lkIDAsdGhpcy5lbmQ9dm9pZCAwLHRoaXMuX3N0YXJ0VmFsdWU9dm9pZCAwLHRoaXMuX2VuZFZhbHVlPXZvaWQgMCx0aGlzLl92YWx1ZVJhbmdlPTB9cGFyc2UodCxlKXtyZXR1cm4gJCh0KXx8KFwibnVtYmVyXCI9PXR5cGVvZiB0fHx0IGluc3RhbmNlb2YgTnVtYmVyKSYmIWlzRmluaXRlKCt0KT9udWxsOit0fWhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKXtjb25zdCB0PXRoaXMse2JlZ2luQXRaZXJvOmV9PXQub3B0aW9ucyx7bWluRGVmaW5lZDppLG1heERlZmluZWQ6bn09dC5nZXRVc2VyQm91bmRzKCk7bGV0e21pbjpvLG1heDpzfT10O2NvbnN0IGE9dD0+bz1pP286dCxyPXQ9PnM9bj9zOnQ7aWYoZSl7Y29uc3QgdD1EdChvKSxlPUR0KHMpO3Q8MCYmZTwwP3IoMCk6dD4wJiZlPjAmJmEoMCl9bz09PXMmJihyKHMrMSksZXx8YShvLTEpKSx0Lm1pbj1vLHQubWF4PXN9Z2V0VGlja0xpbWl0KCl7Y29uc3QgdD10aGlzLGU9dC5vcHRpb25zLnRpY2tzO2xldCBpLHttYXhUaWNrc0xpbWl0Om4sc3RlcFNpemU6b309ZTtyZXR1cm4gbz9pPU1hdGguY2VpbCh0Lm1heC9vKS1NYXRoLmZsb29yKHQubWluL28pKzE6KGk9dC5jb21wdXRlVGlja0xpbWl0KCksbj1ufHwxMSksbiYmKGk9TWF0aC5taW4obixpKSksaX1jb21wdXRlVGlja0xpbWl0KCl7cmV0dXJuIE51bWJlci5QT1NJVElWRV9JTkZJTklUWX1idWlsZFRpY2tzKCl7Y29uc3QgdD10aGlzLGU9dC5vcHRpb25zLGk9ZS50aWNrcztsZXQgbj10LmdldFRpY2tMaW1pdCgpO249TWF0aC5tYXgoMixuKTtjb25zdCBvPWZ1bmN0aW9uKHQsZSl7Y29uc3QgaT1bXSx7Ym91bmRzOm4sc3RlcDpvLG1pbjpzLG1heDphLHByZWNpc2lvbjpyLGNvdW50OmwsbWF4VGlja3M6YyxtYXhEaWdpdHM6aCxpbmNsdWRlQm91bmRzOmR9PXQsdT1vfHwxLGY9Yy0xLHttaW46ZyxtYXg6cH09ZSxtPSEkKHMpLHg9ISQoYSksYj0hJChsKSxfPShwLWcpLyhoKzEpO2xldCB5LHYsdyxNLGs9Q3QoKHAtZykvZi91KSp1O2lmKGs8MWUtMTQmJiFtJiYheClyZXR1cm5be3ZhbHVlOmd9LHt2YWx1ZTpwfV07TT1NYXRoLmNlaWwocC9rKS1NYXRoLmZsb29yKGcvayksTT5mJiYoaz1DdChNKmsvZi91KSp1KSwkKHIpfHwoeT1NYXRoLnBvdygxMCxyKSxrPU1hdGguY2VpbChrKnkpL3kpLFwidGlja3NcIj09PW4/KHY9TWF0aC5mbG9vcihnL2spKmssdz1NYXRoLmNlaWwocC9rKSprKToodj1nLHc9cCksbSYmeCYmbyYmTHQoKGEtcykvbyxrLzFlMyk/KE09TWF0aC5yb3VuZChNYXRoLm1pbigoYS1zKS9rLGMpKSxrPShhLXMpL00sdj1zLHc9YSk6Yj8odj1tP3M6dix3PXg/YTp3LE09bC0xLGs9KHctdikvTSk6KE09KHctdikvayxNPUF0KE0sTWF0aC5yb3VuZChNKSxrLzFlMyk/TWF0aC5yb3VuZChNKTpNYXRoLmNlaWwoTSkpO2NvbnN0IFM9TWF0aC5tYXgoSXQoayksSXQodikpO3k9TWF0aC5wb3coMTAsJChyKT9TOnIpLHY9TWF0aC5yb3VuZCh2KnkpL3ksdz1NYXRoLnJvdW5kKHcqeSkveTtsZXQgUD0wO2ZvcihtJiYoZCYmdiE9PXM/KGkucHVzaCh7dmFsdWU6c30pLHY8cyYmUCsrLEF0KE1hdGgucm91bmQoKHYrUCprKSp5KS95LHMsQnMocyxfLHQpKSYmUCsrKTp2PHMmJlArKyk7UDxNOysrUClpLnB1c2goe3ZhbHVlOk1hdGgucm91bmQoKHYrUCprKSp5KS95fSk7cmV0dXJuIHgmJmQmJnchPT1hP0F0KGlbaS5sZW5ndGgtMV0udmFsdWUsYSxCcyhhLF8sdCkpP2lbaS5sZW5ndGgtMV0udmFsdWU9YTppLnB1c2goe3ZhbHVlOmF9KTp4JiZ3IT09YXx8aS5wdXNoKHt2YWx1ZTp3fSksaX0oe21heFRpY2tzOm4sYm91bmRzOmUuYm91bmRzLG1pbjplLm1pbixtYXg6ZS5tYXgscHJlY2lzaW9uOmkucHJlY2lzaW9uLHN0ZXA6aS5zdGVwU2l6ZSxjb3VudDppLmNvdW50LG1heERpZ2l0czp0Ll9tYXhEaWdpdHMoKSxob3Jpem9udGFsOnQuaXNIb3Jpem9udGFsKCksbWluUm90YXRpb246aS5taW5Sb3RhdGlvbnx8MCxpbmNsdWRlQm91bmRzOiExIT09aS5pbmNsdWRlQm91bmRzfSx0Ll9yYW5nZXx8dCk7cmV0dXJuXCJ0aWNrc1wiPT09ZS5ib3VuZHMmJlJ0KG8sdCxcInZhbHVlXCIpLGUucmV2ZXJzZT8oby5yZXZlcnNlKCksdC5zdGFydD10Lm1heCx0LmVuZD10Lm1pbik6KHQuc3RhcnQ9dC5taW4sdC5lbmQ9dC5tYXgpLG99Y29uZmlndXJlKCl7Y29uc3QgdD10aGlzLGU9dC50aWNrcztsZXQgaT10Lm1pbixuPXQubWF4O2lmKHN1cGVyLmNvbmZpZ3VyZSgpLHQub3B0aW9ucy5vZmZzZXQmJmUubGVuZ3RoKXtjb25zdCB0PShuLWkpL01hdGgubWF4KGUubGVuZ3RoLTEsMSkvMjtpLT10LG4rPXR9dC5fc3RhcnRWYWx1ZT1pLHQuX2VuZFZhbHVlPW4sdC5fdmFsdWVSYW5nZT1uLWl9Z2V0TGFiZWxGb3JWYWx1ZSh0KXtyZXR1cm4gRmkodCx0aGlzLmNoYXJ0Lm9wdGlvbnMubG9jYWxlKX19Y2xhc3MgV3MgZXh0ZW5kcyBWc3tkZXRlcm1pbmVEYXRhTGltaXRzKCl7Y29uc3QgdD10aGlzLHttaW46ZSxtYXg6aX09dC5nZXRNaW5NYXgoITApO3QubWluPVgoZSk/ZTowLHQubWF4PVgoaSk/aToxLHQuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpfWNvbXB1dGVUaWNrTGltaXQoKXtjb25zdCB0PXRoaXMsZT10LmlzSG9yaXpvbnRhbCgpLGk9ZT90LndpZHRoOnQuaGVpZ2h0LG49RXQodC5vcHRpb25zLnRpY2tzLm1pblJvdGF0aW9uKSxvPShlP01hdGguc2luKG4pOk1hdGguY29zKG4pKXx8LjAwMSxzPXQuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoMCk7cmV0dXJuIE1hdGguY2VpbChpL01hdGgubWluKDQwLHMubGluZUhlaWdodC9vKSl9Z2V0UGl4ZWxGb3JWYWx1ZSh0KXtyZXR1cm4gbnVsbD09PXQ/TmFOOnRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKCh0LXRoaXMuX3N0YXJ0VmFsdWUpL3RoaXMuX3ZhbHVlUmFuZ2UpfWdldFZhbHVlRm9yUGl4ZWwodCl7cmV0dXJuIHRoaXMuX3N0YXJ0VmFsdWUrdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwodCkqdGhpcy5fdmFsdWVSYW5nZX19ZnVuY3Rpb24gTnModCl7cmV0dXJuIDE9PT10L01hdGgucG93KDEwLE1hdGguZmxvb3IoUHQodCkpKX1Xcy5pZD1cImxpbmVhclwiLFdzLmRlZmF1bHRzPXt0aWNrczp7Y2FsbGJhY2s6VmkuZm9ybWF0dGVycy5udW1lcmljfX07Y2xhc3MgSHMgZXh0ZW5kcyBxaXtjb25zdHJ1Y3Rvcih0KXtzdXBlcih0KSx0aGlzLnN0YXJ0PXZvaWQgMCx0aGlzLmVuZD12b2lkIDAsdGhpcy5fc3RhcnRWYWx1ZT12b2lkIDAsdGhpcy5fdmFsdWVSYW5nZT0wfXBhcnNlKHQsZSl7Y29uc3QgaT1Wcy5wcm90b3R5cGUucGFyc2UuYXBwbHkodGhpcyxbdCxlXSk7aWYoMCE9PWkpcmV0dXJuIFgoaSkmJmk+MD9pOm51bGw7dGhpcy5femVybz0hMH1kZXRlcm1pbmVEYXRhTGltaXRzKCl7Y29uc3QgdD10aGlzLHttaW46ZSxtYXg6aX09dC5nZXRNaW5NYXgoITApO3QubWluPVgoZSk/TWF0aC5tYXgoMCxlKTpudWxsLHQubWF4PVgoaSk/TWF0aC5tYXgoMCxpKTpudWxsLHQub3B0aW9ucy5iZWdpbkF0WmVybyYmKHQuX3plcm89ITApLHQuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpfWhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKXtjb25zdCB0PXRoaXMse21pbkRlZmluZWQ6ZSxtYXhEZWZpbmVkOml9PXQuZ2V0VXNlckJvdW5kcygpO2xldCBuPXQubWluLG89dC5tYXg7Y29uc3Qgcz10PT5uPWU/bjp0LGE9dD0+bz1pP286dCxyPSh0LGUpPT5NYXRoLnBvdygxMCxNYXRoLmZsb29yKFB0KHQpKStlKTtuPT09byYmKG48PTA/KHMoMSksYSgxMCkpOihzKHIobiwtMSkpLGEocihvLDEpKSkpLG48PTAmJnMocihvLC0xKSksbzw9MCYmYShyKG4sMSkpLHQuX3plcm8mJnQubWluIT09dC5fc3VnZ2VzdGVkTWluJiZuPT09cih0Lm1pbiwwKSYmcyhyKG4sLTEpKSx0Lm1pbj1uLHQubWF4PW99YnVpbGRUaWNrcygpe2NvbnN0IHQ9dGhpcyxlPXQub3B0aW9ucyxpPWZ1bmN0aW9uKHQsZSl7Y29uc3QgaT1NYXRoLmZsb29yKFB0KGUubWF4KSksbj1NYXRoLmNlaWwoZS5tYXgvTWF0aC5wb3coMTAsaSkpLG89W107bGV0IHM9cSh0Lm1pbixNYXRoLnBvdygxMCxNYXRoLmZsb29yKFB0KGUubWluKSkpKSxhPU1hdGguZmxvb3IoUHQocykpLHI9TWF0aC5mbG9vcihzL01hdGgucG93KDEwLGEpKSxsPWE8MD9NYXRoLnBvdygxMCxNYXRoLmFicyhhKSk6MTtkb3tvLnB1c2goe3ZhbHVlOnMsbWFqb3I6TnMocyl9KSwrK3IsMTA9PT1yJiYocj0xLCsrYSxsPWE+PTA/MTpsKSxzPU1hdGgucm91bmQocipNYXRoLnBvdygxMCxhKSpsKS9sfXdoaWxlKGE8aXx8YT09PWkmJnI8bik7Y29uc3QgYz1xKHQubWF4LHMpO3JldHVybiBvLnB1c2goe3ZhbHVlOmMsbWFqb3I6TnMocyl9KSxvfSh7bWluOnQuX3VzZXJNaW4sbWF4OnQuX3VzZXJNYXh9LHQpO3JldHVyblwidGlja3NcIj09PWUuYm91bmRzJiZSdChpLHQsXCJ2YWx1ZVwiKSxlLnJldmVyc2U/KGkucmV2ZXJzZSgpLHQuc3RhcnQ9dC5tYXgsdC5lbmQ9dC5taW4pOih0LnN0YXJ0PXQubWluLHQuZW5kPXQubWF4KSxpfWdldExhYmVsRm9yVmFsdWUodCl7cmV0dXJuIHZvaWQgMD09PXQ/XCIwXCI6RmkodCx0aGlzLmNoYXJ0Lm9wdGlvbnMubG9jYWxlKX1jb25maWd1cmUoKXtjb25zdCB0PXRoaXMsZT10Lm1pbjtzdXBlci5jb25maWd1cmUoKSx0Ll9zdGFydFZhbHVlPVB0KGUpLHQuX3ZhbHVlUmFuZ2U9UHQodC5tYXgpLVB0KGUpfWdldFBpeGVsRm9yVmFsdWUodCl7Y29uc3QgZT10aGlzO3JldHVybiB2b2lkIDAhPT10JiYwIT09dHx8KHQ9ZS5taW4pLG51bGw9PT10fHxpc05hTih0KT9OYU46ZS5nZXRQaXhlbEZvckRlY2ltYWwodD09PWUubWluPzA6KFB0KHQpLWUuX3N0YXJ0VmFsdWUpL2UuX3ZhbHVlUmFuZ2UpfWdldFZhbHVlRm9yUGl4ZWwodCl7Y29uc3QgZT10aGlzLGk9ZS5nZXREZWNpbWFsRm9yUGl4ZWwodCk7cmV0dXJuIE1hdGgucG93KDEwLGUuX3N0YXJ0VmFsdWUraSplLl92YWx1ZVJhbmdlKX19ZnVuY3Rpb24ganModCl7Y29uc3QgZT10LnRpY2tzO2lmKGUuZGlzcGxheSYmdC5kaXNwbGF5KXtjb25zdCB0PUZlKGUuYmFja2Ryb3BQYWRkaW5nKTtyZXR1cm4gSyhlLmZvbnQmJmUuZm9udC5zaXplLHh0LmZvbnQuc2l6ZSkrdC5oZWlnaHR9cmV0dXJuIDB9ZnVuY3Rpb24gJHModCxlLGksbixvKXtyZXR1cm4gdD09PW58fHQ9PT1vP3tzdGFydDplLWkvMixlbmQ6ZStpLzJ9OnQ8bnx8dD5vP3tzdGFydDplLWksZW5kOmV9OntzdGFydDplLGVuZDplK2l9fWZ1bmN0aW9uIFlzKHQpe2NvbnN0IGU9e2w6MCxyOnQud2lkdGgsdDowLGI6dC5oZWlnaHQtdC5wYWRkaW5nVG9wfSxpPXt9LG49W10sbz1bXSxzPXQuZ2V0TGFiZWxzKCkubGVuZ3RoO2ZvcihsZXQgYz0wO2M8cztjKyspe2NvbnN0IHM9dC5vcHRpb25zLnBvaW50TGFiZWxzLnNldENvbnRleHQodC5nZXRDb250ZXh0KGMpKTtvW2NdPXMucGFkZGluZztjb25zdCBoPXQuZ2V0UG9pbnRQb3NpdGlvbihjLHQuZHJhd2luZ0FyZWErb1tjXSksZD1CZShzLmZvbnQpLHU9KGE9dC5jdHgscj1kLGw9WShsPXQuX3BvaW50TGFiZWxzW2NdKT9sOltsXSx7dzpVdChhLHIuc3RyaW5nLGwpLGg6bC5sZW5ndGgqci5saW5lSGVpZ2h0fSk7bltjXT11O2NvbnN0IGY9dC5nZXRJbmRleEFuZ2xlKGMpLGc9enQoZikscD0kcyhnLGgueCx1LncsMCwxODApLG09JHMoZyxoLnksdS5oLDkwLDI3MCk7cC5zdGFydDxlLmwmJihlLmw9cC5zdGFydCxpLmw9ZikscC5lbmQ+ZS5yJiYoZS5yPXAuZW5kLGkucj1mKSxtLnN0YXJ0PGUudCYmKGUudD1tLnN0YXJ0LGkudD1mKSxtLmVuZD5lLmImJihlLmI9bS5lbmQsaS5iPWYpfXZhciBhLHIsbDt0Ll9zZXRSZWR1Y3Rpb25zKHQuZHJhd2luZ0FyZWEsZSxpKSx0Ll9wb2ludExhYmVsSXRlbXM9ZnVuY3Rpb24odCxlLGkpe2NvbnN0IG49W10sbz10LmdldExhYmVscygpLmxlbmd0aCxzPXQub3B0aW9ucyxhPWpzKHMpLHI9dC5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShzLnRpY2tzLnJldmVyc2U/dC5taW46dC5tYXgpO2ZvcihsZXQgcz0wO3M8bztzKyspe2NvbnN0IG89MD09PXM/YS8yOjAsbD10LmdldFBvaW50UG9zaXRpb24ocyxyK28raVtzXSksYz16dCh0LmdldEluZGV4QW5nbGUocykpLGg9ZVtzXSxkPXFzKGwueSxoLmgsYyksdT1VcyhjKSxmPVhzKGwueCxoLncsdSk7bi5wdXNoKHt4OmwueCx5OmQsdGV4dEFsaWduOnUsbGVmdDpmLHRvcDpkLHJpZ2h0OmYraC53LGJvdHRvbTpkK2guaH0pfXJldHVybiBufSh0LG4sbyl9ZnVuY3Rpb24gVXModCl7cmV0dXJuIDA9PT10fHwxODA9PT10P1wiY2VudGVyXCI6dDwxODA/XCJsZWZ0XCI6XCJyaWdodFwifWZ1bmN0aW9uIFhzKHQsZSxpKXtyZXR1cm5cInJpZ2h0XCI9PT1pP3QtPWU6XCJjZW50ZXJcIj09PWkmJih0LT1lLzIpLHR9ZnVuY3Rpb24gcXModCxlLGkpe3JldHVybiA5MD09PWl8fDI3MD09PWk/dC09ZS8yOihpPjI3MHx8aTw5MCkmJih0LT1lKSx0fWZ1bmN0aW9uIEtzKHQsZSxpLG4pe2NvbnN0e2N0eDpvfT10O2lmKGkpby5hcmModC54Q2VudGVyLHQueUNlbnRlcixlLDAsX3QpO2Vsc2V7bGV0IGk9dC5nZXRQb2ludFBvc2l0aW9uKDAsZSk7by5tb3ZlVG8oaS54LGkueSk7Zm9yKGxldCBzPTE7czxuO3MrKylpPXQuZ2V0UG9pbnRQb3NpdGlvbihzLGUpLG8ubGluZVRvKGkueCxpLnkpfX1mdW5jdGlvbiBHcyh0KXtyZXR1cm4gVHQodCk/dDowfUhzLmlkPVwibG9nYXJpdGhtaWNcIixIcy5kZWZhdWx0cz17dGlja3M6e2NhbGxiYWNrOlZpLmZvcm1hdHRlcnMubG9nYXJpdGhtaWMsbWFqb3I6e2VuYWJsZWQ6ITB9fX07Y2xhc3MgWnMgZXh0ZW5kcyBWc3tjb25zdHJ1Y3Rvcih0KXtzdXBlcih0KSx0aGlzLnhDZW50ZXI9dm9pZCAwLHRoaXMueUNlbnRlcj12b2lkIDAsdGhpcy5kcmF3aW5nQXJlYT12b2lkIDAsdGhpcy5fcG9pbnRMYWJlbHM9W10sdGhpcy5fcG9pbnRMYWJlbEl0ZW1zPVtdfXNldERpbWVuc2lvbnMoKXtjb25zdCB0PXRoaXM7dC53aWR0aD10Lm1heFdpZHRoLHQuaGVpZ2h0PXQubWF4SGVpZ2h0LHQucGFkZGluZ1RvcD1qcyh0Lm9wdGlvbnMpLzIsdC54Q2VudGVyPU1hdGguZmxvb3IodC53aWR0aC8yKSx0LnlDZW50ZXI9TWF0aC5mbG9vcigodC5oZWlnaHQtdC5wYWRkaW5nVG9wKS8yKSx0LmRyYXdpbmdBcmVhPU1hdGgubWluKHQuaGVpZ2h0LXQucGFkZGluZ1RvcCx0LndpZHRoKS8yfWRldGVybWluZURhdGFMaW1pdHMoKXtjb25zdCB0PXRoaXMse21pbjplLG1heDppfT10LmdldE1pbk1heCghMSk7dC5taW49WChlKSYmIWlzTmFOKGUpP2U6MCx0Lm1heD1YKGkpJiYhaXNOYU4oaSk/aTowLHQuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpfWNvbXB1dGVUaWNrTGltaXQoKXtyZXR1cm4gTWF0aC5jZWlsKHRoaXMuZHJhd2luZ0FyZWEvanModGhpcy5vcHRpb25zKSl9Z2VuZXJhdGVUaWNrTGFiZWxzKHQpe2NvbnN0IGU9dGhpcztWcy5wcm90b3R5cGUuZ2VuZXJhdGVUaWNrTGFiZWxzLmNhbGwoZSx0KSxlLl9wb2ludExhYmVscz1lLmdldExhYmVscygpLm1hcCgoKHQsaSk9Pntjb25zdCBuPVEoZS5vcHRpb25zLnBvaW50TGFiZWxzLmNhbGxiYWNrLFt0LGldLGUpO3JldHVybiBufHwwPT09bj9uOlwiXCJ9KSl9Zml0KCl7Y29uc3QgdD10aGlzLGU9dC5vcHRpb25zO2UuZGlzcGxheSYmZS5wb2ludExhYmVscy5kaXNwbGF5P1lzKHQpOnQuc2V0Q2VudGVyUG9pbnQoMCwwLDAsMCl9X3NldFJlZHVjdGlvbnModCxlLGkpe2NvbnN0IG49dGhpcztsZXQgbz1lLmwvTWF0aC5zaW4oaS5sKSxzPU1hdGgubWF4KGUuci1uLndpZHRoLDApL01hdGguc2luKGkuciksYT0tZS50L01hdGguY29zKGkudCkscj0tTWF0aC5tYXgoZS5iLShuLmhlaWdodC1uLnBhZGRpbmdUb3ApLDApL01hdGguY29zKGkuYik7bz1HcyhvKSxzPUdzKHMpLGE9R3MoYSkscj1HcyhyKSxuLmRyYXdpbmdBcmVhPU1hdGgubWF4KHQvMixNYXRoLm1pbihNYXRoLmZsb29yKHQtKG8rcykvMiksTWF0aC5mbG9vcih0LShhK3IpLzIpKSksbi5zZXRDZW50ZXJQb2ludChvLHMsYSxyKX1zZXRDZW50ZXJQb2ludCh0LGUsaSxuKXtjb25zdCBvPXRoaXMscz1vLndpZHRoLWUtby5kcmF3aW5nQXJlYSxhPXQrby5kcmF3aW5nQXJlYSxyPWkrby5kcmF3aW5nQXJlYSxsPW8uaGVpZ2h0LW8ucGFkZGluZ1RvcC1uLW8uZHJhd2luZ0FyZWE7by54Q2VudGVyPU1hdGguZmxvb3IoKGErcykvMitvLmxlZnQpLG8ueUNlbnRlcj1NYXRoLmZsb29yKChyK2wpLzIrby50b3Arby5wYWRkaW5nVG9wKX1nZXRJbmRleEFuZ2xlKHQpe3JldHVybiBXdCh0KihfdC90aGlzLmdldExhYmVscygpLmxlbmd0aCkrRXQodGhpcy5vcHRpb25zLnN0YXJ0QW5nbGV8fDApKX1nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0KXtjb25zdCBlPXRoaXM7aWYoJCh0KSlyZXR1cm4gTmFOO2NvbnN0IGk9ZS5kcmF3aW5nQXJlYS8oZS5tYXgtZS5taW4pO3JldHVybiBlLm9wdGlvbnMucmV2ZXJzZT8oZS5tYXgtdCkqaToodC1lLm1pbikqaX1nZXRWYWx1ZUZvckRpc3RhbmNlRnJvbUNlbnRlcih0KXtpZigkKHQpKXJldHVybiBOYU47Y29uc3QgZT10aGlzLGk9dC8oZS5kcmF3aW5nQXJlYS8oZS5tYXgtZS5taW4pKTtyZXR1cm4gZS5vcHRpb25zLnJldmVyc2U/ZS5tYXgtaTplLm1pbitpfWdldFBvaW50UG9zaXRpb24odCxlKXtjb25zdCBpPXRoaXMsbj1pLmdldEluZGV4QW5nbGUodCktTXQ7cmV0dXJue3g6TWF0aC5jb3MobikqZStpLnhDZW50ZXIseTpNYXRoLnNpbihuKSplK2kueUNlbnRlcixhbmdsZTpufX1nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUodCxlKXtyZXR1cm4gdGhpcy5nZXRQb2ludFBvc2l0aW9uKHQsdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShlKSl9Z2V0QmFzZVBvc2l0aW9uKHQpe3JldHVybiB0aGlzLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSh0fHwwLHRoaXMuZ2V0QmFzZVZhbHVlKCkpfWdldFBvaW50TGFiZWxQb3NpdGlvbih0KXtjb25zdHtsZWZ0OmUsdG9wOmkscmlnaHQ6bixib3R0b206b309dGhpcy5fcG9pbnRMYWJlbEl0ZW1zW3RdO3JldHVybntsZWZ0OmUsdG9wOmkscmlnaHQ6bixib3R0b206b319ZHJhd0JhY2tncm91bmQoKXtjb25zdCB0PXRoaXMse2JhY2tncm91bmRDb2xvcjplLGdyaWQ6e2NpcmN1bGFyOml9fT10Lm9wdGlvbnM7aWYoZSl7Y29uc3Qgbj10LmN0eDtuLnNhdmUoKSxuLmJlZ2luUGF0aCgpLEtzKHQsdC5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0Ll9lbmRWYWx1ZSksaSx0LmdldExhYmVscygpLmxlbmd0aCksbi5jbG9zZVBhdGgoKSxuLmZpbGxTdHlsZT1lLG4uZmlsbCgpLG4ucmVzdG9yZSgpfX1kcmF3R3JpZCgpe2NvbnN0IHQ9dGhpcyxlPXQuY3R4LGk9dC5vcHRpb25zLHthbmdsZUxpbmVzOm4sZ3JpZDpvfT1pLHM9dC5nZXRMYWJlbHMoKS5sZW5ndGg7bGV0IGEscixsO2lmKGkucG9pbnRMYWJlbHMuZGlzcGxheSYmZnVuY3Rpb24odCxlKXtjb25zdHtjdHg6aSxvcHRpb25zOntwb2ludExhYmVsczpufX09dDtmb3IobGV0IG89ZS0xO28+PTA7by0tKXtjb25zdCBlPW4uc2V0Q29udGV4dCh0LmdldENvbnRleHQobykpLHM9QmUoZS5mb250KSx7eDphLHk6cix0ZXh0QWxpZ246bCxsZWZ0OmMsdG9wOmgscmlnaHQ6ZCxib3R0b206dX09dC5fcG9pbnRMYWJlbEl0ZW1zW29dLHtiYWNrZHJvcENvbG9yOmZ9PWU7aWYoISQoZikpe2NvbnN0IHQ9RmUoZS5iYWNrZHJvcFBhZGRpbmcpO2kuZmlsbFN0eWxlPWYsaS5maWxsUmVjdChjLXQubGVmdCxoLXQudG9wLGQtYyt0LndpZHRoLHUtaCt0LmhlaWdodCl9ZWUoaSx0Ll9wb2ludExhYmVsc1tvXSxhLHIrcy5saW5lSGVpZ2h0LzIscyx7Y29sb3I6ZS5jb2xvcix0ZXh0QWxpZ246bCx0ZXh0QmFzZWxpbmU6XCJtaWRkbGVcIn0pfX0odCxzKSxvLmRpc3BsYXkmJnQudGlja3MuZm9yRWFjaCgoKGUsaSk9PntpZigwIT09aSl7cj10LmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKGUudmFsdWUpO2NvbnN0IG49by5zZXRDb250ZXh0KHQuZ2V0Q29udGV4dChpLTEpKTshZnVuY3Rpb24odCxlLGksbil7Y29uc3Qgbz10LmN0eCxzPWUuY2lyY3VsYXIse2NvbG9yOmEsbGluZVdpZHRoOnJ9PWU7IXMmJiFufHwhYXx8IXJ8fGk8MHx8KG8uc2F2ZSgpLG8uc3Ryb2tlU3R5bGU9YSxvLmxpbmVXaWR0aD1yLG8uc2V0TGluZURhc2goZS5ib3JkZXJEYXNoKSxvLmxpbmVEYXNoT2Zmc2V0PWUuYm9yZGVyRGFzaE9mZnNldCxvLmJlZ2luUGF0aCgpLEtzKHQsaSxzLG4pLG8uY2xvc2VQYXRoKCksby5zdHJva2UoKSxvLnJlc3RvcmUoKSl9KHQsbixyLHMpfX0pKSxuLmRpc3BsYXkpe2ZvcihlLnNhdmUoKSxhPXQuZ2V0TGFiZWxzKCkubGVuZ3RoLTE7YT49MDthLS0pe2NvbnN0IG89bi5zZXRDb250ZXh0KHQuZ2V0Q29udGV4dChhKSkse2NvbG9yOnMsbGluZVdpZHRoOmN9PW87YyYmcyYmKGUubGluZVdpZHRoPWMsZS5zdHJva2VTdHlsZT1zLGUuc2V0TGluZURhc2goby5ib3JkZXJEYXNoKSxlLmxpbmVEYXNoT2Zmc2V0PW8uYm9yZGVyRGFzaE9mZnNldCxyPXQuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUoaS50aWNrcy5yZXZlcnNlP3QubWluOnQubWF4KSxsPXQuZ2V0UG9pbnRQb3NpdGlvbihhLHIpLGUuYmVnaW5QYXRoKCksZS5tb3ZlVG8odC54Q2VudGVyLHQueUNlbnRlciksZS5saW5lVG8obC54LGwueSksZS5zdHJva2UoKSl9ZS5yZXN0b3JlKCl9fWRyYXdCb3JkZXIoKXt9ZHJhd0xhYmVscygpe2NvbnN0IHQ9dGhpcyxlPXQuY3R4LGk9dC5vcHRpb25zLG49aS50aWNrcztpZighbi5kaXNwbGF5KXJldHVybjtjb25zdCBvPXQuZ2V0SW5kZXhBbmdsZSgwKTtsZXQgcyxhO2Uuc2F2ZSgpLGUudHJhbnNsYXRlKHQueENlbnRlcix0LnlDZW50ZXIpLGUucm90YXRlKG8pLGUudGV4dEFsaWduPVwiY2VudGVyXCIsZS50ZXh0QmFzZWxpbmU9XCJtaWRkbGVcIix0LnRpY2tzLmZvckVhY2goKChvLHIpPT57aWYoMD09PXImJiFpLnJldmVyc2UpcmV0dXJuO2NvbnN0IGw9bi5zZXRDb250ZXh0KHQuZ2V0Q29udGV4dChyKSksYz1CZShsLmZvbnQpO2lmKHM9dC5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0LnRpY2tzW3JdLnZhbHVlKSxsLnNob3dMYWJlbEJhY2tkcm9wKXtlLmZvbnQ9Yy5zdHJpbmcsYT1lLm1lYXN1cmVUZXh0KG8ubGFiZWwpLndpZHRoLGUuZmlsbFN0eWxlPWwuYmFja2Ryb3BDb2xvcjtjb25zdCB0PUZlKGwuYmFja2Ryb3BQYWRkaW5nKTtlLmZpbGxSZWN0KC1hLzItdC5sZWZ0LC1zLWMuc2l6ZS8yLXQudG9wLGErdC53aWR0aCxjLnNpemUrdC5oZWlnaHQpfWVlKGUsby5sYWJlbCwwLC1zLGMse2NvbG9yOmwuY29sb3J9KX0pKSxlLnJlc3RvcmUoKX1kcmF3VGl0bGUoKXt9fVpzLmlkPVwicmFkaWFsTGluZWFyXCIsWnMuZGVmYXVsdHM9e2Rpc3BsYXk6ITAsYW5pbWF0ZTohMCxwb3NpdGlvbjpcImNoYXJ0QXJlYVwiLGFuZ2xlTGluZXM6e2Rpc3BsYXk6ITAsbGluZVdpZHRoOjEsYm9yZGVyRGFzaDpbXSxib3JkZXJEYXNoT2Zmc2V0OjB9LGdyaWQ6e2NpcmN1bGFyOiExfSxzdGFydEFuZ2xlOjAsdGlja3M6e3Nob3dMYWJlbEJhY2tkcm9wOiEwLGNhbGxiYWNrOlZpLmZvcm1hdHRlcnMubnVtZXJpY30scG9pbnRMYWJlbHM6e2JhY2tkcm9wQ29sb3I6dm9pZCAwLGJhY2tkcm9wUGFkZGluZzoyLGRpc3BsYXk6ITAsZm9udDp7c2l6ZToxMH0sY2FsbGJhY2s6dD0+dCxwYWRkaW5nOjV9fSxacy5kZWZhdWx0Um91dGVzPXtcImFuZ2xlTGluZXMuY29sb3JcIjpcImJvcmRlckNvbG9yXCIsXCJwb2ludExhYmVscy5jb2xvclwiOlwiY29sb3JcIixcInRpY2tzLmNvbG9yXCI6XCJjb2xvclwifSxacy5kZXNjcmlwdG9ycz17YW5nbGVMaW5lczp7X2ZhbGxiYWNrOlwiZ3JpZFwifX07Y29uc3QgUXM9e21pbGxpc2Vjb25kOntjb21tb246ITAsc2l6ZToxLHN0ZXBzOjFlM30sc2Vjb25kOntjb21tb246ITAsc2l6ZToxZTMsc3RlcHM6NjB9LG1pbnV0ZTp7Y29tbW9uOiEwLHNpemU6NmU0LHN0ZXBzOjYwfSxob3VyOntjb21tb246ITAsc2l6ZTozNmU1LHN0ZXBzOjI0fSxkYXk6e2NvbW1vbjohMCxzaXplOjg2NGU1LHN0ZXBzOjMwfSx3ZWVrOntjb21tb246ITEsc2l6ZTo2MDQ4ZTUsc3RlcHM6NH0sbW9udGg6e2NvbW1vbjohMCxzaXplOjI2MjhlNixzdGVwczoxMn0scXVhcnRlcjp7Y29tbW9uOiExLHNpemU6Nzg4NGU2LHN0ZXBzOjR9LHllYXI6e2NvbW1vbjohMCxzaXplOjMxNTRlN319LEpzPU9iamVjdC5rZXlzKFFzKTtmdW5jdGlvbiB0YSh0LGUpe3JldHVybiB0LWV9ZnVuY3Rpb24gZWEodCxlKXtpZigkKGUpKXJldHVybiBudWxsO2NvbnN0IGk9dC5fYWRhcHRlcix7cGFyc2VyOm4scm91bmQ6byxpc29XZWVrZGF5OnN9PXQuX3BhcnNlT3B0cztsZXQgYT1lO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4mJihhPW4oYSkpLFgoYSl8fChhPVwic3RyaW5nXCI9PXR5cGVvZiBuP2kucGFyc2UoYSxuKTppLnBhcnNlKGEpKSxudWxsPT09YT9udWxsOihvJiYoYT1cIndlZWtcIiE9PW98fCFUdChzKSYmITAhPT1zP2kuc3RhcnRPZihhLG8pOmkuc3RhcnRPZihhLFwiaXNvV2Vla1wiLHMpKSwrYSl9ZnVuY3Rpb24gaWEodCxlLGksbil7Y29uc3Qgbz1Kcy5sZW5ndGg7Zm9yKGxldCBzPUpzLmluZGV4T2YodCk7czxvLTE7KytzKXtjb25zdCB0PVFzW0pzW3NdXSxvPXQuc3RlcHM/dC5zdGVwczpOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtpZih0LmNvbW1vbiYmTWF0aC5jZWlsKChpLWUpLyhvKnQuc2l6ZSkpPD1uKXJldHVybiBKc1tzXX1yZXR1cm4gSnNbby0xXX1mdW5jdGlvbiBuYSh0LGUsaSl7aWYoaSl7aWYoaS5sZW5ndGgpe2NvbnN0e2xvOm4saGk6b309b2UoaSxlKTt0W2lbbl0+PWU/aVtuXTppW29dXT0hMH19ZWxzZSB0W2VdPSEwfWZ1bmN0aW9uIG9hKHQsZSxpKXtjb25zdCBuPVtdLG89e30scz1lLmxlbmd0aDtsZXQgYSxyO2ZvcihhPTA7YTxzOysrYSlyPWVbYV0sb1tyXT1hLG4ucHVzaCh7dmFsdWU6cixtYWpvcjohMX0pO3JldHVybiAwIT09cyYmaT9mdW5jdGlvbih0LGUsaSxuKXtjb25zdCBvPXQuX2FkYXB0ZXIscz0rby5zdGFydE9mKGVbMF0udmFsdWUsbiksYT1lW2UubGVuZ3RoLTFdLnZhbHVlO2xldCByLGw7Zm9yKHI9cztyPD1hO3I9K28uYWRkKHIsMSxuKSlsPWlbcl0sbD49MCYmKGVbbF0ubWFqb3I9ITApO3JldHVybiBlfSh0LG4sbyxpKTpufWNsYXNzIHNhIGV4dGVuZHMgcWl7Y29uc3RydWN0b3IodCl7c3VwZXIodCksdGhpcy5fY2FjaGU9e2RhdGE6W10sbGFiZWxzOltdLGFsbDpbXX0sdGhpcy5fdW5pdD1cImRheVwiLHRoaXMuX21ham9yVW5pdD12b2lkIDAsdGhpcy5fb2Zmc2V0cz17fSx0aGlzLl9ub3JtYWxpemVkPSExLHRoaXMuX3BhcnNlT3B0cz12b2lkIDB9aW5pdCh0LGUpe2NvbnN0IGk9dC50aW1lfHwodC50aW1lPXt9KSxuPXRoaXMuX2FkYXB0ZXI9bmV3IGFvLl9kYXRlKHQuYWRhcHRlcnMuZGF0ZSk7c3QoaS5kaXNwbGF5Rm9ybWF0cyxuLmZvcm1hdHMoKSksdGhpcy5fcGFyc2VPcHRzPXtwYXJzZXI6aS5wYXJzZXIscm91bmQ6aS5yb3VuZCxpc29XZWVrZGF5OmkuaXNvV2Vla2RheX0sc3VwZXIuaW5pdCh0KSx0aGlzLl9ub3JtYWxpemVkPWUubm9ybWFsaXplZH1wYXJzZSh0LGUpe3JldHVybiB2b2lkIDA9PT10P251bGw6ZWEodGhpcyx0KX1iZWZvcmVMYXlvdXQoKXtzdXBlci5iZWZvcmVMYXlvdXQoKSx0aGlzLl9jYWNoZT17ZGF0YTpbXSxsYWJlbHM6W10sYWxsOltdfX1kZXRlcm1pbmVEYXRhTGltaXRzKCl7Y29uc3QgdD10aGlzLGU9dC5vcHRpb25zLGk9dC5fYWRhcHRlcixuPWUudGltZS51bml0fHxcImRheVwiO2xldHttaW46byxtYXg6cyxtaW5EZWZpbmVkOmEsbWF4RGVmaW5lZDpyfT10LmdldFVzZXJCb3VuZHMoKTtmdW5jdGlvbiBsKHQpe2F8fGlzTmFOKHQubWluKXx8KG89TWF0aC5taW4obyx0Lm1pbikpLHJ8fGlzTmFOKHQubWF4KXx8KHM9TWF0aC5tYXgocyx0Lm1heCkpfWEmJnJ8fChsKHQuX2dldExhYmVsQm91bmRzKCkpLFwidGlja3NcIj09PWUuYm91bmRzJiZcImxhYmVsc1wiPT09ZS50aWNrcy5zb3VyY2V8fGwodC5nZXRNaW5NYXgoITEpKSksbz1YKG8pJiYhaXNOYU4obyk/bzoraS5zdGFydE9mKERhdGUubm93KCksbikscz1YKHMpJiYhaXNOYU4ocyk/czoraS5lbmRPZihEYXRlLm5vdygpLG4pKzEsdC5taW49TWF0aC5taW4obyxzLTEpLHQubWF4PU1hdGgubWF4KG8rMSxzKX1fZ2V0TGFiZWxCb3VuZHMoKXtjb25zdCB0PXRoaXMuZ2V0TGFiZWxUaW1lc3RhbXBzKCk7bGV0IGU9TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLGk9TnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO3JldHVybiB0Lmxlbmd0aCYmKGU9dFswXSxpPXRbdC5sZW5ndGgtMV0pLHttaW46ZSxtYXg6aX19YnVpbGRUaWNrcygpe2NvbnN0IHQ9dGhpcyxlPXQub3B0aW9ucyxpPWUudGltZSxuPWUudGlja3Msbz1cImxhYmVsc1wiPT09bi5zb3VyY2U/dC5nZXRMYWJlbFRpbWVzdGFtcHMoKTp0Ll9nZW5lcmF0ZSgpO1widGlja3NcIj09PWUuYm91bmRzJiZvLmxlbmd0aCYmKHQubWluPXQuX3VzZXJNaW58fG9bMF0sdC5tYXg9dC5fdXNlck1heHx8b1tvLmxlbmd0aC0xXSk7Y29uc3Qgcz10Lm1pbixhPXJlKG8scyx0Lm1heCk7cmV0dXJuIHQuX3VuaXQ9aS51bml0fHwobi5hdXRvU2tpcD9pYShpLm1pblVuaXQsdC5taW4sdC5tYXgsdC5fZ2V0TGFiZWxDYXBhY2l0eShzKSk6ZnVuY3Rpb24odCxlLGksbixvKXtmb3IobGV0IHM9SnMubGVuZ3RoLTE7cz49SnMuaW5kZXhPZihpKTtzLS0pe2NvbnN0IGk9SnNbc107aWYoUXNbaV0uY29tbW9uJiZ0Ll9hZGFwdGVyLmRpZmYobyxuLGkpPj1lLTEpcmV0dXJuIGl9cmV0dXJuIEpzW2k/SnMuaW5kZXhPZihpKTowXX0odCxhLmxlbmd0aCxpLm1pblVuaXQsdC5taW4sdC5tYXgpKSx0Ll9tYWpvclVuaXQ9bi5tYWpvci5lbmFibGVkJiZcInllYXJcIiE9PXQuX3VuaXQ/ZnVuY3Rpb24odCl7Zm9yKGxldCBlPUpzLmluZGV4T2YodCkrMSxpPUpzLmxlbmd0aDtlPGk7KytlKWlmKFFzW0pzW2VdXS5jb21tb24pcmV0dXJuIEpzW2VdfSh0Ll91bml0KTp2b2lkIDAsdC5pbml0T2Zmc2V0cyhvKSxlLnJldmVyc2UmJmEucmV2ZXJzZSgpLG9hKHQsYSx0Ll9tYWpvclVuaXQpfWluaXRPZmZzZXRzKHQpe2NvbnN0IGU9dGhpcztsZXQgaSxuLG89MCxzPTA7ZS5vcHRpb25zLm9mZnNldCYmdC5sZW5ndGgmJihpPWUuZ2V0RGVjaW1hbEZvclZhbHVlKHRbMF0pLG89MT09PXQubGVuZ3RoPzEtaTooZS5nZXREZWNpbWFsRm9yVmFsdWUodFsxXSktaSkvMixuPWUuZ2V0RGVjaW1hbEZvclZhbHVlKHRbdC5sZW5ndGgtMV0pLHM9MT09PXQubGVuZ3RoP246KG4tZS5nZXREZWNpbWFsRm9yVmFsdWUodFt0Lmxlbmd0aC0yXSkpLzIpO2NvbnN0IGE9dC5sZW5ndGg8Mz8uNTouMjU7bz1IdChvLDAsYSkscz1IdChzLDAsYSksZS5fb2Zmc2V0cz17c3RhcnQ6byxlbmQ6cyxmYWN0b3I6MS8obysxK3MpfX1fZ2VuZXJhdGUoKXtjb25zdCB0PXRoaXMsZT10Ll9hZGFwdGVyLGk9dC5taW4sbj10Lm1heCxvPXQub3B0aW9ucyxzPW8udGltZSxhPXMudW5pdHx8aWEocy5taW5Vbml0LGksbix0Ll9nZXRMYWJlbENhcGFjaXR5KGkpKSxyPUsocy5zdGVwU2l6ZSwxKSxsPVwid2Vla1wiPT09YSYmcy5pc29XZWVrZGF5LGM9VHQobCl8fCEwPT09bCxoPXt9O2xldCBkLHUsZj1pO2lmKGMmJihmPStlLnN0YXJ0T2YoZixcImlzb1dlZWtcIixsKSksZj0rZS5zdGFydE9mKGYsYz9cImRheVwiOmEpLGUuZGlmZihuLGksYSk+MWU1KnIpdGhyb3cgbmV3IEVycm9yKGkrXCIgYW5kIFwiK24rXCIgYXJlIHRvbyBmYXIgYXBhcnQgd2l0aCBzdGVwU2l6ZSBvZiBcIityK1wiIFwiK2EpO2NvbnN0IGc9XCJkYXRhXCI9PT1vLnRpY2tzLnNvdXJjZSYmdC5nZXREYXRhVGltZXN0YW1wcygpO2ZvcihkPWYsdT0wO2Q8bjtkPStlLmFkZChkLHIsYSksdSsrKW5hKGgsZCxnKTtyZXR1cm4gZCE9PW4mJlwidGlja3NcIiE9PW8uYm91bmRzJiYxIT09dXx8bmEoaCxkLGcpLE9iamVjdC5rZXlzKGgpLnNvcnQoKCh0LGUpPT50LWUpKS5tYXAoKHQ9Pit0KSl9Z2V0TGFiZWxGb3JWYWx1ZSh0KXtjb25zdCBlPXRoaXMuX2FkYXB0ZXIsaT10aGlzLm9wdGlvbnMudGltZTtyZXR1cm4gaS50b29sdGlwRm9ybWF0P2UuZm9ybWF0KHQsaS50b29sdGlwRm9ybWF0KTplLmZvcm1hdCh0LGkuZGlzcGxheUZvcm1hdHMuZGF0ZXRpbWUpfV90aWNrRm9ybWF0RnVuY3Rpb24odCxlLGksbil7Y29uc3Qgbz10aGlzLHM9by5vcHRpb25zLGE9cy50aW1lLmRpc3BsYXlGb3JtYXRzLHI9by5fdW5pdCxsPW8uX21ham9yVW5pdCxjPXImJmFbcl0saD1sJiZhW2xdLGQ9aVtlXSx1PWwmJmgmJmQmJmQubWFqb3IsZj1vLl9hZGFwdGVyLmZvcm1hdCh0LG58fCh1P2g6YykpLGc9cy50aWNrcy5jYWxsYmFjaztyZXR1cm4gZz9RKGcsW2YsZSxpXSxvKTpmfWdlbmVyYXRlVGlja0xhYmVscyh0KXtsZXQgZSxpLG47Zm9yKGU9MCxpPXQubGVuZ3RoO2U8aTsrK2Upbj10W2VdLG4ubGFiZWw9dGhpcy5fdGlja0Zvcm1hdEZ1bmN0aW9uKG4udmFsdWUsZSx0KX1nZXREZWNpbWFsRm9yVmFsdWUodCl7Y29uc3QgZT10aGlzO3JldHVybiBudWxsPT09dD9OYU46KHQtZS5taW4pLyhlLm1heC1lLm1pbil9Z2V0UGl4ZWxGb3JWYWx1ZSh0KXtjb25zdCBlPXRoaXMsaT1lLl9vZmZzZXRzLG49ZS5nZXREZWNpbWFsRm9yVmFsdWUodCk7cmV0dXJuIGUuZ2V0UGl4ZWxGb3JEZWNpbWFsKChpLnN0YXJ0K24pKmkuZmFjdG9yKX1nZXRWYWx1ZUZvclBpeGVsKHQpe2NvbnN0IGU9dGhpcyxpPWUuX29mZnNldHMsbj1lLmdldERlY2ltYWxGb3JQaXhlbCh0KS9pLmZhY3Rvci1pLmVuZDtyZXR1cm4gZS5taW4rbiooZS5tYXgtZS5taW4pfV9nZXRMYWJlbFNpemUodCl7Y29uc3QgZT10aGlzLGk9ZS5vcHRpb25zLnRpY2tzLG49ZS5jdHgubWVhc3VyZVRleHQodCkud2lkdGgsbz1FdChlLmlzSG9yaXpvbnRhbCgpP2kubWF4Um90YXRpb246aS5taW5Sb3RhdGlvbikscz1NYXRoLmNvcyhvKSxhPU1hdGguc2luKG8pLHI9ZS5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKS5zaXplO3JldHVybnt3Om4qcytyKmEsaDpuKmErcipzfX1fZ2V0TGFiZWxDYXBhY2l0eSh0KXtjb25zdCBlPXRoaXMsaT1lLm9wdGlvbnMudGltZSxuPWkuZGlzcGxheUZvcm1hdHMsbz1uW2kudW5pdF18fG4ubWlsbGlzZWNvbmQscz1lLl90aWNrRm9ybWF0RnVuY3Rpb24odCwwLG9hKGUsW3RdLGUuX21ham9yVW5pdCksbyksYT1lLl9nZXRMYWJlbFNpemUocykscj1NYXRoLmZsb29yKGUuaXNIb3Jpem9udGFsKCk/ZS53aWR0aC9hLnc6ZS5oZWlnaHQvYS5oKS0xO3JldHVybiByPjA/cjoxfWdldERhdGFUaW1lc3RhbXBzKCl7Y29uc3QgdD10aGlzO2xldCBlLGksbj10Ll9jYWNoZS5kYXRhfHxbXTtpZihuLmxlbmd0aClyZXR1cm4gbjtjb25zdCBvPXQuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoKTtpZih0Ll9ub3JtYWxpemVkJiZvLmxlbmd0aClyZXR1cm4gdC5fY2FjaGUuZGF0YT1vWzBdLmNvbnRyb2xsZXIuZ2V0QWxsUGFyc2VkVmFsdWVzKHQpO2ZvcihlPTAsaT1vLmxlbmd0aDtlPGk7KytlKW49bi5jb25jYXQob1tlXS5jb250cm9sbGVyLmdldEFsbFBhcnNlZFZhbHVlcyh0KSk7cmV0dXJuIHQuX2NhY2hlLmRhdGE9dC5ub3JtYWxpemUobil9Z2V0TGFiZWxUaW1lc3RhbXBzKCl7Y29uc3QgdD10aGlzLGU9dC5fY2FjaGUubGFiZWxzfHxbXTtsZXQgaSxuO2lmKGUubGVuZ3RoKXJldHVybiBlO2NvbnN0IG89dC5nZXRMYWJlbHMoKTtmb3IoaT0wLG49by5sZW5ndGg7aTxuOysraSllLnB1c2goZWEodCxvW2ldKSk7cmV0dXJuIHQuX2NhY2hlLmxhYmVscz10Ll9ub3JtYWxpemVkP2U6dC5ub3JtYWxpemUoZSl9bm9ybWFsaXplKHQpe3JldHVybiBkZSh0LnNvcnQodGEpKX19ZnVuY3Rpb24gYWEodCxlLGkpe2xldCBuLG8scyxhLHI9MCxsPXQubGVuZ3RoLTE7aT8oZT49dFtyXS5wb3MmJmU8PXRbbF0ucG9zJiYoe2xvOnIsaGk6bH09c2UodCxcInBvc1wiLGUpKSwoe3BvczpuLHRpbWU6c309dFtyXSksKHtwb3M6byx0aW1lOmF9PXRbbF0pKTooZT49dFtyXS50aW1lJiZlPD10W2xdLnRpbWUmJih7bG86cixoaTpsfT1zZSh0LFwidGltZVwiLGUpKSwoe3RpbWU6bixwb3M6c309dFtyXSksKHt0aW1lOm8scG9zOmF9PXRbbF0pKTtjb25zdCBjPW8tbjtyZXR1cm4gYz9zKyhhLXMpKihlLW4pL2M6c31zYS5pZD1cInRpbWVcIixzYS5kZWZhdWx0cz17Ym91bmRzOlwiZGF0YVwiLGFkYXB0ZXJzOnt9LHRpbWU6e3BhcnNlcjohMSx1bml0OiExLHJvdW5kOiExLGlzb1dlZWtkYXk6ITEsbWluVW5pdDpcIm1pbGxpc2Vjb25kXCIsZGlzcGxheUZvcm1hdHM6e319LHRpY2tzOntzb3VyY2U6XCJhdXRvXCIsbWFqb3I6e2VuYWJsZWQ6ITF9fX07Y2xhc3MgcmEgZXh0ZW5kcyBzYXtjb25zdHJ1Y3Rvcih0KXtzdXBlcih0KSx0aGlzLl90YWJsZT1bXSx0aGlzLl9taW5Qb3M9dm9pZCAwLHRoaXMuX3RhYmxlUmFuZ2U9dm9pZCAwfWluaXRPZmZzZXRzKCl7Y29uc3QgdD10aGlzLGU9dC5fZ2V0VGltZXN0YW1wc0ZvclRhYmxlKCksaT10Ll90YWJsZT10LmJ1aWxkTG9va3VwVGFibGUoZSk7dC5fbWluUG9zPWFhKGksdC5taW4pLHQuX3RhYmxlUmFuZ2U9YWEoaSx0Lm1heCktdC5fbWluUG9zLHN1cGVyLmluaXRPZmZzZXRzKGUpfWJ1aWxkTG9va3VwVGFibGUodCl7Y29uc3R7bWluOmUsbWF4Oml9PXRoaXMsbj1bXSxvPVtdO2xldCBzLGEscixsLGM7Zm9yKHM9MCxhPXQubGVuZ3RoO3M8YTsrK3MpbD10W3NdLGw+PWUmJmw8PWkmJm4ucHVzaChsKTtpZihuLmxlbmd0aDwyKXJldHVyblt7dGltZTplLHBvczowfSx7dGltZTppLHBvczoxfV07Zm9yKHM9MCxhPW4ubGVuZ3RoO3M8YTsrK3MpYz1uW3MrMV0scj1uW3MtMV0sbD1uW3NdLE1hdGgucm91bmQoKGMrcikvMikhPT1sJiZvLnB1c2goe3RpbWU6bCxwb3M6cy8oYS0xKX0pO3JldHVybiBvfV9nZXRUaW1lc3RhbXBzRm9yVGFibGUoKXtjb25zdCB0PXRoaXM7bGV0IGU9dC5fY2FjaGUuYWxsfHxbXTtpZihlLmxlbmd0aClyZXR1cm4gZTtjb25zdCBpPXQuZ2V0RGF0YVRpbWVzdGFtcHMoKSxuPXQuZ2V0TGFiZWxUaW1lc3RhbXBzKCk7cmV0dXJuIGU9aS5sZW5ndGgmJm4ubGVuZ3RoP3Qubm9ybWFsaXplKGkuY29uY2F0KG4pKTppLmxlbmd0aD9pOm4sZT10Ll9jYWNoZS5hbGw9ZSxlfWdldERlY2ltYWxGb3JWYWx1ZSh0KXtyZXR1cm4oYWEodGhpcy5fdGFibGUsdCktdGhpcy5fbWluUG9zKS90aGlzLl90YWJsZVJhbmdlfWdldFZhbHVlRm9yUGl4ZWwodCl7Y29uc3QgZT10aGlzLGk9ZS5fb2Zmc2V0cyxuPWUuZ2V0RGVjaW1hbEZvclBpeGVsKHQpL2kuZmFjdG9yLWkuZW5kO3JldHVybiBhYShlLl90YWJsZSxuKmUuX3RhYmxlUmFuZ2UrZS5fbWluUG9zLCEwKX19cmEuaWQ9XCJ0aW1lc2VyaWVzXCIscmEuZGVmYXVsdHM9c2EuZGVmYXVsdHM7dmFyIGxhPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLENhdGVnb3J5U2NhbGU6RnMsTGluZWFyU2NhbGU6V3MsTG9nYXJpdGhtaWNTY2FsZTpIcyxSYWRpYWxMaW5lYXJTY2FsZTpacyxUaW1lU2NhbGU6c2EsVGltZVNlcmllc1NjYWxlOnJhfSk7cmV0dXJuIGVvLnJlZ2lzdGVyKHlvLGxhLFhvLHpzKSxlby5oZWxwZXJzPXsuLi5Ubn0sZW8uX2FkYXB0ZXJzPWFvLGVvLkFuaW1hdGlvbj15aSxlby5BbmltYXRpb25zPXdpLGVvLmFuaW1hdG9yPWEsZW8uY29udHJvbGxlcnM9TG4uY29udHJvbGxlcnMuaXRlbXMsZW8uRGF0YXNldENvbnRyb2xsZXI9RWksZW8uRWxlbWVudD16aSxlby5lbGVtZW50cz1Ybyxlby5JbnRlcmFjdGlvbj1UZSxlby5sYXlvdXRzPVplLGVvLnBsYXRmb3Jtcz1maSxlby5TY2FsZT1xaSxlby5UaWNrcz1WaSxPYmplY3QuYXNzaWduKGVvLHlvLGxhLFhvLHpzLGZpKSxlby5DaGFydD1lbyxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYod2luZG93LkNoYXJ0PWVvKSxlb30pKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/chart.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/chart.min.js");
/******/ 	
/******/ })()
;